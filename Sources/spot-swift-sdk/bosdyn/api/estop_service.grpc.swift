//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/estop_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The software robot E-Stop system:
///  1. Uses challenge-style communication to enforce end user (aka "originators") connection
///     for Authority to Operate (ATO).
///  2. Offers the ability to issue a direct denial of  ATO.
/// The EstopService provides a service interface for the robot EStop/Authority to operate the system.
///
/// Usage: instantiate `Bosdyn_Api_EstopServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_EstopServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_EstopServiceClientInterceptorFactoryProtocol? { get }

  func registerEstopEndpoint(
    _ request: Bosdyn_Api_RegisterEstopEndpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RegisterEstopEndpointRequest, Bosdyn_Api_RegisterEstopEndpointResponse>

  func deregisterEstopEndpoint(
    _ request: Bosdyn_Api_DeregisterEstopEndpointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_DeregisterEstopEndpointRequest, Bosdyn_Api_DeregisterEstopEndpointResponse>

  func estopCheckIn(
    _ request: Bosdyn_Api_EstopCheckInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_EstopCheckInRequest, Bosdyn_Api_EstopCheckInResponse>

  func getEstopConfig(
    _ request: Bosdyn_Api_GetEstopConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetEstopConfigRequest, Bosdyn_Api_GetEstopConfigResponse>

  func setEstopConfig(
    _ request: Bosdyn_Api_SetEstopConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SetEstopConfigRequest, Bosdyn_Api_SetEstopConfigResponse>

  func getEstopSystemStatus(
    _ request: Bosdyn_Api_GetEstopSystemStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetEstopSystemStatusRequest, Bosdyn_Api_GetEstopSystemStatusResponse>
}

extension Bosdyn_Api_EstopServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.EstopService"
  }

  /// Register an Estop "originator" or "endpoint".
  /// This may be a replacement for another active endpoint.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterEstopEndpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerEstopEndpoint(
    _ request: Bosdyn_Api_RegisterEstopEndpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RegisterEstopEndpointRequest, Bosdyn_Api_RegisterEstopEndpointResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/RegisterEstopEndpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterEstopEndpointInterceptors() ?? []
    )
  }

  /// Deregister the requested estop endpoint.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeregisterEstopEndpoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deregisterEstopEndpoint(
    _ request: Bosdyn_Api_DeregisterEstopEndpointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_DeregisterEstopEndpointRequest, Bosdyn_Api_DeregisterEstopEndpointResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/DeregisterEstopEndpoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterEstopEndpointInterceptors() ?? []
    )
  }

  /// Answer challenge from previous response (unless this is the first call), and request
  /// a stop level.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstopCheckIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estopCheckIn(
    _ request: Bosdyn_Api_EstopCheckInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_EstopCheckInRequest, Bosdyn_Api_EstopCheckInResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/EstopCheckIn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstopCheckInInterceptors() ?? []
    )
  }

  /// Request the current EstopConfig, describing the expected set of endpoints.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEstopConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getEstopConfig(
    _ request: Bosdyn_Api_GetEstopConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetEstopConfigRequest, Bosdyn_Api_GetEstopConfigResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/GetEstopConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEstopConfigInterceptors() ?? []
    )
  }

  /// Set a new active EstopConfig.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetEstopConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setEstopConfig(
    _ request: Bosdyn_Api_SetEstopConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SetEstopConfigRequest, Bosdyn_Api_SetEstopConfigResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/SetEstopConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetEstopConfigInterceptors() ?? []
    )
  }

  /// Ask for the current status of the estop system.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEstopSystemStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getEstopSystemStatus(
    _ request: Bosdyn_Api_GetEstopSystemStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetEstopSystemStatusRequest, Bosdyn_Api_GetEstopSystemStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.EstopService/GetEstopSystemStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEstopSystemStatusInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_EstopServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerEstopEndpoint'.
  func makeRegisterEstopEndpointInterceptors() -> [ClientInterceptor<Bosdyn_Api_RegisterEstopEndpointRequest, Bosdyn_Api_RegisterEstopEndpointResponse>]

  /// - Returns: Interceptors to use when invoking 'deregisterEstopEndpoint'.
  func makeDeregisterEstopEndpointInterceptors() -> [ClientInterceptor<Bosdyn_Api_DeregisterEstopEndpointRequest, Bosdyn_Api_DeregisterEstopEndpointResponse>]

  /// - Returns: Interceptors to use when invoking 'estopCheckIn'.
  func makeEstopCheckInInterceptors() -> [ClientInterceptor<Bosdyn_Api_EstopCheckInRequest, Bosdyn_Api_EstopCheckInResponse>]

  /// - Returns: Interceptors to use when invoking 'getEstopConfig'.
  func makeGetEstopConfigInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetEstopConfigRequest, Bosdyn_Api_GetEstopConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'setEstopConfig'.
  func makeSetEstopConfigInterceptors() -> [ClientInterceptor<Bosdyn_Api_SetEstopConfigRequest, Bosdyn_Api_SetEstopConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'getEstopSystemStatus'.
  func makeGetEstopSystemStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetEstopSystemStatusRequest, Bosdyn_Api_GetEstopSystemStatusResponse>]
}

public final class Bosdyn_Api_EstopServiceClient: Bosdyn_Api_EstopServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_EstopServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.EstopService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_EstopServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The software robot E-Stop system:
///  1. Uses challenge-style communication to enforce end user (aka "originators") connection
///     for Authority to Operate (ATO).
///  2. Offers the ability to issue a direct denial of  ATO.
/// The EstopService provides a service interface for the robot EStop/Authority to operate the system.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_EstopServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_EstopServiceServerInterceptorFactoryProtocol? { get }

  /// Register an Estop "originator" or "endpoint".
  /// This may be a replacement for another active endpoint.
  func registerEstopEndpoint(request: Bosdyn_Api_RegisterEstopEndpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RegisterEstopEndpointResponse>

  /// Deregister the requested estop endpoint.
  func deregisterEstopEndpoint(request: Bosdyn_Api_DeregisterEstopEndpointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_DeregisterEstopEndpointResponse>

  /// Answer challenge from previous response (unless this is the first call), and request
  /// a stop level.
  func estopCheckIn(request: Bosdyn_Api_EstopCheckInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_EstopCheckInResponse>

  /// Request the current EstopConfig, describing the expected set of endpoints.
  func getEstopConfig(request: Bosdyn_Api_GetEstopConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetEstopConfigResponse>

  /// Set a new active EstopConfig.
  func setEstopConfig(request: Bosdyn_Api_SetEstopConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SetEstopConfigResponse>

  /// Ask for the current status of the estop system.
  func getEstopSystemStatus(request: Bosdyn_Api_GetEstopSystemStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetEstopSystemStatusResponse>
}

extension Bosdyn_Api_EstopServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.EstopService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterEstopEndpoint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RegisterEstopEndpointRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RegisterEstopEndpointResponse>(),
        interceptors: self.interceptors?.makeRegisterEstopEndpointInterceptors() ?? [],
        userFunction: self.registerEstopEndpoint(request:context:)
      )

    case "DeregisterEstopEndpoint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_DeregisterEstopEndpointRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_DeregisterEstopEndpointResponse>(),
        interceptors: self.interceptors?.makeDeregisterEstopEndpointInterceptors() ?? [],
        userFunction: self.deregisterEstopEndpoint(request:context:)
      )

    case "EstopCheckIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_EstopCheckInRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_EstopCheckInResponse>(),
        interceptors: self.interceptors?.makeEstopCheckInInterceptors() ?? [],
        userFunction: self.estopCheckIn(request:context:)
      )

    case "GetEstopConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetEstopConfigRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetEstopConfigResponse>(),
        interceptors: self.interceptors?.makeGetEstopConfigInterceptors() ?? [],
        userFunction: self.getEstopConfig(request:context:)
      )

    case "SetEstopConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SetEstopConfigRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SetEstopConfigResponse>(),
        interceptors: self.interceptors?.makeSetEstopConfigInterceptors() ?? [],
        userFunction: self.setEstopConfig(request:context:)
      )

    case "GetEstopSystemStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetEstopSystemStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetEstopSystemStatusResponse>(),
        interceptors: self.interceptors?.makeGetEstopSystemStatusInterceptors() ?? [],
        userFunction: self.getEstopSystemStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_EstopServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerEstopEndpoint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterEstopEndpointInterceptors() -> [ServerInterceptor<Bosdyn_Api_RegisterEstopEndpointRequest, Bosdyn_Api_RegisterEstopEndpointResponse>]

  /// - Returns: Interceptors to use when handling 'deregisterEstopEndpoint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeregisterEstopEndpointInterceptors() -> [ServerInterceptor<Bosdyn_Api_DeregisterEstopEndpointRequest, Bosdyn_Api_DeregisterEstopEndpointResponse>]

  /// - Returns: Interceptors to use when handling 'estopCheckIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstopCheckInInterceptors() -> [ServerInterceptor<Bosdyn_Api_EstopCheckInRequest, Bosdyn_Api_EstopCheckInResponse>]

  /// - Returns: Interceptors to use when handling 'getEstopConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEstopConfigInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetEstopConfigRequest, Bosdyn_Api_GetEstopConfigResponse>]

  /// - Returns: Interceptors to use when handling 'setEstopConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetEstopConfigInterceptors() -> [ServerInterceptor<Bosdyn_Api_SetEstopConfigRequest, Bosdyn_Api_SetEstopConfigResponse>]

  /// - Returns: Interceptors to use when handling 'getEstopSystemStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEstopSystemStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetEstopSystemStatusRequest, Bosdyn_Api_GetEstopSystemStatusResponse>]
}
