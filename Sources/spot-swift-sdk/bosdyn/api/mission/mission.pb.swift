// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/mission/mission.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Get the state of the mission.
public struct Bosdyn_Api_Mission_GetStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Upper bound on the node state to retrieve, inclusive. Leave unset for the latest data.
  public var historyUpperTickBound: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _historyUpperTickBound ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_historyUpperTickBound = newValue}
  }
  /// Returns true if `historyUpperTickBound` has been explicitly set.
  public var hasHistoryUpperTickBound: Bool {return self._historyUpperTickBound != nil}
  /// Clears the value of `historyUpperTickBound`. Subsequent reads from it will return its default value.
  public mutating func clearHistoryUpperTickBound() {self._historyUpperTickBound = nil}

  /// Specify the lower bound of per-node state history to retrieve.
  /// The service may not remember all the state you ask for. In this case, all of the state
  /// available between the specified bounds will be returned.
  /// This is optional -- if left unset, you will get exactly one set of per-node state.
  public var lowerBound: Bosdyn_Api_Mission_GetStateRequest.OneOf_LowerBound? = nil

  /// Tick counter for the lower bound of per-node state to retrieve.
  public var historyLowerTickBound: Int64 {
    get {
      if case .historyLowerTickBound(let v)? = lowerBound {return v}
      return 0
    }
    set {lowerBound = .historyLowerTickBound(newValue)}
  }

  /// Number of ticks to look into the past from the upper bound.
  public var historyPastTicks: Int64 {
    get {
      if case .historyPastTicks(let v)? = lowerBound {return v}
      return 0
    }
    set {lowerBound = .historyPastTicks(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specify the lower bound of per-node state history to retrieve.
  /// The service may not remember all the state you ask for. In this case, all of the state
  /// available between the specified bounds will be returned.
  /// This is optional -- if left unset, you will get exactly one set of per-node state.
  public enum OneOf_LowerBound: Equatable {
    /// Tick counter for the lower bound of per-node state to retrieve.
    case historyLowerTickBound(Int64)
    /// Number of ticks to look into the past from the upper bound.
    case historyPastTicks(Int64)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_Mission_GetStateRequest.OneOf_LowerBound, rhs: Bosdyn_Api_Mission_GetStateRequest.OneOf_LowerBound) -> Bool {
      switch (lhs, rhs) {
      case (.historyLowerTickBound(let l), .historyLowerTickBound(let r)): return l == r
      case (.historyPastTicks(let l), .historyPastTicks(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _historyUpperTickBound: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
}

/// Response to a GetStateRequest.
public struct Bosdyn_Api_Mission_GetStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The requested mission state.
  public var state: Bosdyn_Api_Mission_State {
    get {return _state ?? Bosdyn_Api_Mission_State()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _state: Bosdyn_Api_Mission_State? = nil
}

/// State of the mission service.
public struct Bosdyn_Api_Mission_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// What questions are outstanding?
  public var questions: [Bosdyn_Api_Mission_Question] = []

  /// History of questions that have been answered.
  /// The server will set some limit on the available history.
  public var answeredQuestions: [Bosdyn_Api_Mission_State.AnsweredQuestion] = []

  /// Node states ordered from newest to oldest.
  /// history[0] will always be the data from this tick.
  public var history: [Bosdyn_Api_Mission_State.NodeStatesAtTick] = []

  /// Current status of the mission.
  public var status: Bosdyn_Api_Mission_State.Status = .unknown

  /// Describes the unexpected error encountered by the mission service.
  /// Only filled out if STATUS_ERROR is set.
  public var error: String = String()

  /// The mission's tick counter when this state was generated.
  /// -1 indicates no mission has been started.
  public var tickCounter: Int64 = 0

  /// The mission's ID.
  /// -1 indicates no mission has been loaded.
  public var missionID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible overall status states of the mission.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid status, do not use.
    case unknown // = 0

    /// The mission has failed due to a node failure.
    case failure // = 1

    /// The mission is still running.
    case running // = 2

    /// The mission succeeded!
    case success // = 3

    /// Execution has been paused.
    case paused // = 4

    /// The mission service itself encountered an unexpected error, outside of a node failing.
    case error // = 5

    /// No mission has been loaded.
    case none // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .failure
      case 2: self = .running
      case 3: self = .success
      case 4: self = .paused
      case 5: self = .error
      case 6: self = .none
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .failure: return 1
      case .running: return 2
      case .success: return 3
      case .paused: return 4
      case .error: return 5
      case .none: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// A question that has been answered already.
  public struct AnsweredQuestion {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The question that this state information is related to.
    public var question: Bosdyn_Api_Mission_Question {
      get {return _question ?? Bosdyn_Api_Mission_Question()}
      set {_question = newValue}
    }
    /// Returns true if `question` has been explicitly set.
    public var hasQuestion: Bool {return self._question != nil}
    /// Clears the value of `question`. Subsequent reads from it will return its default value.
    public mutating func clearQuestion() {self._question = nil}

    /// The answer that was provided.
    public var acceptedAnswerCode: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _question: Bosdyn_Api_Mission_Question? = nil
  }

  public struct NodeStatesAtTick {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The tick counter when this state was produced.
    public var tickCounter: Int64 = 0

    /// Time at which this tick started, in host time basis.
    public var tickStartTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _tickStartTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_tickStartTimestamp = newValue}
    }
    /// Returns true if `tickStartTimestamp` has been explicitly set.
    public var hasTickStartTimestamp: Bool {return self._tickStartTimestamp != nil}
    /// Clears the value of `tickStartTimestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTickStartTimestamp() {self._tickStartTimestamp = nil}

    /// At this tick, the state of every node that was ticked, in the order they were ticked.
    public var nodeStates: [Bosdyn_Api_Mission_State.NodeStatesAtTick.NodeState] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct NodeState {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The result of this node's tick.
      public var result: Bosdyn_Api_Mission_Result = .unknown

      /// May be set when the 'result' is RESULT_FAILURE or RESULT_ERROR, this describes why
      /// the node failed. Not all nodes will have an error explaining why they failed.
      public var error: String = String()

      /// ID from NodeInfo.
      public var id: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _tickStartTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_State.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_State.Status] = [
    .unknown,
    .failure,
    .running,
    .success,
    .paused,
    .error,
    .none,
  ]
}

#endif  // swift(>=4.2)

/// A question posed by a Prompt node, or by the internal operation of another node.
public struct Bosdyn_Api_Mission_Question {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier of this question, unique across all missions executing on a single host.
  public var id: Int64 = 0

  /// What's asking the question. Should be unique in the active mission.
  public var source: String = String()

  /// The text of the question itself.
  public var text: String = String()

  /// Options to choose from.
  /// Uses the submessage from the "prompt" node message.
  public var options: [Bosdyn_Api_Mission_Prompt.Option] = []

  /// Set to true if this question was meant to be answered by some automated system, not a
  /// human. Clients should usually avoid generating a UI element to ask such a question.
  public var forAutonomousProcessing: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Answer one of the outstanding questions.
public struct Bosdyn_Api_Mission_AnswerQuestionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Identifier of the question being answered.
  public var questionID: Int64 = 0

  /// The answer_code from the Question, corresponding to the user's choice.
  public var code: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Response from the server after a client has answered one of its questions.
public struct Bosdyn_Api_Mission_AnswerQuestionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The result of the AnswerQuestionRequest.
  public var status: Bosdyn_Api_Mission_AnswerQuestionResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results for answering a question.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid; do not use.
    case unknown // = 0

    /// Answer accepted.
    case ok // = 1

    /// Question ID is not valid / unknown by the mission service.
    case invalidQuestionID // = 2

    /// Answer code is not applicable for the question indicated.
    case invalidCode // = 3

    /// Question was already answered.
    case alreadyAnswered // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidQuestionID
      case 3: self = .invalidCode
      case 4: self = .alreadyAnswered
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidQuestionID: return 2
      case .invalidCode: return 3
      case .alreadyAnswered: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_AnswerQuestionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_AnswerQuestionResponse.Status] = [
    .unknown,
    .ok,
    .invalidQuestionID,
    .invalidCode,
    .alreadyAnswered,
  ]
}

#endif  // swift(>=4.2)

/// Static information about the mission. Used to interpret the mission state.
public struct Bosdyn_Api_Mission_MissionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Mission ID assigned by the server.
  public var id: Int64 = 0

  /// The root node of the mission.
  public var root: Bosdyn_Api_Mission_NodeInfo {
    get {return _root ?? Bosdyn_Api_Mission_NodeInfo()}
    set {_root = newValue}
  }
  /// Returns true if `root` has been explicitly set.
  public var hasRoot: Bool {return self._root != nil}
  /// Clears the value of `root`. Subsequent reads from it will return its default value.
  public mutating func clearRoot() {self._root = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _root: Bosdyn_Api_Mission_NodeInfo? = nil
}

/// Provides children and metadata of a single node within the mission.
public struct Bosdyn_Api_Mission_NodeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique to each node within the LOADED mission.
  /// Not guaranteed to be consistent between loads of the same mission.
  /// Used to identify the nodes in the State message.
  public var id: Int64 = 0

  /// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
  public var name: String = String()

  /// Any UserData that was associated with this node.
  public var userData: Bosdyn_Api_Mission_UserData {
    get {return _userData ?? Bosdyn_Api_Mission_UserData()}
    set {_userData = newValue}
  }
  /// Returns true if `userData` has been explicitly set.
  public var hasUserData: Bool {return self._userData != nil}
  /// Clears the value of `userData`. Subsequent reads from it will return its default value.
  public mutating func clearUserData() {self._userData = nil}

  /// Info on all children of this node, if any are present.
  public var children: [Bosdyn_Api_Mission_NodeInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userData: Bosdyn_Api_Mission_UserData? = nil
}

/// General message describing a node that has failed, for example as part of a PlayMission or
/// LoadMission RPC.
public struct Bosdyn_Api_Mission_FailedNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
  public var name: String = String()

  /// The reason why this node failed. May not be provided by all nodes.
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A request to play the currently loaded mission for a fixed amount of time.
public struct Bosdyn_Api_Mission_PlayMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Run the mission until this time.
  /// Pause the mission at that time if we have not received a new PlayMissionRequest.
  /// This ensures the mission stops relatively quickly if there is an unexpected client drop-out.
  /// Clients should regularly send PlayMissionRequests with a pause_time that reflects how often
  /// they expect to check in with the mission service.
  public var pauseTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _pauseTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_pauseTime = newValue}
  }
  /// Returns true if `pauseTime` has been explicitly set.
  public var hasPauseTime: Bool {return self._pauseTime != nil}
  /// Clears the value of `pauseTime`. Subsequent reads from it will return its default value.
  public mutating func clearPauseTime() {self._pauseTime = nil}

  /// Leases that the mission will need, plus the lease on the mission service.
  public var leases: [Bosdyn_Api_Lease] = []

  /// Settings active until the next PlayMission or RestartMission request.
  public var settings: Bosdyn_Api_Mission_PlaySettings {
    get {return _settings ?? Bosdyn_Api_Mission_PlaySettings()}
    set {_settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return self._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {self._settings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _pauseTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _settings: Bosdyn_Api_Mission_PlaySettings? = nil
}

/// "Global" settings to use while a mission is running.
/// Some of these settings are not globally applicable. For example, the velocity_limit
/// does not change the speed at which the robot poses the body.
public struct Bosdyn_Api_Mission_PlaySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Velocity limits on the robot motion. Example use: limit velocity in "navigate to" nodes.
  public var velocityLimit: Bosdyn_Api_SE2VelocityLimit {
    get {return _velocityLimit ?? Bosdyn_Api_SE2VelocityLimit()}
    set {_velocityLimit = newValue}
  }
  /// Returns true if `velocityLimit` has been explicitly set.
  public var hasVelocityLimit: Bool {return self._velocityLimit != nil}
  /// Clears the value of `velocityLimit`. Subsequent reads from it will return its default value.
  public mutating func clearVelocityLimit() {self._velocityLimit = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _velocityLimit: Bosdyn_Api_SE2VelocityLimit? = nil
}

/// The PlayMission response message will return the status of the play mission request.
public struct Bosdyn_Api_Mission_PlayMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The result of the play request.
  public var status: Bosdyn_Api_Mission_PlayMissionResponse.Status = .unknown

  /// Results from any leases that may have been provided with the play request.
  public var leaseUseResults: [Bosdyn_Api_LeaseUseResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results for a play request.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid status, do not use.
    case unknown // = 0

    /// Mission is playing, or the mission has already completed.
    /// Use GetStateResponse to tell the difference.
    case ok // = 1

    /// Call LoadMission first.
    case noMission // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .noMission
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .noMission: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_PlayMissionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_PlayMissionResponse.Status] = [
    .unknown,
    .ok,
    .noMission,
  ]
}

#endif  // swift(>=4.2)

/// A request to restart the currently loaded mission.
public struct Bosdyn_Api_Mission_RestartMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Run the mission until this time.
  /// Pause the mission at that time if we have not received a new PlayMissionRequest.
  /// This ensures the mission stops relatively quickly if there is an unexpected client drop-out.
  /// Clients should regularly send PlayMissionRequests with a pause_time that reflects how often
  /// they expect to check in with the mission service.
  public var pauseTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _pauseTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_pauseTime = newValue}
  }
  /// Returns true if `pauseTime` has been explicitly set.
  public var hasPauseTime: Bool {return self._pauseTime != nil}
  /// Clears the value of `pauseTime`. Subsequent reads from it will return its default value.
  public mutating func clearPauseTime() {self._pauseTime = nil}

  /// Leases that the mission will need, plus the lease on the mission service.
  public var leases: [Bosdyn_Api_Lease] = []

  /// Settings active until the next PlayMission or RestartMission request.
  public var settings: Bosdyn_Api_Mission_PlaySettings {
    get {return _settings ?? Bosdyn_Api_Mission_PlaySettings()}
    set {_settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return self._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {self._settings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _pauseTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _settings: Bosdyn_Api_Mission_PlaySettings? = nil
}

/// The RestartMission response includes the status and any failed nodes for the request.
public struct Bosdyn_Api_Mission_RestartMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The result of the restart request.
  public var status: Bosdyn_Api_Mission_RestartMissionResponse.Status = .unknown

  /// Results from any leases that may have been used.
  /// As part of mission validation, some of the non-mission leases may have been used.
  public var leaseUseResults: [Bosdyn_Api_LeaseUseResult] = []

  /// If certain nodes failed validation, they will be reported back in this field.
  public var failedNodes: [Bosdyn_Api_Mission_FailedNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results of requesting a restart.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid status, do not use.
    case unknown // = 0

    /// Mission has restarted.
    case ok // = 1

    /// Call LoadMission first.
    case noMission // = 2

    /// Validation failed.
    case validateError // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .noMission
      case 3: self = .validateError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .noMission: return 2
      case .validateError: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_RestartMissionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_RestartMissionResponse.Status] = [
    .unknown,
    .ok,
    .noMission,
    .validateError,
  ]
}

#endif  // swift(>=4.2)

/// The LoadMission request specifies a root node for the mission that should be used.
public struct Bosdyn_Api_Mission_LoadMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Root node of the mission to load.
  public var root: Bosdyn_Api_Mission_Node {
    get {return _root ?? Bosdyn_Api_Mission_Node()}
    set {_root = newValue}
  }
  /// Returns true if `root` has been explicitly set.
  public var hasRoot: Bool {return self._root != nil}
  /// Clears the value of `root`. Subsequent reads from it will return its default value.
  public mutating func clearRoot() {self._root = nil}

  /// Leases that will be needed to validate the mission.
  public var leases: [Bosdyn_Api_Lease] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _root: Bosdyn_Api_Mission_Node? = nil
}

/// The LoadMission response returns the mission info generated by the service if successfully loaded, and
/// a status and other inforamtion if the request fails.
public struct Bosdyn_Api_Mission_LoadMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Result of loading the mission.
  public var status: Bosdyn_Api_Mission_LoadMissionResponse.Status = .unknown

  /// Results from any leases that may have been used.
  /// As part of mission validation, some of the non-mission leases may have been used.
  public var leaseUseResults: [Bosdyn_Api_LeaseUseResult] = []

  /// Provides the structure of the mission. Set when loading succeeds.
  public var missionInfo: Bosdyn_Api_Mission_MissionInfo {
    get {return _missionInfo ?? Bosdyn_Api_Mission_MissionInfo()}
    set {_missionInfo = newValue}
  }
  /// Returns true if `missionInfo` has been explicitly set.
  public var hasMissionInfo: Bool {return self._missionInfo != nil}
  /// Clears the value of `missionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearMissionInfo() {self._missionInfo = nil}

  /// If certain nodes failed compilation or validation, they will be reported back in this field.
  public var failedNodes: [Bosdyn_Api_Mission_FailedNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results of loading a mission.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid status, do not use.
    case unknown // = 0

    /// The mission was loaded successfully.
    case ok // = 1

    /// Load-time compilation failed. The mission was malformed.
    case compileError // = 2

    /// Load-time validation failed. Some part of the mission was unable to initialize.
    case validateError // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .compileError
      case 3: self = .validateError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .compileError: return 2
      case .validateError: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _missionInfo: Bosdyn_Api_Mission_MissionInfo? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_LoadMissionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_LoadMissionResponse.Status] = [
    .unknown,
    .ok,
    .compileError,
    .validateError,
  ]
}

#endif  // swift(>=4.2)

/// Request mission information.
/// This covers information that stays static until a new mission is loaded.
public struct Bosdyn_Api_Mission_GetInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Provides the currently loaded mission's information.
public struct Bosdyn_Api_Mission_GetInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Description of the loaded mission's structure.
  /// Unset if no mission has been successfully loaded.
  public var missionInfo: Bosdyn_Api_Mission_MissionInfo {
    get {return _missionInfo ?? Bosdyn_Api_Mission_MissionInfo()}
    set {_missionInfo = newValue}
  }
  /// Returns true if `missionInfo` has been explicitly set.
  public var hasMissionInfo: Bool {return self._missionInfo != nil}
  /// Clears the value of `missionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearMissionInfo() {self._missionInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _missionInfo: Bosdyn_Api_Mission_MissionInfo? = nil
}

/// The PauseMission request message will pause the mission that is currently executing, if there is one.
public struct Bosdyn_Api_Mission_PauseMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Lease on the mission service.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
}

/// The PauseMission response message will return the status of the request.
public struct Bosdyn_Api_Mission_PauseMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Result of the pause request.
  public var status: Bosdyn_Api_Mission_PauseMissionResponse.Status = .unknown

  /// Result of the lease in the pause request.
  public var leaseUseResult: Bosdyn_Api_LeaseUseResult {
    get {return _leaseUseResult ?? Bosdyn_Api_LeaseUseResult()}
    set {_leaseUseResult = newValue}
  }
  /// Returns true if `leaseUseResult` has been explicitly set.
  public var hasLeaseUseResult: Bool {return self._leaseUseResult != nil}
  /// Clears the value of `leaseUseResult`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseUseResult() {self._leaseUseResult = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible results of a pause request.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid status, do not use.
    case unknown // = 0

    /// Mission is paused or finished running.
    case ok // = 1

    /// No mission has started playing.
    /// NOT returned when two PauseMissionRequests are received back-to-back. In that case,
    /// you will get STATUS_OK.
    case noMissionPlaying // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .noMissionPlaying
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .noMissionPlaying: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _leaseUseResult: Bosdyn_Api_LeaseUseResult? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_PauseMissionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_PauseMissionResponse.Status] = [
    .unknown,
    .ok,
    .noMissionPlaying,
  ]
}

#endif  // swift(>=4.2)

/// For requesting the mission as it was loaded in LoadMission.
public struct Bosdyn_Api_Mission_GetMissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Responding with the mission as it was loaded in LoadMission.
public struct Bosdyn_Api_Mission_GetMissionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Root node of the mission loaded.
  /// Unset if no mission has been loaded.
  public var root: Bosdyn_Api_Mission_Node {
    get {return _root ?? Bosdyn_Api_Mission_Node()}
    set {_root = newValue}
  }
  /// Returns true if `root` has been explicitly set.
  public var hasRoot: Bool {return self._root != nil}
  /// Clears the value of `root`. Subsequent reads from it will return its default value.
  public mutating func clearRoot() {self._root = nil}

  /// Mission ID as reported in MissionInfo. -1 if no mission has been loaded.
  public var id: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _root: Bosdyn_Api_Mission_Node? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.mission"

extension Bosdyn_Api_Mission_GetStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "history_upper_tick_bound"),
    3: .standard(proto: "history_lower_tick_bound"),
    4: .standard(proto: "history_past_ticks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._historyUpperTickBound)
      case 3:
        if self.lowerBound != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.lowerBound = .historyLowerTickBound(v)}
      case 4:
        if self.lowerBound != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.lowerBound = .historyPastTicks(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._historyUpperTickBound {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    switch self.lowerBound {
    case .historyLowerTickBound(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    case .historyPastTicks(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetStateRequest, rhs: Bosdyn_Api_Mission_GetStateRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._historyUpperTickBound != rhs._historyUpperTickBound {return false}
    if lhs.lowerBound != rhs.lowerBound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_GetStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._state)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetStateResponse, rhs: Bosdyn_Api_Mission_GetStateResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".State"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "questions"),
    2: .standard(proto: "answered_questions"),
    3: .same(proto: "history"),
    4: .same(proto: "status"),
    5: .same(proto: "error"),
    6: .standard(proto: "tick_counter"),
    7: .standard(proto: "mission_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.questions)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.answeredQuestions)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.history)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      case 5: try decoder.decodeSingularStringField(value: &self.error)
      case 6: try decoder.decodeSingularInt64Field(value: &self.tickCounter)
      case 7: try decoder.decodeSingularInt64Field(value: &self.missionID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.questions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.questions, fieldNumber: 1)
    }
    if !self.answeredQuestions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.answeredQuestions, fieldNumber: 2)
    }
    if !self.history.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.history, fieldNumber: 3)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 5)
    }
    if self.tickCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.tickCounter, fieldNumber: 6)
    }
    if self.missionID != 0 {
      try visitor.visitSingularInt64Field(value: self.missionID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_State, rhs: Bosdyn_Api_Mission_State) -> Bool {
    if lhs.questions != rhs.questions {return false}
    if lhs.answeredQuestions != rhs.answeredQuestions {return false}
    if lhs.history != rhs.history {return false}
    if lhs.status != rhs.status {return false}
    if lhs.error != rhs.error {return false}
    if lhs.tickCounter != rhs.tickCounter {return false}
    if lhs.missionID != rhs.missionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_State.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_FAILURE"),
    2: .same(proto: "STATUS_RUNNING"),
    3: .same(proto: "STATUS_SUCCESS"),
    4: .same(proto: "STATUS_PAUSED"),
    5: .same(proto: "STATUS_ERROR"),
    6: .same(proto: "STATUS_NONE"),
  ]
}

extension Bosdyn_Api_Mission_State.AnsweredQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_State.protoMessageName + ".AnsweredQuestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "question"),
    2: .standard(proto: "accepted_answer_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._question)
      case 2: try decoder.decodeSingularInt64Field(value: &self.acceptedAnswerCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._question {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.acceptedAnswerCode != 0 {
      try visitor.visitSingularInt64Field(value: self.acceptedAnswerCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_State.AnsweredQuestion, rhs: Bosdyn_Api_Mission_State.AnsweredQuestion) -> Bool {
    if lhs._question != rhs._question {return false}
    if lhs.acceptedAnswerCode != rhs.acceptedAnswerCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_State.NodeStatesAtTick: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_State.protoMessageName + ".NodeStatesAtTick"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tick_counter"),
    2: .standard(proto: "tick_start_timestamp"),
    3: .standard(proto: "node_states"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.tickCounter)
      case 2: try decoder.decodeSingularMessageField(value: &self._tickStartTimestamp)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.nodeStates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tickCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.tickCounter, fieldNumber: 1)
    }
    if let v = self._tickStartTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nodeStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeStates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_State.NodeStatesAtTick, rhs: Bosdyn_Api_Mission_State.NodeStatesAtTick) -> Bool {
    if lhs.tickCounter != rhs.tickCounter {return false}
    if lhs._tickStartTimestamp != rhs._tickStartTimestamp {return false}
    if lhs.nodeStates != rhs.nodeStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_State.NodeStatesAtTick.NodeState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_State.NodeStatesAtTick.protoMessageName + ".NodeState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "error"),
    3: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      case 3: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_State.NodeStatesAtTick.NodeState, rhs: Bosdyn_Api_Mission_State.NodeStatesAtTick.NodeState) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.error != rhs.error {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Question: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Question"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "source"),
    3: .same(proto: "text"),
    4: .same(proto: "options"),
    5: .standard(proto: "for_autonomous_processing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.source)
      case 3: try decoder.decodeSingularStringField(value: &self.text)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.options)
      case 5: try decoder.decodeSingularBoolField(value: &self.forAutonomousProcessing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if self.forAutonomousProcessing != false {
      try visitor.visitSingularBoolField(value: self.forAutonomousProcessing, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Question, rhs: Bosdyn_Api_Mission_Question) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.source != rhs.source {return false}
    if lhs.text != rhs.text {return false}
    if lhs.options != rhs.options {return false}
    if lhs.forAutonomousProcessing != rhs.forAutonomousProcessing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_AnswerQuestionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnswerQuestionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "question_id"),
    3: .same(proto: "code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularInt64Field(value: &self.questionID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.code)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.questionID != 0 {
      try visitor.visitSingularInt64Field(value: self.questionID, fieldNumber: 2)
    }
    if self.code != 0 {
      try visitor.visitSingularInt64Field(value: self.code, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_AnswerQuestionRequest, rhs: Bosdyn_Api_Mission_AnswerQuestionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.questionID != rhs.questionID {return false}
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_AnswerQuestionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnswerQuestionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_AnswerQuestionResponse, rhs: Bosdyn_Api_Mission_AnswerQuestionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_AnswerQuestionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_QUESTION_ID"),
    3: .same(proto: "STATUS_INVALID_CODE"),
    4: .same(proto: "STATUS_ALREADY_ANSWERED"),
  ]
}

extension Bosdyn_Api_Mission_MissionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MissionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "root"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularMessageField(value: &self._root)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if let v = self._root {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_MissionInfo, rhs: Bosdyn_Api_Mission_MissionInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._root != rhs._root {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_NodeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "user_data"),
    4: .same(proto: "children"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularMessageField(value: &self._userData)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._userData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_NodeInfo, rhs: Bosdyn_Api_Mission_NodeInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._userData != rhs._userData {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_FailedNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FailedNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_FailedNode, rhs: Bosdyn_Api_Mission_FailedNode) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PlayMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayMissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    3: .standard(proto: "pause_time"),
    4: .same(proto: "leases"),
    5: .same(proto: "settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 3: try decoder.decodeSingularMessageField(value: &self._pauseTime)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.leases)
      case 5: try decoder.decodeSingularMessageField(value: &self._settings)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pauseTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.leases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leases, fieldNumber: 4)
    }
    if let v = self._settings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_PlayMissionRequest, rhs: Bosdyn_Api_Mission_PlayMissionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._pauseTime != rhs._pauseTime {return false}
    if lhs.leases != rhs.leases {return false}
    if lhs._settings != rhs._settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PlaySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlaySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "velocity_limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._velocityLimit)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._velocityLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_PlaySettings, rhs: Bosdyn_Api_Mission_PlaySettings) -> Bool {
    if lhs._velocityLimit != rhs._velocityLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PlayMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayMissionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "lease_use_results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leaseUseResults)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.leaseUseResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leaseUseResults, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_PlayMissionResponse, rhs: Bosdyn_Api_Mission_PlayMissionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.leaseUseResults != rhs.leaseUseResults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PlayMissionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_NO_MISSION"),
  ]
}

extension Bosdyn_Api_Mission_RestartMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestartMissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "pause_time"),
    3: .same(proto: "leases"),
    4: .same(proto: "settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._pauseTime)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leases)
      case 4: try decoder.decodeSingularMessageField(value: &self._settings)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pauseTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.leases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leases, fieldNumber: 3)
    }
    if let v = self._settings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_RestartMissionRequest, rhs: Bosdyn_Api_Mission_RestartMissionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._pauseTime != rhs._pauseTime {return false}
    if lhs.leases != rhs.leases {return false}
    if lhs._settings != rhs._settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_RestartMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RestartMissionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "lease_use_results"),
    4: .standard(proto: "failed_nodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leaseUseResults)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.failedNodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.leaseUseResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leaseUseResults, fieldNumber: 3)
    }
    if !self.failedNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.failedNodes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_RestartMissionResponse, rhs: Bosdyn_Api_Mission_RestartMissionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.leaseUseResults != rhs.leaseUseResults {return false}
    if lhs.failedNodes != rhs.failedNodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_RestartMissionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_NO_MISSION"),
    3: .same(proto: "STATUS_VALIDATE_ERROR"),
  ]
}

extension Bosdyn_Api_Mission_LoadMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadMissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "root"),
    3: .same(proto: "leases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._root)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leases)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._root {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.leases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leases, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_LoadMissionRequest, rhs: Bosdyn_Api_Mission_LoadMissionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._root != rhs._root {return false}
    if lhs.leases != rhs.leases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_LoadMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadMissionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "lease_use_results"),
    4: .standard(proto: "mission_info"),
    5: .standard(proto: "failed_nodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.leaseUseResults)
      case 4: try decoder.decodeSingularMessageField(value: &self._missionInfo)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.failedNodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.leaseUseResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.leaseUseResults, fieldNumber: 3)
    }
    if let v = self._missionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.failedNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.failedNodes, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_LoadMissionResponse, rhs: Bosdyn_Api_Mission_LoadMissionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.leaseUseResults != rhs.leaseUseResults {return false}
    if lhs._missionInfo != rhs._missionInfo {return false}
    if lhs.failedNodes != rhs.failedNodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_LoadMissionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_COMPILE_ERROR"),
    3: .same(proto: "STATUS_VALIDATE_ERROR"),
  ]
}

extension Bosdyn_Api_Mission_GetInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetInfoRequest, rhs: Bosdyn_Api_Mission_GetInfoRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_GetInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "mission_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._missionInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._missionInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetInfoResponse, rhs: Bosdyn_Api_Mission_GetInfoResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._missionInfo != rhs._missionInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PauseMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PauseMissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_PauseMissionRequest, rhs: Bosdyn_Api_Mission_PauseMissionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PauseMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PauseMissionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "lease_use_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._leaseUseResult)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._leaseUseResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_PauseMissionResponse, rhs: Bosdyn_Api_Mission_PauseMissionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs._leaseUseResult != rhs._leaseUseResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_PauseMissionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_NO_MISSION_PLAYING"),
  ]
}

extension Bosdyn_Api_Mission_GetMissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetMissionRequest, rhs: Bosdyn_Api_Mission_GetMissionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_GetMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMissionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "root"),
    3: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._root)
      case 3: try decoder.decodeSingularInt64Field(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._root {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_GetMissionResponse, rhs: Bosdyn_Api_Mission_GetMissionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._root != rhs._root {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
