// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/mission/nodes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Wrapper for a mission node. Contains the basics common to all mission nodes.
/// Specifics of what the node does are contained in the "impl" field.
public struct Bosdyn_Api_Mission_Node {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
  public var name: String = String()

  /// Collection of user data associated with this node.
  public var userData: Bosdyn_Api_Mission_UserData {
    get {return _userData ?? Bosdyn_Api_Mission_UserData()}
    set {_userData = newValue}
  }
  /// Returns true if `userData` has been explicitly set.
  public var hasUserData: Bool {return self._userData != nil}
  /// Clears the value of `userData`. Subsequent reads from it will return its default value.
  public mutating func clearUserData() {self._userData = nil}

  /// Reference identifier of this node.
  /// Set iff another node references this one.
  public var referenceID: String = String()

  public var type: Bosdyn_Api_Mission_Node.OneOf_Type? = nil

  /// Implementation of this node. For example, this may be a Sequence.
  public var impl: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .impl(let v)? = type {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {type = .impl(newValue)}
  }

  /// Unique identifier of another node. If this is filled out, rather than the "impl", then
  /// the referenced node will be used in place of this one.
  public var nodeReference: String {
    get {
      if case .nodeReference(let v)? = type {return v}
      return String()
    }
    set {type = .nodeReference(newValue)}
  }

  /// Defines parameters, used by this node or its children.
  /// The "key" in KeyValue is the name of the parameter being defined.
  /// The value can be a constant or another parameter value.
  public var parameterValues: [Bosdyn_Api_Mission_KeyValue] = []

  /// Overwrites a protobuf field in this node's implementation.
  /// The "key" in KeyValue is the name of the field to override.
  /// The value to write can be sourced from a constant, or a parameter value.
  public var overrides: [Bosdyn_Api_Mission_KeyValue] = []

  /// Declares parameters needed at compile time by this node, or children of this node.
  /// This is a way for a node to communicate what parameters its implementation and/or children
  /// require, without unpacking the entire subtree.
  public var parameters: [Bosdyn_Api_Mission_VariableDeclaration] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    /// Implementation of this node. For example, this may be a Sequence.
    case impl(SwiftProtobuf.Google_Protobuf_Any)
    /// Unique identifier of another node. If this is filled out, rather than the "impl", then
    /// the referenced node will be used in place of this one.
    case nodeReference(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_Mission_Node.OneOf_Type, rhs: Bosdyn_Api_Mission_Node.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.impl(let l), .impl(let r)): return l == r
      case (.nodeReference(let l), .nodeReference(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _userData: Bosdyn_Api_Mission_UserData? = nil
}

/// Run  all children in order until a child fails.
public struct Bosdyn_Api_Mission_Sequence {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Forces the execution to always begin with the first child.  If false, and
  /// the Sequence ran last tick, it will continue with the node it was ticking.
  public var alwaysRestart: Bool = false

  /// List of all children to iterate through.
  public var children: [Bosdyn_Api_Mission_Node] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Run all children in order until a child succeeds.
public struct Bosdyn_Api_Mission_Selector {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Forces the execution to always begin with the first child.  If false, and
  /// the Selector ran last tick, it will continue with the node it was ticking.
  public var alwaysRestart: Bool = false

  /// List of all children to iterate through.
  public var children: [Bosdyn_Api_Mission_Node] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Repeat a child node.
public struct Bosdyn_Api_Mission_Repeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Start the child node exactly this many times.
  /// Note that a value of 1 makes the Repeat node a no-op.
  public var maxStarts: Int32 = 0

  /// Child to repeat max_starts times.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// If set, the node will write the start index to the blackboard.
  public var startCounterStateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Retry a child node until it succeeds, or exceeds a number of attempts.
public struct Bosdyn_Api_Mission_Retry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Only allow this many attempts. Note that a value of 1 makes this Retry node a no-op.
  public var maxAttempts: Int32 = 0

  /// Child to retry up to max_attempts.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// If set, the node will write the attempt index to the blackboard.
  public var attemptCounterStateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Run this child for a maximum amount of mission execution time.
/// Will exit with child's status if the child finishes early,
/// FAILURE if the child remains in RUNNING state for too long.
public struct Bosdyn_Api_Mission_ForDuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maximum duration of mission execution time.
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  /// Child to execute for the duration.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Run two child nodes together, returning the primary child's result when it completes.
public struct Bosdyn_Api_Mission_SimpleParallel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Primary node, whose completion will end the execution of SimpleParallel.
  public var primary: Bosdyn_Api_Mission_Node {
    get {return _primary ?? Bosdyn_Api_Mission_Node()}
    set {_primary = newValue}
  }
  /// Returns true if `primary` has been explicitly set.
  public var hasPrimary: Bool {return self._primary != nil}
  /// Clears the value of `primary`. Subsequent reads from it will return its default value.
  public mutating func clearPrimary() {self._primary = nil}

  /// Secondary node, which will be ticked as long as the primary is still running.
  public var secondary: Bosdyn_Api_Mission_Node {
    get {return _secondary ?? Bosdyn_Api_Mission_Node()}
    set {_secondary = newValue}
  }
  /// Returns true if `secondary` has been explicitly set.
  public var hasSecondary: Bool {return self._secondary != nil}
  /// Clears the value of `secondary`. Subsequent reads from it will return its default value.
  public mutating func clearSecondary() {self._secondary = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _primary: Bosdyn_Api_Mission_Node? = nil
  fileprivate var _secondary: Bosdyn_Api_Mission_Node? = nil
}

/// Checks a simple comparison statement.
public struct Bosdyn_Api_Mission_Condition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Left-hand side of the comparison.
  public var lhs: Bosdyn_Api_Mission_Condition.Operand {
    get {return _lhs ?? Bosdyn_Api_Mission_Condition.Operand()}
    set {_lhs = newValue}
  }
  /// Returns true if `lhs` has been explicitly set.
  public var hasLhs: Bool {return self._lhs != nil}
  /// Clears the value of `lhs`. Subsequent reads from it will return its default value.
  public mutating func clearLhs() {self._lhs = nil}

  /// Right-hand side of the comparison.
  public var rhs: Bosdyn_Api_Mission_Condition.Operand {
    get {return _rhs ?? Bosdyn_Api_Mission_Condition.Operand()}
    set {_rhs = newValue}
  }
  /// Returns true if `rhs` has been explicitly set.
  public var hasRhs: Bool {return self._rhs != nil}
  /// Clears the value of `rhs`. Subsequent reads from it will return its default value.
  public mutating func clearRhs() {self._rhs = nil}

  /// Comparison operator to compare lhs and rhs.
  public var operation: Bosdyn_Api_Mission_Condition.Compare = .unknown

  public var handleStaleness: Bosdyn_Api_Mission_Condition.HandleStaleness = .handleStaleUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Comparison operator.
  public enum Compare: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid, do not use.
    case unknown // = 0

    /// Equal.
    case eq // = 1

    /// Not equal.
    case ne // = 2

    /// Less than.
    case lt // = 3

    /// Greater than.
    case gt // = 4

    /// Less than or equal.
    case le // = 5

    /// Greater than or equal.
    case ge // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .eq
      case 2: self = .ne
      case 3: self = .lt
      case 4: self = .gt
      case 5: self = .le
      case 6: self = .ge
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .eq: return 1
      case .ne: return 2
      case .lt: return 3
      case .gt: return 4
      case .le: return 5
      case .ge: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// When comparing runtime values in the blackboard, some values might be "stale" (i.e too old).
  /// This defines how the comparator should behave when a read value is stale.
  public enum HandleStaleness: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// acts like READ_ANYWAY for backwards compatibility.
    case handleStaleUnknown // = 0

    /// ignore how stale this data is.
    case handleStaleReadAnyway // = 1

    /// return the RUNNING status until the data being read is not stale.
    case handleStaleRunUntilFresh // = 2

    /// return FAILURE status if stale data is read.
    case handleStaleFail // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .handleStaleUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .handleStaleUnknown
      case 1: self = .handleStaleReadAnyway
      case 2: self = .handleStaleRunUntilFresh
      case 3: self = .handleStaleFail
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .handleStaleUnknown: return 0
      case .handleStaleReadAnyway: return 1
      case .handleStaleRunUntilFresh: return 2
      case .handleStaleFail: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Options for where to retrieve values from.
  public struct Operand {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: Bosdyn_Api_Mission_Condition.Operand.OneOf_Type? = nil

    /// Reference an existing variable.
    public var `var`: Bosdyn_Api_Mission_VariableDeclaration {
      get {
        if case .var(let v)? = type {return v}
        return Bosdyn_Api_Mission_VariableDeclaration()
      }
      set {type = .var(newValue)}
    }

    /// Use a constant value.
    public var const: Bosdyn_Api_Mission_ConstantValue {
      get {
        if case .const(let v)? = type {return v}
        return Bosdyn_Api_Mission_ConstantValue()
      }
      set {type = .const(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Type: Equatable {
      /// Reference an existing variable.
      case `var`(Bosdyn_Api_Mission_VariableDeclaration)
      /// Use a constant value.
      case const(Bosdyn_Api_Mission_ConstantValue)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_Mission_Condition.Operand.OneOf_Type, rhs: Bosdyn_Api_Mission_Condition.Operand.OneOf_Type) -> Bool {
        switch (lhs, rhs) {
        case (.var(let l), .var(let r)): return l == r
        case (.const(let l), .const(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}

  fileprivate var _lhs: Bosdyn_Api_Mission_Condition.Operand? = nil
  fileprivate var _rhs: Bosdyn_Api_Mission_Condition.Operand? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_Condition.Compare: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_Condition.Compare] = [
    .unknown,
    .eq,
    .ne,
    .lt,
    .gt,
    .le,
    .ge,
  ]
}

extension Bosdyn_Api_Mission_Condition.HandleStaleness: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_Condition.HandleStaleness] = [
    .handleStaleUnknown,
    .handleStaleReadAnyway,
    .handleStaleRunUntilFresh,
    .handleStaleFail,
  ]
}

#endif  // swift(>=4.2)

/// Get state from the robot.
public struct Bosdyn_Api_Mission_BosdynRobotState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// Child node. Children will have access to the state gathered by this node.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// Name of the bosdyn.api.RobotState object in the blackboard. For example, if this is set to
  /// "robot", children can look up "robot.power_state.motor_power_state" in the blackboard.
  public var stateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Get the state of the docking service from the robot.
public struct Bosdyn_Api_Mission_BosdynDockState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// Child node. Children will have access to the state gathered by this node.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// Name of the bosdyn.api.DockState object in the blackboard. For example, if this is set to
  /// "power_status", children can look up "power_status" in the blackboard.
  public var stateName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Execute a RobotCommand.
/// These nodes will "succeed" once a feedback response is received indicating success. Any commands
/// that require an "end time" will have that information set based on the end time of the mission.
public struct Bosdyn_Api_Mission_BosdynRobotCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the directory is running on.
  public var host: String = String()

  /// The command to execute. See the RobotCommand documentation for details.
  public var command: Bosdyn_Api_RobotCommand {
    get {return _command ?? Bosdyn_Api_RobotCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  public var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  public mutating func clearCommand() {self._command = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _command: Bosdyn_Api_RobotCommand? = nil
}

/// Make a robot power request
public struct Bosdyn_Api_Mission_BosdynPowerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// The request to make. See the PowerCommandRequest documentation for details.
  public var request: Bosdyn_Api_PowerCommandRequest.Request = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Tell the robot to navigate to a waypoint.
public struct Bosdyn_Api_Mission_BosdynNavigateTo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// ID of the waypoint to go to.
  public var destinationWaypointID: String = String()

  /// Preferences on how to pick the route.
  public var routeGenParams: Bosdyn_Api_GraphNav_RouteGenParams {
    get {return _routeGenParams ?? Bosdyn_Api_GraphNav_RouteGenParams()}
    set {_routeGenParams = newValue}
  }
  /// Returns true if `routeGenParams` has been explicitly set.
  public var hasRouteGenParams: Bool {return self._routeGenParams != nil}
  /// Clears the value of `routeGenParams`. Subsequent reads from it will return its default value.
  public mutating func clearRouteGenParams() {self._routeGenParams = nil}

  /// Parameters that define how to traverse and end the route.
  public var travelParams: Bosdyn_Api_GraphNav_TravelParams {
    get {return _travelParams ?? Bosdyn_Api_GraphNav_TravelParams()}
    set {_travelParams = newValue}
  }
  /// Returns true if `travelParams` has been explicitly set.
  public var hasTravelParams: Bool {return self._travelParams != nil}
  /// Clears the value of `travelParams`. Subsequent reads from it will return its default value.
  public mutating func clearTravelParams() {self._travelParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _routeGenParams: Bosdyn_Api_GraphNav_RouteGenParams? = nil
  fileprivate var _travelParams: Bosdyn_Api_GraphNav_TravelParams? = nil
}

/// Get GraphNav state from the robot and save it to the blackboard.
public struct Bosdyn_Api_Mission_BosdynGraphNavState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// Child node. Children will have access to the state gathered by this node.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// Name of the bosdyn.api.GetLocalizationStateResponse object in the blackboard. For example,
  /// if this is set to "nav", children can look up "nav.localization.waypoint_id" in the
  /// blackboard to get the waypoint the robot is localized to.
  public var stateName: String = String()

  /// Id of the waypoint that we want the localization to be relative to.
  /// If this is empty, the localization will be relative to the waypoint that the
  /// robot is currently localized to.
  public var waypointID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Tell GraphNav to re-localize the robot using a SetLocalizationRequest. This overrides whatever
/// the current localization is. This can be useful to reinitialize the system at a known state.
public struct Bosdyn_Api_Mission_BosdynGraphNavLocalize {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine the service is running on.
  public var host: String = String()

  /// If no localization_request is provided, the default options used
  /// are FIDUCIAL_INIT_NEAREST (the system will initialize to the nearest fiducial).
  /// Otherwise, the options inside the set_localization_request will be used.
  /// Note that ko_tform_body in the request will be ignored (it will be recalculated at runtime).
  public var localizationRequest: Bosdyn_Api_GraphNav_SetLocalizationRequest {
    get {return _localizationRequest ?? Bosdyn_Api_GraphNav_SetLocalizationRequest()}
    set {_localizationRequest = newValue}
  }
  /// Returns true if `localizationRequest` has been explicitly set.
  public var hasLocalizationRequest: Bool {return self._localizationRequest != nil}
  /// Clears the value of `localizationRequest`. Subsequent reads from it will return its default value.
  public mutating func clearLocalizationRequest() {self._localizationRequest = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _localizationRequest: Bosdyn_Api_GraphNav_SetLocalizationRequest? = nil
}

/// Call out to another system using the RemoteMission service.
public struct Bosdyn_Api_Mission_RemoteGrpc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Host that is running the directory server. Usually, this is just the robot.
  public var host: String = String()

  /// Name of the service in the directory.
  public var serviceName: String = String()

  /// Timeout of any single RPC. If the timeout is exceeded, the RPC will fail. The mission service
  /// treats each failed RPC differently:
  /// - EstablishSession: An error is returned in LoadMission.
  /// - Tick: The RPC is retried.
  /// - Stop: The error is ignored, and the RPC is not retried.
  /// Omit for a default of 60 seconds.
  public var timeout: Float = 0

  /// Resources that we will need leases on.
  public var leaseResources: [String] = []

  /// The list of variables the remote host should receive.
  /// Variables given can be available at either run-time or compile-time.
  /// The "key" in KeyValue is the name of the variable as used by the remote system.
  public var inputs: [Bosdyn_Api_Mission_KeyValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// When started, begins a sleep timer for X seconds. Returns "success" after the timer elapses,
/// "running" otherwise.
public struct Bosdyn_Api_Mission_Sleep {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Number of seconds to sleep for.
  public var seconds: Float = 0

  /// If this node is stopped, should it restart the timer?
  public var restartAfterStop: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Prompt the world at large to answer a question.
/// This node represents a request for information from ANY listeners that may be out there.
public struct Bosdyn_Api_Mission_Prompt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Should we always re-prompt when this node is started?
  /// If false, this node will only ever prompt if it is started and its question is unanswered.
  /// This may be used, for example, to ask the user to check the robot after any self-right.
  /// If true, this node will prompt whenever it is started.
  /// This may be used, for example, to tell the user to perform some one-time action, like open a
  /// door for the robot.
  public var alwaysReprompt: Bool = false

  /// The text of the question itself.
  public var text: String = String()

  /// Metadata describing the source of the question.
  /// The answer will be written into the state blackboard with this as the variable name.
  public var source: String = String()

  /// The set of options that can be chosen for this prompt.
  public var options: [Bosdyn_Api_Mission_Prompt.Option] = []

  /// Child node, run after the prompt has been responded to.
  /// Children will have access to the answer code provided by the response.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// Hint that Question posed by this Prompt is meant to be answered by some automated system.
  /// See the Question message for details.
  public var forAutonomousProcessing: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Data about the options to choose from.
  public struct Option {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Text associated with this option. Should be displayed to the user.
    public var text: String = String()

    /// Numeric code corresponding to this option. Passed as part of the answer.
    public var answerCode: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Point the PTZ to a specified orientation
public struct Bosdyn_Api_Mission_SpotCamPtz {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine of the directory server that the Spot CAM registered with.
  public var host: String = String()

  /// The rest of the fields are from bosdyn.api.spot_cam.ptz.SetPtzPositionRequest, see that
  /// message for details.
  public var ptzPosition: Bosdyn_Api_SpotCam_PtzPosition {
    get {return _ptzPosition ?? Bosdyn_Api_SpotCam_PtzPosition()}
    set {_ptzPosition = newValue}
  }
  /// Returns true if `ptzPosition` has been explicitly set.
  public var hasPtzPosition: Bool {return self._ptzPosition != nil}
  /// Clears the value of `ptzPosition`. Subsequent reads from it will return its default value.
  public mutating func clearPtzPosition() {self._ptzPosition = nil}

  /// Setting adjust_parameters will enable auto-adjusting the PTZ pan and tilt at playback time,
  /// based on where the robot is, relative to the waypoint. Leave empty to disable auto-adjust
  /// features.
  public var adjustParameters: Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters {
    get {return _adjustParameters ?? Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters()}
    set {_adjustParameters = newValue}
  }
  /// Returns true if `adjustParameters` has been explicitly set.
  public var hasAdjustParameters: Bool {return self._adjustParameters != nil}
  /// Clears the value of `adjustParameters`. Subsequent reads from it will return its default value.
  public mutating func clearAdjustParameters() {self._adjustParameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct AdjustParameters {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Variable name to retrieve the graph nav state from.
    public var localizationVarname: String = String()

    /// Waypoint ID where this PTZ configuration was originally set up.
    public var waypointID: String = String()

    /// Pose of body in waypoint frame at the time this PTZ configuration was originally set up.
    public var waypointTformBody: Bosdyn_Api_SE3Pose {
      get {return _waypointTformBody ?? Bosdyn_Api_SE3Pose()}
      set {_waypointTformBody = newValue}
    }
    /// Returns true if `waypointTformBody` has been explicitly set.
    public var hasWaypointTformBody: Bool {return self._waypointTformBody != nil}
    /// Clears the value of `waypointTformBody`. Subsequent reads from it will return its default value.
    public mutating func clearWaypointTformBody() {self._waypointTformBody = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _waypointTformBody: Bosdyn_Api_SE3Pose? = nil
  }

  public init() {}

  fileprivate var _ptzPosition: Bosdyn_Api_SpotCam_PtzPosition? = nil
  fileprivate var _adjustParameters: Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters? = nil
}

/// Store media using the Spot CAM.
public struct Bosdyn_Api_Mission_SpotCamStoreMedia {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine of the directory server that the Spot CAM registered with.
  public var host: String = String()

  /// The rest of the fields are from bosdyn.api.spot_cam.logging.StoreRequest, see that message for
  /// details.
  public var camera: Bosdyn_Api_SpotCam_Camera {
    get {return _camera ?? Bosdyn_Api_SpotCam_Camera()}
    set {_camera = newValue}
  }
  /// Returns true if `camera` has been explicitly set.
  public var hasCamera: Bool {return self._camera != nil}
  /// Clears the value of `camera`. Subsequent reads from it will return its default value.
  public mutating func clearCamera() {self._camera = nil}

  /// What type of media should be stored from this action.
  public var type: Bosdyn_Api_SpotCam_Logpoint.RecordType = .stillimage

  /// Extra metadata to store alongside the captured media.
  public var tag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _camera: Bosdyn_Api_SpotCam_Camera? = nil
}

public struct Bosdyn_Api_Mission_Dock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine of the directory server that the docking service is registered with.
  public var host: String = String()

  /// ID of docking station to dock at.
  public var dockingStationID: UInt32 = 0

  /// Optional child node. Children will have access to the status variables gathered by this node.
  /// If specified, child node will determine success/failure of this node.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  /// Name of the command status variable in the blackboard.  This is the status of the docking
  /// command request made to the robot.  Please refer to
  /// bosdyn.api.docking.DockingCommandResponse.Status for more details.  Children can use this
  /// name to look up docking command status in the blackboard. If no name is provided, status will
  /// not be available.
  public var commandStatusName: String = String()

  /// Name of the feedback status variable in the blackboard.  This is the feedback provided while
  /// docking is in progress.  Please refer to bosdyn.api.docking.DockingCommandFeedbackResponse.Status
  /// for a list of possible status values.  Children can use this name to look up docking status
  /// in the blackboard. If no name is provided, status will not be available.
  public var feedbackStatusName: String = String()

  /// Defines how we use the "pre-docking" behavior.
  public var prepPoseBehavior: Bosdyn_Api_Docking_PrepPoseBehavior = .prepPoseUnknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Trigger the acquisition and storage of data.
public struct Bosdyn_Api_Mission_DataAcquisition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service to use.
  public var serviceName: String = String()

  /// Host machine of the directory server that the data acquisition service is registered with.
  public var host: String = String()

  /// Specification of the data and metadata to store.
  public var request: Bosdyn_Api_AcquireDataRequest {
    get {return _request ?? Bosdyn_Api_AcquireDataRequest()}
    set {_request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  public var hasRequest: Bool {return self._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  public mutating func clearRequest() {self._request = nil}

  public var completionBehavior: Bosdyn_Api_Mission_DataAcquisition.CompletionBehavior = .completeUnknown

  /// Define a format string that will be used together with the blackboard to generate
  /// a group name.  Values from the blackboard will replace the keys in braces {}.
  /// Example: "telop-{date}", where "date" is a blackboard variable.
  /// Example: "{date}_loop_{loop_counter}", where "loop_counter" is a blackboard variable from a Repeat.
  public var groupNameFormat: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum CompletionBehavior: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case completeUnknown // = 0

    /// Node is complete after all data has been saved.
    case completeAfterSaved // = 1

    /// Node is complete after all data is acquired, but before processing and storage.
    /// This allows the robot to continue on with the mission sooner, but
    /// it will be unaware of failures in processing or storage.
    case completeAfterAcquired // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .completeUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .completeUnknown
      case 1: self = .completeAfterSaved
      case 2: self = .completeAfterAcquired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .completeUnknown: return 0
      case .completeAfterSaved: return 1
      case .completeAfterAcquired: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _request: Bosdyn_Api_AcquireDataRequest? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Mission_DataAcquisition.CompletionBehavior: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Mission_DataAcquisition.CompletionBehavior] = [
    .completeUnknown,
    .completeAfterSaved,
    .completeAfterAcquired,
  ]
}

#endif  // swift(>=4.2)

/// Defines new blackboard variables within the scope of the child. Shadows blackboard
/// variables in the parent scope.
public struct Bosdyn_Api_Mission_DefineBlackboard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The list of variables that should be defined for this subtree,
  /// with initial values.
  public var blackboardVariables: [Bosdyn_Api_Mission_KeyValue] = []

  /// The blackboard variables will only persist in the subtree defined by this
  /// child node. The child's tick() will be called on the child until it
  /// returns either SUCCESS or FAILURE.
  public var child: Bosdyn_Api_Mission_Node {
    get {return _child ?? Bosdyn_Api_Mission_Node()}
    set {_child = newValue}
  }
  /// Returns true if `child` has been explicitly set.
  public var hasChild: Bool {return self._child != nil}
  /// Clears the value of `child`. Subsequent reads from it will return its default value.
  public mutating func clearChild() {self._child = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _child: Bosdyn_Api_Mission_Node? = nil
}

/// Sets existing blackboard variables within this scope to specific values, returning SUCCESS.
public struct Bosdyn_Api_Mission_SetBlackboard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key of the KeyValue is the name of the blackboard variable.
  /// The value will be dereferenced and converted into a value type at runtime
  /// inside this node's tick function. For example, if the value is a runtime
  /// variable, that variable will be evaluated at tick time, and then stored into
  /// the blackboard. If the value is another blackboard variable, that blackboard
  /// variable's value will be copied into the variable specified by the key.
  public var blackboardVariables: [Bosdyn_Api_Mission_KeyValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Sets a blackboard variable to a formatted string, reading from other blackboard vars.
public struct Bosdyn_Api_Mission_FormatBlackboard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key of the variable that will be written.
  public var key: String = String()

  /// Define a format string that will be used together with the blackboard to generate
  /// string value.  Values from the blackboard will replace the keys in braces {}.
  /// Example: "telop-{date}", where "date" is a blackboard variable.
  /// Example: "{date}_loop_{loop_counter}", where "loop_counter" is a blackboard variable from a Repeat.
  public var format: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Record a datetime string into the blackboard. Writes the date according to ISO8601 format.
public struct Bosdyn_Api_Mission_DateToBlackboard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key of the variable that will be written.
  public var key: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Just returns a constant when calling tick().
public struct Bosdyn_Api_Mission_ConstantResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This result is always returned when calling tick().
  public var result: Bosdyn_Api_Mission_Result = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.mission"

extension Bosdyn_Api_Mission_Node: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Node"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "user_data"),
    3: .standard(proto: "reference_id"),
    4: .same(proto: "impl"),
    5: .standard(proto: "node_reference"),
    6: .standard(proto: "parameter_values"),
    7: .same(proto: "overrides"),
    8: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._userData)
      case 3: try decoder.decodeSingularStringField(value: &self.referenceID)
      case 4:
        var v: SwiftProtobuf.Google_Protobuf_Any?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .impl(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .impl(v)}
      case 5:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .nodeReference(v)}
      case 6: try decoder.decodeRepeatedMessageField(value: &self.parameterValues)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.overrides)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.parameters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._userData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.referenceID.isEmpty {
      try visitor.visitSingularStringField(value: self.referenceID, fieldNumber: 3)
    }
    switch self.type {
    case .impl(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .nodeReference(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    case nil: break
    }
    if !self.parameterValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameterValues, fieldNumber: 6)
    }
    if !self.overrides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.overrides, fieldNumber: 7)
    }
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Node, rhs: Bosdyn_Api_Mission_Node) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._userData != rhs._userData {return false}
    if lhs.referenceID != rhs.referenceID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.parameterValues != rhs.parameterValues {return false}
    if lhs.overrides != rhs.overrides {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Sequence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sequence"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "always_restart"),
    2: .same(proto: "children"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.alwaysRestart)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.alwaysRestart != false {
      try visitor.visitSingularBoolField(value: self.alwaysRestart, fieldNumber: 1)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Sequence, rhs: Bosdyn_Api_Mission_Sequence) -> Bool {
    if lhs.alwaysRestart != rhs.alwaysRestart {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Selector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Selector"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "always_restart"),
    2: .same(proto: "children"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.alwaysRestart)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.children)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.alwaysRestart != false {
      try visitor.visitSingularBoolField(value: self.alwaysRestart, fieldNumber: 1)
    }
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Selector, rhs: Bosdyn_Api_Mission_Selector) -> Bool {
    if lhs.alwaysRestart != rhs.alwaysRestart {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Repeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Repeat"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_starts"),
    4: .same(proto: "child"),
    5: .standard(proto: "start_counter_state_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.maxStarts)
      case 4: try decoder.decodeSingularMessageField(value: &self._child)
      case 5: try decoder.decodeSingularStringField(value: &self.startCounterStateName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxStarts != 0 {
      try visitor.visitSingularInt32Field(value: self.maxStarts, fieldNumber: 1)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.startCounterStateName.isEmpty {
      try visitor.visitSingularStringField(value: self.startCounterStateName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Repeat, rhs: Bosdyn_Api_Mission_Repeat) -> Bool {
    if lhs.maxStarts != rhs.maxStarts {return false}
    if lhs._child != rhs._child {return false}
    if lhs.startCounterStateName != rhs.startCounterStateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Retry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Retry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_attempts"),
    2: .same(proto: "child"),
    5: .standard(proto: "attempt_counter_state_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.maxAttempts)
      case 2: try decoder.decodeSingularMessageField(value: &self._child)
      case 5: try decoder.decodeSingularStringField(value: &self.attemptCounterStateName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxAttempts != 0 {
      try visitor.visitSingularInt32Field(value: self.maxAttempts, fieldNumber: 1)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.attemptCounterStateName.isEmpty {
      try visitor.visitSingularStringField(value: self.attemptCounterStateName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Retry, rhs: Bosdyn_Api_Mission_Retry) -> Bool {
    if lhs.maxAttempts != rhs.maxAttempts {return false}
    if lhs._child != rhs._child {return false}
    if lhs.attemptCounterStateName != rhs.attemptCounterStateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_ForDuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForDuration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "child"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._duration)
      case 2: try decoder.decodeSingularMessageField(value: &self._child)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_ForDuration, rhs: Bosdyn_Api_Mission_ForDuration) -> Bool {
    if lhs._duration != rhs._duration {return false}
    if lhs._child != rhs._child {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_SimpleParallel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SimpleParallel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "primary"),
    2: .same(proto: "secondary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._primary)
      case 2: try decoder.decodeSingularMessageField(value: &self._secondary)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._primary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._secondary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_SimpleParallel, rhs: Bosdyn_Api_Mission_SimpleParallel) -> Bool {
    if lhs._primary != rhs._primary {return false}
    if lhs._secondary != rhs._secondary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Condition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Condition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lhs"),
    2: .same(proto: "rhs"),
    5: .same(proto: "operation"),
    6: .standard(proto: "handle_staleness"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lhs)
      case 2: try decoder.decodeSingularMessageField(value: &self._rhs)
      case 5: try decoder.decodeSingularEnumField(value: &self.operation)
      case 6: try decoder.decodeSingularEnumField(value: &self.handleStaleness)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lhs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rhs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.operation != .unknown {
      try visitor.visitSingularEnumField(value: self.operation, fieldNumber: 5)
    }
    if self.handleStaleness != .handleStaleUnknown {
      try visitor.visitSingularEnumField(value: self.handleStaleness, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Condition, rhs: Bosdyn_Api_Mission_Condition) -> Bool {
    if lhs._lhs != rhs._lhs {return false}
    if lhs._rhs != rhs._rhs {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.handleStaleness != rhs.handleStaleness {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Condition.Compare: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPARE_UNKNOWN"),
    1: .same(proto: "COMPARE_EQ"),
    2: .same(proto: "COMPARE_NE"),
    3: .same(proto: "COMPARE_LT"),
    4: .same(proto: "COMPARE_GT"),
    5: .same(proto: "COMPARE_LE"),
    6: .same(proto: "COMPARE_GE"),
  ]
}

extension Bosdyn_Api_Mission_Condition.HandleStaleness: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HANDLE_STALE_UNKNOWN"),
    1: .same(proto: "HANDLE_STALE_READ_ANYWAY"),
    2: .same(proto: "HANDLE_STALE_RUN_UNTIL_FRESH"),
    3: .same(proto: "HANDLE_STALE_FAIL"),
  ]
}

extension Bosdyn_Api_Mission_Condition.Operand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_Condition.protoMessageName + ".Operand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "var"),
    2: .same(proto: "const"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_Mission_VariableDeclaration?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .var(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .var(v)}
      case 2:
        var v: Bosdyn_Api_Mission_ConstantValue?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .const(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .const(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.type {
    case .var(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .const(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Condition.Operand, rhs: Bosdyn_Api_Mission_Condition.Operand) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynRobotState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynRobotState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "child"),
    4: .standard(proto: "state_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._child)
      case 4: try decoder.decodeSingularStringField(value: &self.stateName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.stateName.isEmpty {
      try visitor.visitSingularStringField(value: self.stateName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynRobotState, rhs: Bosdyn_Api_Mission_BosdynRobotState) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._child != rhs._child {return false}
    if lhs.stateName != rhs.stateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynDockState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynDockState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "child"),
    4: .standard(proto: "state_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._child)
      case 4: try decoder.decodeSingularStringField(value: &self.stateName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.stateName.isEmpty {
      try visitor.visitSingularStringField(value: self.stateName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynDockState, rhs: Bosdyn_Api_Mission_BosdynDockState) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._child != rhs._child {return false}
    if lhs.stateName != rhs.stateName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynRobotCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynRobotCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "command"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynRobotCommand, rhs: Bosdyn_Api_Mission_BosdynRobotCommand) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._command != rhs._command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynPowerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynPowerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    4: .same(proto: "request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 4: try decoder.decodeSingularEnumField(value: &self.request)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if self.request != .unknown {
      try visitor.visitSingularEnumField(value: self.request, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynPowerRequest, rhs: Bosdyn_Api_Mission_BosdynPowerRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynNavigateTo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynNavigateTo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .standard(proto: "destination_waypoint_id"),
    4: .standard(proto: "route_gen_params"),
    5: .standard(proto: "travel_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularStringField(value: &self.destinationWaypointID)
      case 4: try decoder.decodeSingularMessageField(value: &self._routeGenParams)
      case 5: try decoder.decodeSingularMessageField(value: &self._travelParams)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if !self.destinationWaypointID.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationWaypointID, fieldNumber: 3)
    }
    if let v = self._routeGenParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._travelParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynNavigateTo, rhs: Bosdyn_Api_Mission_BosdynNavigateTo) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs.destinationWaypointID != rhs.destinationWaypointID {return false}
    if lhs._routeGenParams != rhs._routeGenParams {return false}
    if lhs._travelParams != rhs._travelParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynGraphNavState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynGraphNavState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "child"),
    4: .standard(proto: "state_name"),
    5: .standard(proto: "waypoint_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._child)
      case 4: try decoder.decodeSingularStringField(value: &self.stateName)
      case 5: try decoder.decodeSingularStringField(value: &self.waypointID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.stateName.isEmpty {
      try visitor.visitSingularStringField(value: self.stateName, fieldNumber: 4)
    }
    if !self.waypointID.isEmpty {
      try visitor.visitSingularStringField(value: self.waypointID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynGraphNavState, rhs: Bosdyn_Api_Mission_BosdynGraphNavState) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._child != rhs._child {return false}
    if lhs.stateName != rhs.stateName {return false}
    if lhs.waypointID != rhs.waypointID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_BosdynGraphNavLocalize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BosdynGraphNavLocalize"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .standard(proto: "localization_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._localizationRequest)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._localizationRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_BosdynGraphNavLocalize, rhs: Bosdyn_Api_Mission_BosdynGraphNavLocalize) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._localizationRequest != rhs._localizationRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_RemoteGrpc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoteGrpc"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    3: .standard(proto: "service_name"),
    4: .same(proto: "timeout"),
    5: .standard(proto: "lease_resources"),
    6: .same(proto: "inputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 4: try decoder.decodeSingularFloatField(value: &self.timeout)
      case 5: try decoder.decodeRepeatedStringField(value: &self.leaseResources)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 1)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 3)
    }
    if self.timeout != 0 {
      try visitor.visitSingularFloatField(value: self.timeout, fieldNumber: 4)
    }
    if !self.leaseResources.isEmpty {
      try visitor.visitRepeatedStringField(value: self.leaseResources, fieldNumber: 5)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_RemoteGrpc, rhs: Bosdyn_Api_Mission_RemoteGrpc) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.leaseResources != rhs.leaseResources {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Sleep: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sleep"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
    2: .standard(proto: "restart_after_stop"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.seconds)
      case 2: try decoder.decodeSingularBoolField(value: &self.restartAfterStop)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularFloatField(value: self.seconds, fieldNumber: 1)
    }
    if self.restartAfterStop != false {
      try visitor.visitSingularBoolField(value: self.restartAfterStop, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Sleep, rhs: Bosdyn_Api_Mission_Sleep) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.restartAfterStop != rhs.restartAfterStop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Prompt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Prompt"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "always_reprompt"),
    2: .same(proto: "text"),
    3: .same(proto: "source"),
    4: .same(proto: "options"),
    5: .same(proto: "child"),
    6: .standard(proto: "for_autonomous_processing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.alwaysReprompt)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      case 3: try decoder.decodeSingularStringField(value: &self.source)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.options)
      case 5: try decoder.decodeSingularMessageField(value: &self._child)
      case 6: try decoder.decodeSingularBoolField(value: &self.forAutonomousProcessing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.alwaysReprompt != false {
      try visitor.visitSingularBoolField(value: self.alwaysReprompt, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 3)
    }
    if !self.options.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.options, fieldNumber: 4)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.forAutonomousProcessing != false {
      try visitor.visitSingularBoolField(value: self.forAutonomousProcessing, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Prompt, rhs: Bosdyn_Api_Mission_Prompt) -> Bool {
    if lhs.alwaysReprompt != rhs.alwaysReprompt {return false}
    if lhs.text != rhs.text {return false}
    if lhs.source != rhs.source {return false}
    if lhs.options != rhs.options {return false}
    if lhs._child != rhs._child {return false}
    if lhs.forAutonomousProcessing != rhs.forAutonomousProcessing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Prompt.Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_Prompt.protoMessageName + ".Option"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "answer_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      case 2: try decoder.decodeSingularInt64Field(value: &self.answerCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.answerCode != 0 {
      try visitor.visitSingularInt64Field(value: self.answerCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Prompt.Option, rhs: Bosdyn_Api_Mission_Prompt.Option) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.answerCode != rhs.answerCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_SpotCamPtz: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpotCamPtz"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .standard(proto: "ptz_position"),
    4: .standard(proto: "adjust_parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._ptzPosition)
      case 4: try decoder.decodeSingularMessageField(value: &self._adjustParameters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._ptzPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._adjustParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_SpotCamPtz, rhs: Bosdyn_Api_Mission_SpotCamPtz) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._ptzPosition != rhs._ptzPosition {return false}
    if lhs._adjustParameters != rhs._adjustParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Mission_SpotCamPtz.protoMessageName + ".AdjustParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "localization_varname"),
    5: .standard(proto: "waypoint_id"),
    6: .standard(proto: "waypoint_tform_body"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self.localizationVarname)
      case 5: try decoder.decodeSingularStringField(value: &self.waypointID)
      case 6: try decoder.decodeSingularMessageField(value: &self._waypointTformBody)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.localizationVarname.isEmpty {
      try visitor.visitSingularStringField(value: self.localizationVarname, fieldNumber: 4)
    }
    if !self.waypointID.isEmpty {
      try visitor.visitSingularStringField(value: self.waypointID, fieldNumber: 5)
    }
    if let v = self._waypointTformBody {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters, rhs: Bosdyn_Api_Mission_SpotCamPtz.AdjustParameters) -> Bool {
    if lhs.localizationVarname != rhs.localizationVarname {return false}
    if lhs.waypointID != rhs.waypointID {return false}
    if lhs._waypointTformBody != rhs._waypointTformBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_SpotCamStoreMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpotCamStoreMedia"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "camera"),
    4: .same(proto: "type"),
    5: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._camera)
      case 4: try decoder.decodeSingularEnumField(value: &self.type)
      case 5: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._camera {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.type != .stillimage {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_SpotCamStoreMedia, rhs: Bosdyn_Api_Mission_SpotCamStoreMedia) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._camera != rhs._camera {return false}
    if lhs.type != rhs.type {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_Dock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .standard(proto: "docking_station_id"),
    4: .same(proto: "child"),
    5: .standard(proto: "command_status_name"),
    6: .standard(proto: "feedback_status_name"),
    7: .standard(proto: "prep_pose_behavior"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.dockingStationID)
      case 4: try decoder.decodeSingularMessageField(value: &self._child)
      case 5: try decoder.decodeSingularStringField(value: &self.commandStatusName)
      case 6: try decoder.decodeSingularStringField(value: &self.feedbackStatusName)
      case 7: try decoder.decodeSingularEnumField(value: &self.prepPoseBehavior)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if self.dockingStationID != 0 {
      try visitor.visitSingularUInt32Field(value: self.dockingStationID, fieldNumber: 3)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.commandStatusName.isEmpty {
      try visitor.visitSingularStringField(value: self.commandStatusName, fieldNumber: 5)
    }
    if !self.feedbackStatusName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedbackStatusName, fieldNumber: 6)
    }
    if self.prepPoseBehavior != .prepPoseUnknown {
      try visitor.visitSingularEnumField(value: self.prepPoseBehavior, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_Dock, rhs: Bosdyn_Api_Mission_Dock) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs.dockingStationID != rhs.dockingStationID {return false}
    if lhs._child != rhs._child {return false}
    if lhs.commandStatusName != rhs.commandStatusName {return false}
    if lhs.feedbackStatusName != rhs.feedbackStatusName {return false}
    if lhs.prepPoseBehavior != rhs.prepPoseBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_DataAcquisition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataAcquisition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "host"),
    3: .same(proto: "request"),
    4: .standard(proto: "completion_behavior"),
    5: .standard(proto: "group_name_format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.host)
      case 3: try decoder.decodeSingularMessageField(value: &self._request)
      case 4: try decoder.decodeSingularEnumField(value: &self.completionBehavior)
      case 5: try decoder.decodeSingularStringField(value: &self.groupNameFormat)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 2)
    }
    if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.completionBehavior != .completeUnknown {
      try visitor.visitSingularEnumField(value: self.completionBehavior, fieldNumber: 4)
    }
    if !self.groupNameFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.groupNameFormat, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_DataAcquisition, rhs: Bosdyn_Api_Mission_DataAcquisition) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.host != rhs.host {return false}
    if lhs._request != rhs._request {return false}
    if lhs.completionBehavior != rhs.completionBehavior {return false}
    if lhs.groupNameFormat != rhs.groupNameFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_DataAcquisition.CompletionBehavior: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPLETE_UNKNOWN"),
    1: .same(proto: "COMPLETE_AFTER_SAVED"),
    2: .same(proto: "COMPLETE_AFTER_ACQUIRED"),
  ]
}

extension Bosdyn_Api_Mission_DefineBlackboard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DefineBlackboard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "blackboard_variables"),
    2: .same(proto: "child"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blackboardVariables)
      case 2: try decoder.decodeSingularMessageField(value: &self._child)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blackboardVariables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blackboardVariables, fieldNumber: 1)
    }
    if let v = self._child {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_DefineBlackboard, rhs: Bosdyn_Api_Mission_DefineBlackboard) -> Bool {
    if lhs.blackboardVariables != rhs.blackboardVariables {return false}
    if lhs._child != rhs._child {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_SetBlackboard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetBlackboard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "blackboard_variables"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blackboardVariables)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blackboardVariables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blackboardVariables, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_SetBlackboard, rhs: Bosdyn_Api_Mission_SetBlackboard) -> Bool {
    if lhs.blackboardVariables != rhs.blackboardVariables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_FormatBlackboard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FormatBlackboard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_FormatBlackboard, rhs: Bosdyn_Api_Mission_FormatBlackboard) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.format != rhs.format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_DateToBlackboard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DateToBlackboard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_DateToBlackboard, rhs: Bosdyn_Api_Mission_DateToBlackboard) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Mission_ConstantResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConstantResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Mission_ConstantResult, rhs: Bosdyn_Api_Mission_ConstantResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
