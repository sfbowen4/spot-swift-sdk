//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/mission/remote_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Interface for mission callbacks.  Mission RemoteGrpc nodes will act as clients
/// to this service type, calling out to this service when loaded, ticked, or unloaded.
///
/// Usage: instantiate `Bosdyn_Api_Mission_RemoteMissionServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_Mission_RemoteMissionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_Mission_RemoteMissionServiceClientInterceptorFactoryProtocol? { get }

  func establishSession(
    _ request: Bosdyn_Api_Mission_EstablishSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_EstablishSessionRequest, Bosdyn_Api_Mission_EstablishSessionResponse>

  func tick(
    _ request: Bosdyn_Api_Mission_TickRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_TickRequest, Bosdyn_Api_Mission_TickResponse>

  func stop(
    _ request: Bosdyn_Api_Mission_StopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_StopRequest, Bosdyn_Api_Mission_StopResponse>

  func teardownSession(
    _ request: Bosdyn_Api_Mission_TeardownSessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_TeardownSessionRequest, Bosdyn_Api_Mission_TeardownSessionResponse>
}

extension Bosdyn_Api_Mission_RemoteMissionServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.mission.RemoteMissionService"
  }

  /// Call this once at mission load time, once for each node that references this remote service.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstablishSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func establishSession(
    _ request: Bosdyn_Api_Mission_EstablishSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_EstablishSessionRequest, Bosdyn_Api_Mission_EstablishSessionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.RemoteMissionService/EstablishSession",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstablishSessionInterceptors() ?? []
    )
  }

  /// Call this every time the RemoteGrpc node is ticked.
  ///
  /// - Parameters:
  ///   - request: Request to send to Tick.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tick(
    _ request: Bosdyn_Api_Mission_TickRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_TickRequest, Bosdyn_Api_Mission_TickResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.RemoteMissionService/Tick",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTickInterceptors() ?? []
    )
  }

  /// Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
  /// in this cycle. Signals that the next tick will be a restart, rather than a continuation.
  ///
  /// - Parameters:
  ///   - request: Request to send to Stop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stop(
    _ request: Bosdyn_Api_Mission_StopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_StopRequest, Bosdyn_Api_Mission_StopResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.RemoteMissionService/Stop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopInterceptors() ?? []
    )
  }

  /// Tells the service it can forget any data associated with the given session ID.
  /// Should be called once for every EstablishSession call.
  ///
  /// - Parameters:
  ///   - request: Request to send to TeardownSession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func teardownSession(
    _ request: Bosdyn_Api_Mission_TeardownSessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_TeardownSessionRequest, Bosdyn_Api_Mission_TeardownSessionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.RemoteMissionService/TeardownSession",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTeardownSessionInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_Mission_RemoteMissionServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'establishSession'.
  func makeEstablishSessionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_EstablishSessionRequest, Bosdyn_Api_Mission_EstablishSessionResponse>]

  /// - Returns: Interceptors to use when invoking 'tick'.
  func makeTickInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_TickRequest, Bosdyn_Api_Mission_TickResponse>]

  /// - Returns: Interceptors to use when invoking 'stop'.
  func makeStopInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_StopRequest, Bosdyn_Api_Mission_StopResponse>]

  /// - Returns: Interceptors to use when invoking 'teardownSession'.
  func makeTeardownSessionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_TeardownSessionRequest, Bosdyn_Api_Mission_TeardownSessionResponse>]
}

public final class Bosdyn_Api_Mission_RemoteMissionServiceClient: Bosdyn_Api_Mission_RemoteMissionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_Mission_RemoteMissionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.mission.RemoteMissionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_Mission_RemoteMissionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Interface for mission callbacks.  Mission RemoteGrpc nodes will act as clients
/// to this service type, calling out to this service when loaded, ticked, or unloaded.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_Mission_RemoteMissionServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_Mission_RemoteMissionServiceServerInterceptorFactoryProtocol? { get }

  /// Call this once at mission load time, once for each node that references this remote service.
  func establishSession(request: Bosdyn_Api_Mission_EstablishSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_EstablishSessionResponse>

  /// Call this every time the RemoteGrpc node is ticked.
  func tick(request: Bosdyn_Api_Mission_TickRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_TickResponse>

  /// Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
  /// in this cycle. Signals that the next tick will be a restart, rather than a continuation.
  func stop(request: Bosdyn_Api_Mission_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_StopResponse>

  /// Tells the service it can forget any data associated with the given session ID.
  /// Should be called once for every EstablishSession call.
  func teardownSession(request: Bosdyn_Api_Mission_TeardownSessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_TeardownSessionResponse>
}

extension Bosdyn_Api_Mission_RemoteMissionServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.mission.RemoteMissionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EstablishSession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_EstablishSessionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_EstablishSessionResponse>(),
        interceptors: self.interceptors?.makeEstablishSessionInterceptors() ?? [],
        userFunction: self.establishSession(request:context:)
      )

    case "Tick":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_TickRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_TickResponse>(),
        interceptors: self.interceptors?.makeTickInterceptors() ?? [],
        userFunction: self.tick(request:context:)
      )

    case "Stop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_StopRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_StopResponse>(),
        interceptors: self.interceptors?.makeStopInterceptors() ?? [],
        userFunction: self.stop(request:context:)
      )

    case "TeardownSession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_TeardownSessionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_TeardownSessionResponse>(),
        interceptors: self.interceptors?.makeTeardownSessionInterceptors() ?? [],
        userFunction: self.teardownSession(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_Mission_RemoteMissionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'establishSession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstablishSessionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_EstablishSessionRequest, Bosdyn_Api_Mission_EstablishSessionResponse>]

  /// - Returns: Interceptors to use when handling 'tick'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTickInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_TickRequest, Bosdyn_Api_Mission_TickResponse>]

  /// - Returns: Interceptors to use when handling 'stop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_StopRequest, Bosdyn_Api_Mission_StopResponse>]

  /// - Returns: Interceptors to use when handling 'teardownSession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTeardownSessionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_TeardownSessionRequest, Bosdyn_Api_Mission_TeardownSessionResponse>]
}
