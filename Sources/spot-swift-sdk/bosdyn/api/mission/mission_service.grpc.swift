//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/mission/mission_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The MissionService can be used to specify high level autonomous behaviors for Spot using behavior trees.
///
/// Usage: instantiate `Bosdyn_Api_Mission_MissionServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_Mission_MissionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_Mission_MissionServiceClientInterceptorFactoryProtocol? { get }

  func loadMission(
    _ request: Bosdyn_Api_Mission_LoadMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_LoadMissionRequest, Bosdyn_Api_Mission_LoadMissionResponse>

  func playMission(
    _ request: Bosdyn_Api_Mission_PlayMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_PlayMissionRequest, Bosdyn_Api_Mission_PlayMissionResponse>

  func pauseMission(
    _ request: Bosdyn_Api_Mission_PauseMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_PauseMissionRequest, Bosdyn_Api_Mission_PauseMissionResponse>

  func restartMission(
    _ request: Bosdyn_Api_Mission_RestartMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_RestartMissionRequest, Bosdyn_Api_Mission_RestartMissionResponse>

  func getState(
    _ request: Bosdyn_Api_Mission_GetStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_GetStateRequest, Bosdyn_Api_Mission_GetStateResponse>

  func getInfo(
    _ request: Bosdyn_Api_Mission_GetInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_GetInfoRequest, Bosdyn_Api_Mission_GetInfoResponse>

  func getMission(
    _ request: Bosdyn_Api_Mission_GetMissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_GetMissionRequest, Bosdyn_Api_Mission_GetMissionResponse>

  func answerQuestion(
    _ request: Bosdyn_Api_Mission_AnswerQuestionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Mission_AnswerQuestionRequest, Bosdyn_Api_Mission_AnswerQuestionResponse>
}

extension Bosdyn_Api_Mission_MissionServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.mission.MissionService"
  }

  /// Load a mission to run later.
  ///
  /// - Parameters:
  ///   - request: Request to send to LoadMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loadMission(
    _ request: Bosdyn_Api_Mission_LoadMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_LoadMissionRequest, Bosdyn_Api_Mission_LoadMissionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/LoadMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadMissionInterceptors() ?? []
    )
  }

  /// Start executing a loaded mission.
  /// Will not restart a mission that has run to completion. Use RestartMission to do that.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlayMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func playMission(
    _ request: Bosdyn_Api_Mission_PlayMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_PlayMissionRequest, Bosdyn_Api_Mission_PlayMissionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/PlayMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlayMissionInterceptors() ?? []
    )
  }

  /// Pause mission execution.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pauseMission(
    _ request: Bosdyn_Api_Mission_PauseMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_PauseMissionRequest, Bosdyn_Api_Mission_PauseMissionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/PauseMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseMissionInterceptors() ?? []
    )
  }

  /// Start executing a loaded mission from the beginning.
  /// Does not need to be called after LoadMission.
  ///
  /// - Parameters:
  ///   - request: Request to send to RestartMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restartMission(
    _ request: Bosdyn_Api_Mission_RestartMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_RestartMissionRequest, Bosdyn_Api_Mission_RestartMissionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/RestartMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRestartMissionInterceptors() ?? []
    )
  }

  /// Get the state of the mission.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getState(
    _ request: Bosdyn_Api_Mission_GetStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_GetStateRequest, Bosdyn_Api_Mission_GetStateResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/GetState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStateInterceptors() ?? []
    )
  }

  /// Get static information regarding the mission. Used to interpret mission state.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInfo(
    _ request: Bosdyn_Api_Mission_GetInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_GetInfoRequest, Bosdyn_Api_Mission_GetInfoResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/GetInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInfoInterceptors() ?? []
    )
  }

  /// Download the mission as it was uploaded to the service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMission(
    _ request: Bosdyn_Api_Mission_GetMissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_GetMissionRequest, Bosdyn_Api_Mission_GetMissionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/GetMission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMissionInterceptors() ?? []
    )
  }

  /// Specify an answer to the question asked by the mission.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnswerQuestion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func answerQuestion(
    _ request: Bosdyn_Api_Mission_AnswerQuestionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Mission_AnswerQuestionRequest, Bosdyn_Api_Mission_AnswerQuestionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.mission.MissionService/AnswerQuestion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAnswerQuestionInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_Mission_MissionServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'loadMission'.
  func makeLoadMissionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_LoadMissionRequest, Bosdyn_Api_Mission_LoadMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'playMission'.
  func makePlayMissionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_PlayMissionRequest, Bosdyn_Api_Mission_PlayMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'pauseMission'.
  func makePauseMissionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_PauseMissionRequest, Bosdyn_Api_Mission_PauseMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'restartMission'.
  func makeRestartMissionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_RestartMissionRequest, Bosdyn_Api_Mission_RestartMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'getState'.
  func makeGetStateInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_GetStateRequest, Bosdyn_Api_Mission_GetStateResponse>]

  /// - Returns: Interceptors to use when invoking 'getInfo'.
  func makeGetInfoInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_GetInfoRequest, Bosdyn_Api_Mission_GetInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getMission'.
  func makeGetMissionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_GetMissionRequest, Bosdyn_Api_Mission_GetMissionResponse>]

  /// - Returns: Interceptors to use when invoking 'answerQuestion'.
  func makeAnswerQuestionInterceptors() -> [ClientInterceptor<Bosdyn_Api_Mission_AnswerQuestionRequest, Bosdyn_Api_Mission_AnswerQuestionResponse>]
}

public final class Bosdyn_Api_Mission_MissionServiceClient: Bosdyn_Api_Mission_MissionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_Mission_MissionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.mission.MissionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_Mission_MissionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The MissionService can be used to specify high level autonomous behaviors for Spot using behavior trees.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_Mission_MissionServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_Mission_MissionServiceServerInterceptorFactoryProtocol? { get }

  /// Load a mission to run later.
  func loadMission(request: Bosdyn_Api_Mission_LoadMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_LoadMissionResponse>

  /// Start executing a loaded mission.
  /// Will not restart a mission that has run to completion. Use RestartMission to do that.
  func playMission(request: Bosdyn_Api_Mission_PlayMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_PlayMissionResponse>

  /// Pause mission execution.
  func pauseMission(request: Bosdyn_Api_Mission_PauseMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_PauseMissionResponse>

  /// Start executing a loaded mission from the beginning.
  /// Does not need to be called after LoadMission.
  func restartMission(request: Bosdyn_Api_Mission_RestartMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_RestartMissionResponse>

  /// Get the state of the mission.
  func getState(request: Bosdyn_Api_Mission_GetStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_GetStateResponse>

  /// Get static information regarding the mission. Used to interpret mission state.
  func getInfo(request: Bosdyn_Api_Mission_GetInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_GetInfoResponse>

  /// Download the mission as it was uploaded to the service.
  func getMission(request: Bosdyn_Api_Mission_GetMissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_GetMissionResponse>

  /// Specify an answer to the question asked by the mission.
  func answerQuestion(request: Bosdyn_Api_Mission_AnswerQuestionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Mission_AnswerQuestionResponse>
}

extension Bosdyn_Api_Mission_MissionServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.mission.MissionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LoadMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_LoadMissionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_LoadMissionResponse>(),
        interceptors: self.interceptors?.makeLoadMissionInterceptors() ?? [],
        userFunction: self.loadMission(request:context:)
      )

    case "PlayMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_PlayMissionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_PlayMissionResponse>(),
        interceptors: self.interceptors?.makePlayMissionInterceptors() ?? [],
        userFunction: self.playMission(request:context:)
      )

    case "PauseMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_PauseMissionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_PauseMissionResponse>(),
        interceptors: self.interceptors?.makePauseMissionInterceptors() ?? [],
        userFunction: self.pauseMission(request:context:)
      )

    case "RestartMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_RestartMissionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_RestartMissionResponse>(),
        interceptors: self.interceptors?.makeRestartMissionInterceptors() ?? [],
        userFunction: self.restartMission(request:context:)
      )

    case "GetState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_GetStateRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_GetStateResponse>(),
        interceptors: self.interceptors?.makeGetStateInterceptors() ?? [],
        userFunction: self.getState(request:context:)
      )

    case "GetInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_GetInfoRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_GetInfoResponse>(),
        interceptors: self.interceptors?.makeGetInfoInterceptors() ?? [],
        userFunction: self.getInfo(request:context:)
      )

    case "GetMission":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_GetMissionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_GetMissionResponse>(),
        interceptors: self.interceptors?.makeGetMissionInterceptors() ?? [],
        userFunction: self.getMission(request:context:)
      )

    case "AnswerQuestion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Mission_AnswerQuestionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Mission_AnswerQuestionResponse>(),
        interceptors: self.interceptors?.makeAnswerQuestionInterceptors() ?? [],
        userFunction: self.answerQuestion(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_Mission_MissionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'loadMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoadMissionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_LoadMissionRequest, Bosdyn_Api_Mission_LoadMissionResponse>]

  /// - Returns: Interceptors to use when handling 'playMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlayMissionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_PlayMissionRequest, Bosdyn_Api_Mission_PlayMissionResponse>]

  /// - Returns: Interceptors to use when handling 'pauseMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseMissionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_PauseMissionRequest, Bosdyn_Api_Mission_PauseMissionResponse>]

  /// - Returns: Interceptors to use when handling 'restartMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRestartMissionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_RestartMissionRequest, Bosdyn_Api_Mission_RestartMissionResponse>]

  /// - Returns: Interceptors to use when handling 'getState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStateInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_GetStateRequest, Bosdyn_Api_Mission_GetStateResponse>]

  /// - Returns: Interceptors to use when handling 'getInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInfoInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_GetInfoRequest, Bosdyn_Api_Mission_GetInfoResponse>]

  /// - Returns: Interceptors to use when handling 'getMission'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMissionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_GetMissionRequest, Bosdyn_Api_Mission_GetMissionResponse>]

  /// - Returns: Interceptors to use when handling 'answerQuestion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAnswerQuestionInterceptors() -> [ServerInterceptor<Bosdyn_Api_Mission_AnswerQuestionRequest, Bosdyn_Api_Mission_AnswerQuestionResponse>]
}
