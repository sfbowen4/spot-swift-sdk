//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/point_cloud_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The point cloud service provides access to one or more point cloud sources, for example
/// from a lidar. It supports querying the list of available sources provided by the service
/// and it supports requesting the latest point cloud data for each source by name.
///
/// Usage: instantiate `Bosdyn_Api_PointCloudServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_PointCloudServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_PointCloudServiceClientInterceptorFactoryProtocol? { get }

  func listPointCloudSources(
    _ request: Bosdyn_Api_ListPointCloudSourcesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListPointCloudSourcesRequest, Bosdyn_Api_ListPointCloudSourcesResponse>

  func getPointCloud(
    _ request: Bosdyn_Api_GetPointCloudRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetPointCloudRequest, Bosdyn_Api_GetPointCloudResponse>
}

extension Bosdyn_Api_PointCloudServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.PointCloudService"
  }

  /// Obtain the list of PointCloudSources for this given service.
  /// Note that there may be multiple PointCloudServices running, each with their own set of sources
  /// The name field keys access to individual point clouds when calling GetPointCloud.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPointCloudSources.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPointCloudSources(
    _ request: Bosdyn_Api_ListPointCloudSourcesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListPointCloudSourcesRequest, Bosdyn_Api_ListPointCloudSourcesResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.PointCloudService/ListPointCloudSources",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPointCloudSourcesInterceptors() ?? []
    )
  }

  /// Request point clouds by source name.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPointCloud.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPointCloud(
    _ request: Bosdyn_Api_GetPointCloudRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetPointCloudRequest, Bosdyn_Api_GetPointCloudResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.PointCloudService/GetPointCloud",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPointCloudInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_PointCloudServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listPointCloudSources'.
  func makeListPointCloudSourcesInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListPointCloudSourcesRequest, Bosdyn_Api_ListPointCloudSourcesResponse>]

  /// - Returns: Interceptors to use when invoking 'getPointCloud'.
  func makeGetPointCloudInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetPointCloudRequest, Bosdyn_Api_GetPointCloudResponse>]
}

public final class Bosdyn_Api_PointCloudServiceClient: Bosdyn_Api_PointCloudServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_PointCloudServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.PointCloudService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_PointCloudServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The point cloud service provides access to one or more point cloud sources, for example
/// from a lidar. It supports querying the list of available sources provided by the service
/// and it supports requesting the latest point cloud data for each source by name.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_PointCloudServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_PointCloudServiceServerInterceptorFactoryProtocol? { get }

  /// Obtain the list of PointCloudSources for this given service.
  /// Note that there may be multiple PointCloudServices running, each with their own set of sources
  /// The name field keys access to individual point clouds when calling GetPointCloud.
  func listPointCloudSources(request: Bosdyn_Api_ListPointCloudSourcesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListPointCloudSourcesResponse>

  /// Request point clouds by source name.
  func getPointCloud(request: Bosdyn_Api_GetPointCloudRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetPointCloudResponse>
}

extension Bosdyn_Api_PointCloudServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.PointCloudService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListPointCloudSources":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListPointCloudSourcesRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListPointCloudSourcesResponse>(),
        interceptors: self.interceptors?.makeListPointCloudSourcesInterceptors() ?? [],
        userFunction: self.listPointCloudSources(request:context:)
      )

    case "GetPointCloud":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetPointCloudRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetPointCloudResponse>(),
        interceptors: self.interceptors?.makeGetPointCloudInterceptors() ?? [],
        userFunction: self.getPointCloud(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_PointCloudServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listPointCloudSources'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPointCloudSourcesInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListPointCloudSourcesRequest, Bosdyn_Api_ListPointCloudSourcesResponse>]

  /// - Returns: Interceptors to use when handling 'getPointCloud'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPointCloudInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetPointCloudRequest, Bosdyn_Api_GetPointCloudResponse>]
}
