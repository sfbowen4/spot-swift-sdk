// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/world_object.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A type for the world object, which is associated with whatever properties the world object includes. This can
/// be used to request specific kinds of objects; for example, a request for only fiducials.
public enum Bosdyn_Api_WorldObjectType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case worldObjectUnknown // = 0
  case worldObjectDrawable // = 1
  case worldObjectApriltag // = 2
  case worldObjectImageCoordinates // = 5
  case worldObjectDock // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .worldObjectUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .worldObjectUnknown
    case 1: self = .worldObjectDrawable
    case 2: self = .worldObjectApriltag
    case 5: self = .worldObjectImageCoordinates
    case 6: self = .worldObjectDock
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .worldObjectUnknown: return 0
    case .worldObjectDrawable: return 1
    case .worldObjectApriltag: return 2
    case .worldObjectImageCoordinates: return 5
    case .worldObjectDock: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_WorldObjectType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_WorldObjectType] = [
    .worldObjectUnknown,
    .worldObjectDrawable,
    .worldObjectApriltag,
    .worldObjectImageCoordinates,
    .worldObjectDock,
  ]
}

#endif  // swift(>=4.2)

/// The world object message is used to describe different objects seen by a robot. It contains information
/// about the properties of the object in addition to a unique id and the transform snapshot.
/// The world object uses "properties" to describe different traits about the object, such as image coordinates
/// associated with the camera the object was detected in. A world object can have multiple different properties
/// that are all associated with the single object.
public struct Bosdyn_Api_WorldObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique integer identifier that will be consistent for the duration of a robot's battery life
  /// The id is set internally by the world object service.
  public var id: Int32 = 0

  /// A human readable name for the world object. Note that this differs from any frame_name's associated
  /// with the object (since there can be multiple frames describing a single object).
  public var name: String = String()

  /// Time in robot time clock at which this object was most recently detected and valid.
  public var acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acquisitionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acquisitionTime = newValue}
  }
  /// Returns true if `acquisitionTime` has been explicitly set.
  public var hasAcquisitionTime: Bool {return self._acquisitionTime != nil}
  /// Clears the value of `acquisitionTime`. Subsequent reads from it will return its default value.
  public mutating func clearAcquisitionTime() {self._acquisitionTime = nil}

  /// A tree-based collection of transformations, which will include the transformations to each
  /// of the returned world objects in addition to transformations to the common frames ("vision",
  /// "body", "odom"). All transforms within the snapshot are at the acquistion time of the world object.
  /// Note that each object's frame names are defined within the properties submessage. For example,
  /// the apriltag frame name is defined in the AprilTagProperties message as "frame_name_fiducial"
  public var transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot {
    get {return _transformsSnapshot ?? Bosdyn_Api_FrameTreeSnapshot()}
    set {_transformsSnapshot = newValue}
  }
  /// Returns true if `transformsSnapshot` has been explicitly set.
  public var hasTransformsSnapshot: Bool {return self._transformsSnapshot != nil}
  /// Clears the value of `transformsSnapshot`. Subsequent reads from it will return its default value.
  public mutating func clearTransformsSnapshot() {self._transformsSnapshot = nil}

  /// The drawable properties describe geometric shapes associated with an object.
  public var drawableProperties: [Bosdyn_Api_DrawableProperties] = []

  /// The apriltag properties describe any fiducial identifying an object.
  public var apriltagProperties: Bosdyn_Api_AprilTagProperties {
    get {return _apriltagProperties ?? Bosdyn_Api_AprilTagProperties()}
    set {_apriltagProperties = newValue}
  }
  /// Returns true if `apriltagProperties` has been explicitly set.
  public var hasApriltagProperties: Bool {return self._apriltagProperties != nil}
  /// Clears the value of `apriltagProperties`. Subsequent reads from it will return its default value.
  public mutating func clearApriltagProperties() {self._apriltagProperties = nil}

  /// The image properties describe any camera and image coordinates associated with an object.
  public var imageProperties: Bosdyn_Api_ImageProperties {
    get {return _imageProperties ?? Bosdyn_Api_ImageProperties()}
    set {_imageProperties = newValue}
  }
  /// Returns true if `imageProperties` has been explicitly set.
  public var hasImageProperties: Bool {return self._imageProperties != nil}
  /// Clears the value of `imageProperties`. Subsequent reads from it will return its default value.
  public mutating func clearImageProperties() {self._imageProperties = nil}

  /// Properties describing a dock
  public var dockProperties: Bosdyn_Api_DockProperties {
    get {return _dockProperties ?? Bosdyn_Api_DockProperties()}
    set {_dockProperties = newValue}
  }
  /// Returns true if `dockProperties` has been explicitly set.
  public var hasDockProperties: Bool {return self._dockProperties != nil}
  /// Clears the value of `dockProperties`. Subsequent reads from it will return its default value.
  public mutating func clearDockProperties() {self._dockProperties = nil}

  /// An extra field for application-specific object properties.
  public var additionalProperties: SwiftProtobuf.Google_Protobuf_Any {
    get {return _additionalProperties ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_additionalProperties = newValue}
  }
  /// Returns true if `additionalProperties` has been explicitly set.
  public var hasAdditionalProperties: Bool {return self._additionalProperties != nil}
  /// Clears the value of `additionalProperties`. Subsequent reads from it will return its default value.
  public mutating func clearAdditionalProperties() {self._additionalProperties = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot? = nil
  fileprivate var _apriltagProperties: Bosdyn_Api_AprilTagProperties? = nil
  fileprivate var _imageProperties: Bosdyn_Api_ImageProperties? = nil
  fileprivate var _dockProperties: Bosdyn_Api_DockProperties? = nil
  fileprivate var _additionalProperties: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// The ListWorldObject request message, which can optionally include filters for the object type or timestamp.
public struct Bosdyn_Api_ListWorldObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Optional filters to apply to the world object request
  /// Specific type of object; can request multiple different properties
  public var objectType: [Bosdyn_Api_WorldObjectType] = []

  /// Timestamp to filter objects based on. The time should be in robot time
  /// All objects with header timestamps after (>) timestamp_filter will be returned
  public var timestampFilter: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestampFilter ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestampFilter = newValue}
  }
  /// Returns true if `timestampFilter` has been explicitly set.
  public var hasTimestampFilter: Bool {return self._timestampFilter != nil}
  /// Clears the value of `timestampFilter`. Subsequent reads from it will return its default value.
  public mutating func clearTimestampFilter() {self._timestampFilter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _timestampFilter: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The ListWorldObject response message, which contains all of the current world objects in the
/// robot's perception scene.
public struct Bosdyn_Api_ListWorldObjectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The currently perceived world objects.
  public var worldObjects: [Bosdyn_Api_WorldObject] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// The MutateWorldObject request message, which specifies the type of mutation and which object
/// the mutation should be applied to.
public struct Bosdyn_Api_MutateWorldObjectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The mutation for this request.
  public var mutation: Bosdyn_Api_MutateWorldObjectRequest.Mutation {
    get {return _mutation ?? Bosdyn_Api_MutateWorldObjectRequest.Mutation()}
    set {_mutation = newValue}
  }
  /// Returns true if `mutation` has been explicitly set.
  public var hasMutation: Bool {return self._mutation != nil}
  /// Clears the value of `mutation`. Subsequent reads from it will return its default value.
  public mutating func clearMutation() {self._mutation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid action.
    case unknown // = 0

    /// Add a new object.
    case add // = 1

    /// Change an existing objected (ID'd by integer ID number). This is
    /// only allowed to change objects added by the API-user, and not
    /// objects detected by Spot's perception system.
    case change // = 2

    /// Delete the object, ID'd by integer ID number. This is
    /// only allowed to change objects added by the API-user, and not
    /// objects detected by Spot's perception system.
    case delete // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .add
      case 2: self = .change
      case 3: self = .delete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .add: return 1
      case .change: return 2
      case .delete: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Mutation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The action (add, change, or delete) to be applied to a world object.
    public var action: Bosdyn_Api_MutateWorldObjectRequest.Action = .unknown

    /// World object to be mutated.
    /// If an object is being changed/deleted, then the world object id must match a world
    /// object id known by the service.
    public var object: Bosdyn_Api_WorldObject {
      get {return _object ?? Bosdyn_Api_WorldObject()}
      set {_object = newValue}
    }
    /// Returns true if `object` has been explicitly set.
    public var hasObject: Bool {return self._object != nil}
    /// Clears the value of `object`. Subsequent reads from it will return its default value.
    public mutating func clearObject() {self._object = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _object: Bosdyn_Api_WorldObject? = nil
  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _mutation: Bosdyn_Api_MutateWorldObjectRequest.Mutation? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_MutateWorldObjectRequest.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_MutateWorldObjectRequest.Action] = [
    .unknown,
    .add,
    .change,
    .delete,
  ]
}

#endif  // swift(>=4.2)

/// The MutateWorldObject response message, which includes the world object id for the object that
/// the mutation was applied to if the request succeeds.
public struct Bosdyn_Api_MutateWorldObjectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_MutateWorldObjectResponse.Status = .unknown

  /// ID set by the world object service for the mutated object
  public var mutatedObjectID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Status of request is unknown. Check the status code of the response header.
    case unknown // = 0

    /// Request was accepted; GetObjectListResponse must still be checked to verify the changes.
    case ok // = 1

    /// The mutation object's ID is unknown such that the service could not recognize this object.
    /// This error applies to the CHANGE and DELETE actions, since it must identify the object by
    /// it's id number given by the service.
    case invalidMutationID // = 2

    /// The mutation request is not allowed because it is attempting to change or delete an object
    /// detected by Spot's perception system.
    case noPermission // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidMutationID
      case 3: self = .noPermission
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidMutationID: return 2
      case .noPermission: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_MutateWorldObjectResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_MutateWorldObjectResponse.Status] = [
    .unknown,
    .ok,
    .invalidMutationID,
    .noPermission,
  ]
}

#endif  // swift(>=4.2)

///  World object properties describing image coordinates associated with an object.
public struct Bosdyn_Api_ImageProperties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Camera Source of such as "back", "frontleft", etc.
  public var cameraSource: String = String()

  /// Image Coordinates (pixels of x[row], y[col]) in either clockwise/counter clockwise order
  public var coordinates: Bosdyn_Api_Polygon {
    get {return _coordinates ?? Bosdyn_Api_Polygon()}
    set {_coordinates = newValue}
  }
  /// Returns true if `coordinates` has been explicitly set.
  public var hasCoordinates: Bool {return self._coordinates != nil}
  /// Clears the value of `coordinates`. Subsequent reads from it will return its default value.
  public mutating func clearCoordinates() {self._coordinates = nil}

  /// Frame name for the object described by image coordinates.
  public var frameNameImageCoordinates: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _coordinates: Bosdyn_Api_Polygon? = nil
}

/// World object properties describing a dock
public struct Bosdyn_Api_DockProperties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Consistent id associated with a given dock.
  public var dockID: UInt32 = 0

  /// Type of dock.
  public var type: Bosdyn_Api_Docking_DockType = .unknown

  /// The frame name for the location of dock origin. This will be included in the transform snapshot.
  public var frameNameDock: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///  World object properties describing a fiducial object.
public struct Bosdyn_Api_AprilTagProperties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Consistent integer id associated with a given apriltag. April Tag detections will be from the
  /// tag family 36h11.
  public var tagID: Int32 = 0

  /// Apriltag size in meters, where x is the row/width length and y is the
  /// height/col length of the tag
  public var dimensions: Bosdyn_Api_Vec2 {
    get {return _dimensions ?? Bosdyn_Api_Vec2()}
    set {_dimensions = newValue}
  }
  /// Returns true if `dimensions` has been explicitly set.
  public var hasDimensions: Bool {return self._dimensions != nil}
  /// Clears the value of `dimensions`. Subsequent reads from it will return its default value.
  public mutating func clearDimensions() {self._dimensions = nil}

  /// The frame name for the raw version of this fiducial. This will be included in the transform snapshot.
  public var frameNameFiducial: String = String()

  /// Status of the pose estimation of the unfiltered fiducial frame.
  public var fiducialPoseStatus: Bosdyn_Api_AprilTagProperties.AprilTagPoseStatus = .statusUnknown

  /// The frame name for the filtered version of this fiducial. This will be included in the transform snapshot.
  public var frameNameFiducialFiltered: String = String()

  /// Status of the pose estimation of the filtered fiducial frame.
  public var fiducialFilteredPoseStatus: Bosdyn_Api_AprilTagProperties.AprilTagPoseStatus = .statusUnknown

  /// The frame name for the camera that detected this fiducial.
  public var frameNameCamera: String = String()

  /// A 6 x 6 Covariance matrix representing the marginal uncertainty of the last detection.
  /// The rows/columns are:
  /// rx, ry, rz, tx, ty, tz
  /// which represent incremental rotation and translation along the x, y, and z axes of the
  /// given frame, respectively.
  /// This is computed using the Jacobian of the pose estimation algorithm.
  public var detectionCovariance: Bosdyn_Api_SE3Covariance {
    get {return _detectionCovariance ?? Bosdyn_Api_SE3Covariance()}
    set {_detectionCovariance = newValue}
  }
  /// Returns true if `detectionCovariance` has been explicitly set.
  public var hasDetectionCovariance: Bool {return self._detectionCovariance != nil}
  /// Clears the value of `detectionCovariance`. Subsequent reads from it will return its default value.
  public mutating func clearDetectionCovariance() {self._detectionCovariance = nil}

  /// The frame that the detection covariance is expressed in.
  public var detectionCovarianceReferenceFrame: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AprilTagPoseStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case statusUnknown // = 0

    /// No known issues with the pose estimate.
    case statusOk // = 1

    /// The orientation of the tag is ambiguous.
    case statusAmbiguous // = 2

    /// The pose may be unreliable due to high reprojection error.
    case statusHighError // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .statusUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .statusUnknown
      case 1: self = .statusOk
      case 2: self = .statusAmbiguous
      case 3: self = .statusHighError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .statusUnknown: return 0
      case .statusOk: return 1
      case .statusAmbiguous: return 2
      case .statusHighError: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _dimensions: Bosdyn_Api_Vec2? = nil
  fileprivate var _detectionCovariance: Bosdyn_Api_SE3Covariance? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_AprilTagProperties.AprilTagPoseStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_AprilTagProperties.AprilTagPoseStatus] = [
    .statusUnknown,
    .statusOk,
    .statusAmbiguous,
    .statusHighError,
  ]
}

#endif  // swift(>=4.2)

/// The drawing and visualization information for a world object.
public struct Bosdyn_Api_DrawableProperties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Color of the object.
  public var color: Bosdyn_Api_DrawableProperties.Color {
    get {return _color ?? Bosdyn_Api_DrawableProperties.Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {self._color = nil}

  /// Label to be drawn at the origin of the object.
  public var label: String = String()

  /// Drawn objects in wireframe.
  public var wireframe: Bool = false

  /// The object to draw, e.g. a Sphere.
  public var drawable: Bosdyn_Api_DrawableProperties.OneOf_Drawable? = nil

  /// A drawable frame (oneof drawable field).
  public var frame: Bosdyn_Api_DrawableFrame {
    get {
      if case .frame(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableFrame()
    }
    set {drawable = .frame(newValue)}
  }

  /// A drawable sphere (oneof drawable field).
  public var sphere: Bosdyn_Api_DrawableSphere {
    get {
      if case .sphere(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableSphere()
    }
    set {drawable = .sphere(newValue)}
  }

  /// A drawable box (oneof drawable field).
  public var box: Bosdyn_Api_DrawableBox {
    get {
      if case .box(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableBox()
    }
    set {drawable = .box(newValue)}
  }

  /// A drawable arrow (oneof drawable field).
  public var arrow: Bosdyn_Api_DrawableArrow {
    get {
      if case .arrow(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableArrow()
    }
    set {drawable = .arrow(newValue)}
  }

  /// A drawable capsule (oneof drawable field).
  public var capsule: Bosdyn_Api_DrawableCapsule {
    get {
      if case .capsule(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableCapsule()
    }
    set {drawable = .capsule(newValue)}
  }

  /// A drawable cylinder (oneof drawable field).
  public var cylinder: Bosdyn_Api_DrawableCylinder {
    get {
      if case .cylinder(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableCylinder()
    }
    set {drawable = .cylinder(newValue)}
  }

  /// A drawable linestrip (oneof drawable field).
  public var linestrip: Bosdyn_Api_DrawableLineStrip {
    get {
      if case .linestrip(let v)? = drawable {return v}
      return Bosdyn_Api_DrawableLineStrip()
    }
    set {drawable = .linestrip(newValue)}
  }

  /// A drawable set of points (oneof drawable field).
  public var points: Bosdyn_Api_DrawablePoints {
    get {
      if case .points(let v)? = drawable {return v}
      return Bosdyn_Api_DrawablePoints()
    }
    set {drawable = .points(newValue)}
  }

  /// The frame name for the drawable object. This will optionally be
  /// included in the frame tree snapshot.
  public var frameNameDrawable: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The object to draw, e.g. a Sphere.
  public enum OneOf_Drawable: Equatable {
    /// A drawable frame (oneof drawable field).
    case frame(Bosdyn_Api_DrawableFrame)
    /// A drawable sphere (oneof drawable field).
    case sphere(Bosdyn_Api_DrawableSphere)
    /// A drawable box (oneof drawable field).
    case box(Bosdyn_Api_DrawableBox)
    /// A drawable arrow (oneof drawable field).
    case arrow(Bosdyn_Api_DrawableArrow)
    /// A drawable capsule (oneof drawable field).
    case capsule(Bosdyn_Api_DrawableCapsule)
    /// A drawable cylinder (oneof drawable field).
    case cylinder(Bosdyn_Api_DrawableCylinder)
    /// A drawable linestrip (oneof drawable field).
    case linestrip(Bosdyn_Api_DrawableLineStrip)
    /// A drawable set of points (oneof drawable field).
    case points(Bosdyn_Api_DrawablePoints)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_DrawableProperties.OneOf_Drawable, rhs: Bosdyn_Api_DrawableProperties.OneOf_Drawable) -> Bool {
      switch (lhs, rhs) {
      case (.frame(let l), .frame(let r)): return l == r
      case (.sphere(let l), .sphere(let r)): return l == r
      case (.box(let l), .box(let r)): return l == r
      case (.arrow(let l), .arrow(let r)): return l == r
      case (.capsule(let l), .capsule(let r)): return l == r
      case (.cylinder(let l), .cylinder(let r)): return l == r
      case (.linestrip(let l), .linestrip(let r)): return l == r
      case (.points(let l), .points(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// RGBA values for color ranging from [0,255] for R/G/B, and [0,1] for A.
  public struct Color {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Red value ranging from [0,255].
    public var r: Int32 = 0

    //// Green value ranging from [0,255].
    public var g: Int32 = 0

    /// Blue value ranging from [0,255].
    public var b: Int32 = 0

    /// Alpha (transparancy) value ranging from [0,1].
    public var a: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _color: Bosdyn_Api_DrawableProperties.Color? = nil
}

/// A coordinate frame drawing object, describing how large to render the arrows.
public struct Bosdyn_Api_DrawableFrame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var arrowLength: Double = 0

  public var arrowRadius: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A sphere drawing object.
public struct Bosdyn_Api_DrawableSphere {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var radius: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A three dimensional box drawing object.
public struct Bosdyn_Api_DrawableBox {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var size: Bosdyn_Api_Vec3 {
    get {return _size ?? Bosdyn_Api_Vec3()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _size: Bosdyn_Api_Vec3? = nil
}

/// A directed arrow drawing object.
public struct Bosdyn_Api_DrawableArrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var direction: Bosdyn_Api_Vec3 {
    get {return _direction ?? Bosdyn_Api_Vec3()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  public var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  public mutating func clearDirection() {self._direction = nil}

  public var radius: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _direction: Bosdyn_Api_Vec3? = nil
}

/// A oval-like capsule drawing object.
public struct Bosdyn_Api_DrawableCapsule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var direction: Bosdyn_Api_Vec3 {
    get {return _direction ?? Bosdyn_Api_Vec3()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  public var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  public mutating func clearDirection() {self._direction = nil}

  public var radius: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _direction: Bosdyn_Api_Vec3? = nil
}

/// A cylinder drawing object.
public struct Bosdyn_Api_DrawableCylinder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var direction: Bosdyn_Api_Vec3 {
    get {return _direction ?? Bosdyn_Api_Vec3()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  public var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  public mutating func clearDirection() {self._direction = nil}

  public var radius: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _direction: Bosdyn_Api_Vec3? = nil
}

/// A line strip drawing object.
public struct Bosdyn_Api_DrawableLineStrip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var points: Bosdyn_Api_Vec3 {
    get {return _points ?? Bosdyn_Api_Vec3()}
    set {_points = newValue}
  }
  /// Returns true if `points` has been explicitly set.
  public var hasPoints: Bool {return self._points != nil}
  /// Clears the value of `points`. Subsequent reads from it will return its default value.
  public mutating func clearPoints() {self._points = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _points: Bosdyn_Api_Vec3? = nil
}

/// A set of points drawing object.
public struct Bosdyn_Api_DrawablePoints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var points: [Bosdyn_Api_Vec3] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_WorldObjectType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORLD_OBJECT_UNKNOWN"),
    1: .same(proto: "WORLD_OBJECT_DRAWABLE"),
    2: .same(proto: "WORLD_OBJECT_APRILTAG"),
    5: .same(proto: "WORLD_OBJECT_IMAGE_COORDINATES"),
    6: .same(proto: "WORLD_OBJECT_DOCK"),
  ]
}

extension Bosdyn_Api_WorldObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorldObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    30: .standard(proto: "acquisition_time"),
    31: .standard(proto: "transforms_snapshot"),
    5: .standard(proto: "drawable_properties"),
    6: .standard(proto: "apriltag_properties"),
    9: .standard(proto: "image_properties"),
    10: .standard(proto: "dock_properties"),
    100: .standard(proto: "additional_properties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.drawableProperties)
      case 6: try decoder.decodeSingularMessageField(value: &self._apriltagProperties)
      case 9: try decoder.decodeSingularMessageField(value: &self._imageProperties)
      case 10: try decoder.decodeSingularMessageField(value: &self._dockProperties)
      case 30: try decoder.decodeSingularMessageField(value: &self._acquisitionTime)
      case 31: try decoder.decodeSingularMessageField(value: &self._transformsSnapshot)
      case 100: try decoder.decodeSingularMessageField(value: &self._additionalProperties)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.drawableProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawableProperties, fieldNumber: 5)
    }
    if let v = self._apriltagProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._imageProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._dockProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._acquisitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }
    if let v = self._transformsSnapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    }
    if let v = self._additionalProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_WorldObject, rhs: Bosdyn_Api_WorldObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._acquisitionTime != rhs._acquisitionTime {return false}
    if lhs._transformsSnapshot != rhs._transformsSnapshot {return false}
    if lhs.drawableProperties != rhs.drawableProperties {return false}
    if lhs._apriltagProperties != rhs._apriltagProperties {return false}
    if lhs._imageProperties != rhs._imageProperties {return false}
    if lhs._dockProperties != rhs._dockProperties {return false}
    if lhs._additionalProperties != rhs._additionalProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListWorldObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListWorldObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "object_type"),
    3: .standard(proto: "timestamp_filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.objectType)
      case 3: try decoder.decodeSingularMessageField(value: &self._timestampFilter)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.objectType.isEmpty {
      try visitor.visitPackedEnumField(value: self.objectType, fieldNumber: 2)
    }
    if let v = self._timestampFilter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListWorldObjectRequest, rhs: Bosdyn_Api_ListWorldObjectRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.objectType != rhs.objectType {return false}
    if lhs._timestampFilter != rhs._timestampFilter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListWorldObjectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListWorldObjectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "world_objects"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.worldObjects)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.worldObjects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.worldObjects, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListWorldObjectResponse, rhs: Bosdyn_Api_ListWorldObjectResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.worldObjects != rhs.worldObjects {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MutateWorldObjectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutateWorldObjectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "mutation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._mutation)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._mutation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MutateWorldObjectRequest, rhs: Bosdyn_Api_MutateWorldObjectRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._mutation != rhs._mutation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MutateWorldObjectRequest.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACTION_UNKNOWN"),
    1: .same(proto: "ACTION_ADD"),
    2: .same(proto: "ACTION_CHANGE"),
    3: .same(proto: "ACTION_DELETE"),
  ]
}

extension Bosdyn_Api_MutateWorldObjectRequest.Mutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_MutateWorldObjectRequest.protoMessageName + ".Mutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.action)
      case 2: try decoder.decodeSingularMessageField(value: &self._object)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .unknown {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if let v = self._object {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MutateWorldObjectRequest.Mutation, rhs: Bosdyn_Api_MutateWorldObjectRequest.Mutation) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs._object != rhs._object {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MutateWorldObjectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutateWorldObjectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    4: .standard(proto: "mutated_object_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularInt32Field(value: &self.mutatedObjectID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.mutatedObjectID != 0 {
      try visitor.visitSingularInt32Field(value: self.mutatedObjectID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MutateWorldObjectResponse, rhs: Bosdyn_Api_MutateWorldObjectResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.mutatedObjectID != rhs.mutatedObjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MutateWorldObjectResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_MUTATION_ID"),
    3: .same(proto: "STATUS_NO_PERMISSION"),
  ]
}

extension Bosdyn_Api_ImageProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_source"),
    2: .same(proto: "coordinates"),
    3: .standard(proto: "frame_name_image_coordinates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cameraSource)
      case 2: try decoder.decodeSingularMessageField(value: &self._coordinates)
      case 3: try decoder.decodeSingularStringField(value: &self.frameNameImageCoordinates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cameraSource.isEmpty {
      try visitor.visitSingularStringField(value: self.cameraSource, fieldNumber: 1)
    }
    if let v = self._coordinates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.frameNameImageCoordinates.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameImageCoordinates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageProperties, rhs: Bosdyn_Api_ImageProperties) -> Bool {
    if lhs.cameraSource != rhs.cameraSource {return false}
    if lhs._coordinates != rhs._coordinates {return false}
    if lhs.frameNameImageCoordinates != rhs.frameNameImageCoordinates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DockProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DockProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dock_id"),
    2: .same(proto: "type"),
    3: .standard(proto: "frame_name_dock"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.dockID)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.frameNameDock)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dockID != 0 {
      try visitor.visitSingularUInt32Field(value: self.dockID, fieldNumber: 1)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.frameNameDock.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameDock, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DockProperties, rhs: Bosdyn_Api_DockProperties) -> Bool {
    if lhs.dockID != rhs.dockID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.frameNameDock != rhs.frameNameDock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AprilTagProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AprilTagProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tag_id"),
    2: .same(proto: "dimensions"),
    3: .standard(proto: "frame_name_fiducial"),
    8: .standard(proto: "fiducial_pose_status"),
    4: .standard(proto: "frame_name_fiducial_filtered"),
    9: .standard(proto: "fiducial_filtered_pose_status"),
    7: .standard(proto: "frame_name_camera"),
    5: .standard(proto: "detection_covariance"),
    6: .standard(proto: "detection_covariance_reference_frame"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.tagID)
      case 2: try decoder.decodeSingularMessageField(value: &self._dimensions)
      case 3: try decoder.decodeSingularStringField(value: &self.frameNameFiducial)
      case 4: try decoder.decodeSingularStringField(value: &self.frameNameFiducialFiltered)
      case 5: try decoder.decodeSingularMessageField(value: &self._detectionCovariance)
      case 6: try decoder.decodeSingularStringField(value: &self.detectionCovarianceReferenceFrame)
      case 7: try decoder.decodeSingularStringField(value: &self.frameNameCamera)
      case 8: try decoder.decodeSingularEnumField(value: &self.fiducialPoseStatus)
      case 9: try decoder.decodeSingularEnumField(value: &self.fiducialFilteredPoseStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tagID != 0 {
      try visitor.visitSingularInt32Field(value: self.tagID, fieldNumber: 1)
    }
    if let v = self._dimensions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.frameNameFiducial.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameFiducial, fieldNumber: 3)
    }
    if !self.frameNameFiducialFiltered.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameFiducialFiltered, fieldNumber: 4)
    }
    if let v = self._detectionCovariance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.detectionCovarianceReferenceFrame.isEmpty {
      try visitor.visitSingularStringField(value: self.detectionCovarianceReferenceFrame, fieldNumber: 6)
    }
    if !self.frameNameCamera.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameCamera, fieldNumber: 7)
    }
    if self.fiducialPoseStatus != .statusUnknown {
      try visitor.visitSingularEnumField(value: self.fiducialPoseStatus, fieldNumber: 8)
    }
    if self.fiducialFilteredPoseStatus != .statusUnknown {
      try visitor.visitSingularEnumField(value: self.fiducialFilteredPoseStatus, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AprilTagProperties, rhs: Bosdyn_Api_AprilTagProperties) -> Bool {
    if lhs.tagID != rhs.tagID {return false}
    if lhs._dimensions != rhs._dimensions {return false}
    if lhs.frameNameFiducial != rhs.frameNameFiducial {return false}
    if lhs.fiducialPoseStatus != rhs.fiducialPoseStatus {return false}
    if lhs.frameNameFiducialFiltered != rhs.frameNameFiducialFiltered {return false}
    if lhs.fiducialFilteredPoseStatus != rhs.fiducialFilteredPoseStatus {return false}
    if lhs.frameNameCamera != rhs.frameNameCamera {return false}
    if lhs._detectionCovariance != rhs._detectionCovariance {return false}
    if lhs.detectionCovarianceReferenceFrame != rhs.detectionCovarianceReferenceFrame {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AprilTagProperties.AprilTagPoseStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_AMBIGUOUS"),
    3: .same(proto: "STATUS_HIGH_ERROR"),
  ]
}

extension Bosdyn_Api_DrawableProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "label"),
    3: .same(proto: "wireframe"),
    4: .same(proto: "frame"),
    5: .same(proto: "sphere"),
    6: .same(proto: "box"),
    7: .same(proto: "arrow"),
    8: .same(proto: "capsule"),
    9: .same(proto: "cylinder"),
    10: .same(proto: "linestrip"),
    11: .same(proto: "points"),
    12: .standard(proto: "frame_name_drawable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._color)
      case 2: try decoder.decodeSingularStringField(value: &self.label)
      case 3: try decoder.decodeSingularBoolField(value: &self.wireframe)
      case 4:
        var v: Bosdyn_Api_DrawableFrame?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .frame(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .frame(v)}
      case 5:
        var v: Bosdyn_Api_DrawableSphere?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .sphere(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .sphere(v)}
      case 6:
        var v: Bosdyn_Api_DrawableBox?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .box(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .box(v)}
      case 7:
        var v: Bosdyn_Api_DrawableArrow?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .arrow(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .arrow(v)}
      case 8:
        var v: Bosdyn_Api_DrawableCapsule?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .capsule(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .capsule(v)}
      case 9:
        var v: Bosdyn_Api_DrawableCylinder?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .cylinder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .cylinder(v)}
      case 10:
        var v: Bosdyn_Api_DrawableLineStrip?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .linestrip(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .linestrip(v)}
      case 11:
        var v: Bosdyn_Api_DrawablePoints?
        if let current = self.drawable {
          try decoder.handleConflictingOneOf()
          if case .points(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.drawable = .points(v)}
      case 12: try decoder.decodeSingularStringField(value: &self.frameNameDrawable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 2)
    }
    if self.wireframe != false {
      try visitor.visitSingularBoolField(value: self.wireframe, fieldNumber: 3)
    }
    switch self.drawable {
    case .frame(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .sphere(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .box(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .arrow(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case .capsule(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    case .cylinder(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    case .linestrip(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .points(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case nil: break
    }
    if !self.frameNameDrawable.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameDrawable, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableProperties, rhs: Bosdyn_Api_DrawableProperties) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs.label != rhs.label {return false}
    if lhs.wireframe != rhs.wireframe {return false}
    if lhs.drawable != rhs.drawable {return false}
    if lhs.frameNameDrawable != rhs.frameNameDrawable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableProperties.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_DrawableProperties.protoMessageName + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r"),
    2: .same(proto: "g"),
    3: .same(proto: "b"),
    4: .same(proto: "a"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.r)
      case 2: try decoder.decodeSingularInt32Field(value: &self.g)
      case 3: try decoder.decodeSingularInt32Field(value: &self.b)
      case 4: try decoder.decodeSingularDoubleField(value: &self.a)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.r != 0 {
      try visitor.visitSingularInt32Field(value: self.r, fieldNumber: 1)
    }
    if self.g != 0 {
      try visitor.visitSingularInt32Field(value: self.g, fieldNumber: 2)
    }
    if self.b != 0 {
      try visitor.visitSingularInt32Field(value: self.b, fieldNumber: 3)
    }
    if self.a != 0 {
      try visitor.visitSingularDoubleField(value: self.a, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableProperties.Color, rhs: Bosdyn_Api_DrawableProperties.Color) -> Bool {
    if lhs.r != rhs.r {return false}
    if lhs.g != rhs.g {return false}
    if lhs.b != rhs.b {return false}
    if lhs.a != rhs.a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableFrame"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "arrow_length"),
    2: .standard(proto: "arrow_radius"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.arrowLength)
      case 2: try decoder.decodeSingularDoubleField(value: &self.arrowRadius)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.arrowLength != 0 {
      try visitor.visitSingularDoubleField(value: self.arrowLength, fieldNumber: 1)
    }
    if self.arrowRadius != 0 {
      try visitor.visitSingularDoubleField(value: self.arrowRadius, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableFrame, rhs: Bosdyn_Api_DrawableFrame) -> Bool {
    if lhs.arrowLength != rhs.arrowLength {return false}
    if lhs.arrowRadius != rhs.arrowRadius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableSphere: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableSphere"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "radius"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.radius)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.radius != 0 {
      try visitor.visitSingularDoubleField(value: self.radius, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableSphere, rhs: Bosdyn_Api_DrawableSphere) -> Bool {
    if lhs.radius != rhs.radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableBox"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._size)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableBox, rhs: Bosdyn_Api_DrawableBox) -> Bool {
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableArrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableArrow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "radius"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._direction)
      case 2: try decoder.decodeSingularDoubleField(value: &self.radius)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.radius != 0 {
      try visitor.visitSingularDoubleField(value: self.radius, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableArrow, rhs: Bosdyn_Api_DrawableArrow) -> Bool {
    if lhs._direction != rhs._direction {return false}
    if lhs.radius != rhs.radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableCapsule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableCapsule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "radius"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._direction)
      case 2: try decoder.decodeSingularDoubleField(value: &self.radius)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.radius != 0 {
      try visitor.visitSingularDoubleField(value: self.radius, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableCapsule, rhs: Bosdyn_Api_DrawableCapsule) -> Bool {
    if lhs._direction != rhs._direction {return false}
    if lhs.radius != rhs.radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableCylinder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableCylinder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "radius"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._direction)
      case 2: try decoder.decodeSingularDoubleField(value: &self.radius)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.radius != 0 {
      try visitor.visitSingularDoubleField(value: self.radius, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableCylinder, rhs: Bosdyn_Api_DrawableCylinder) -> Bool {
    if lhs._direction != rhs._direction {return false}
    if lhs.radius != rhs.radius {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawableLineStrip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawableLineStrip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._points)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._points {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawableLineStrip, rhs: Bosdyn_Api_DrawableLineStrip) -> Bool {
    if lhs._points != rhs._points {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DrawablePoints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DrawablePoints"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.points)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.points.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DrawablePoints, rhs: Bosdyn_Api_DrawablePoints) -> Bool {
    if lhs.points != rhs.points {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
