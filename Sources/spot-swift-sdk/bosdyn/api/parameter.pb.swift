// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/parameter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A generic parameter message used by the robot state service to describe different,
/// parameterized aspects of the robot.
public struct Bosdyn_Api_Parameter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of parameter.
  public var label: String = String()

  /// Units of parameter value.
  public var units: String = String()

  public var values: Bosdyn_Api_Parameter.OneOf_Values? = nil

  /// Value of a countable measure.
  public var intValue: Int64 {
    get {
      if case .intValue(let v)? = values {return v}
      return 0
    }
    set {values = .intValue(newValue)}
  }

  /// Value of a continuous measure.
  public var floatValue: Double {
    get {
      if case .floatValue(let v)? = values {return v}
      return 0
    }
    set {values = .floatValue(newValue)}
  }

  /// A point in time.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .timestamp(let v)? = values {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {values = .timestamp(newValue)}
  }

  /// A time duration.
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {
      if case .duration(let v)? = values {return v}
      return SwiftProtobuf.Google_Protobuf_Duration()
    }
    set {values = .duration(newValue)}
  }

  /// Value as a string.
  public var stringValue: String {
    get {
      if case .stringValue(let v)? = values {return v}
      return String()
    }
    set {values = .stringValue(newValue)}
  }

  /// Value as true/false.
  public var boolValue: Bool {
    get {
      if case .boolValue(let v)? = values {return v}
      return false
    }
    set {values = .boolValue(newValue)}
  }

  /// Description of the parameter or its value.
  public var notes: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Values: Equatable {
    /// Value of a countable measure.
    case intValue(Int64)
    /// Value of a continuous measure.
    case floatValue(Double)
    /// A point in time.
    case timestamp(SwiftProtobuf.Google_Protobuf_Timestamp)
    /// A time duration.
    case duration(SwiftProtobuf.Google_Protobuf_Duration)
    /// Value as a string.
    case stringValue(String)
    /// Value as true/false.
    case boolValue(Bool)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_Parameter.OneOf_Values, rhs: Bosdyn_Api_Parameter.OneOf_Values) -> Bool {
      switch (lhs, rhs) {
      case (.intValue(let l), .intValue(let r)): return l == r
      case (.floatValue(let l), .floatValue(let r)): return l == r
      case (.timestamp(let l), .timestamp(let r)): return l == r
      case (.duration(let l), .duration(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_Parameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Parameter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "units"),
    3: .standard(proto: "int_value"),
    4: .standard(proto: "float_value"),
    5: .same(proto: "timestamp"),
    6: .same(proto: "duration"),
    7: .standard(proto: "string_value"),
    8: .standard(proto: "bool_value"),
    9: .same(proto: "notes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      case 2: try decoder.decodeSingularStringField(value: &self.units)
      case 3:
        if self.values != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.values = .intValue(v)}
      case 4:
        if self.values != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.values = .floatValue(v)}
      case 5:
        var v: SwiftProtobuf.Google_Protobuf_Timestamp?
        if let current = self.values {
          try decoder.handleConflictingOneOf()
          if case .timestamp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.values = .timestamp(v)}
      case 6:
        var v: SwiftProtobuf.Google_Protobuf_Duration?
        if let current = self.values {
          try decoder.handleConflictingOneOf()
          if case .duration(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.values = .duration(v)}
      case 7:
        if self.values != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.values = .stringValue(v)}
      case 8:
        if self.values != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.values = .boolValue(v)}
      case 9: try decoder.decodeSingularStringField(value: &self.notes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.units.isEmpty {
      try visitor.visitSingularStringField(value: self.units, fieldNumber: 2)
    }
    switch self.values {
    case .intValue(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    case .floatValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    case .timestamp(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .duration(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .stringValue(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    case .boolValue(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    case nil: break
    }
    if !self.notes.isEmpty {
      try visitor.visitSingularStringField(value: self.notes, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Parameter, rhs: Bosdyn_Api_Parameter) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.units != rhs.units {return false}
    if lhs.values != rhs.values {return false}
    if lhs.notes != rhs.notes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
