// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/network_compute_bridge.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Bosdyn_Api_NetworkComputeStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Status is not specified.
  case unknown // = 0

  /// Succeeded.
  case success // = 1

  /// External service not found in the robot's directory.
  case externalServiceNotFound // = 2

  /// The call to the external server did not succeed.
  case externalServerError // = 3

  /// The robot failed to rotate the image as requested.
  case rotationError // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .success
    case 2: self = .externalServiceNotFound
    case 3: self = .externalServerError
    case 4: self = .rotationError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .success: return 1
    case .externalServiceNotFound: return 2
    case .externalServerError: return 3
    case .rotationError: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_NetworkComputeStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_NetworkComputeStatus] = [
    .unknown,
    .success,
    .externalServiceNotFound,
    .externalServerError,
    .rotationError,
  ]
}

#endif  // swift(>=4.2)

public enum Bosdyn_Api_ListAvailableModelsStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Status is not specified.
  case unknown // = 0

  /// Succeeded.
  case success // = 1

  /// External service not found in the robot's directory.
  case externalServiceNotFound // = 2

  /// The call to the external server did not succeed.
  case externalServerError // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .success
    case 2: self = .externalServiceNotFound
    case 3: self = .externalServerError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .success: return 1
    case .externalServiceNotFound: return 2
    case .externalServerError: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_ListAvailableModelsStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ListAvailableModelsStatus] = [
    .unknown,
    .success,
    .externalServiceNotFound,
    .externalServerError,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_ListAvailableModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Configuration about which server to use.
  public var serverConfig: Bosdyn_Api_NetworkComputeServerConfiguration {
    get {return _serverConfig ?? Bosdyn_Api_NetworkComputeServerConfiguration()}
    set {_serverConfig = newValue}
  }
  /// Returns true if `serverConfig` has been explicitly set.
  public var hasServerConfig: Bool {return self._serverConfig != nil}
  /// Clears the value of `serverConfig`. Subsequent reads from it will return its default value.
  public mutating func clearServerConfig() {self._serverConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _serverConfig: Bosdyn_Api_NetworkComputeServerConfiguration? = nil
}

public struct Bosdyn_Api_ListAvailableModelsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Provide list of available models
  public var availableModels: [String] = []

  /// Command status
  public var status: Bosdyn_Api_ListAvailableModelsStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

public struct Bosdyn_Api_NetworkComputeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Input data.
  public var inputData: Bosdyn_Api_NetworkComputeInputData {
    get {return _inputData ?? Bosdyn_Api_NetworkComputeInputData()}
    set {_inputData = newValue}
  }
  /// Returns true if `inputData` has been explicitly set.
  public var hasInputData: Bool {return self._inputData != nil}
  /// Clears the value of `inputData`. Subsequent reads from it will return its default value.
  public mutating func clearInputData() {self._inputData = nil}

  /// Configuration about which server to use.
  public var serverConfig: Bosdyn_Api_NetworkComputeServerConfiguration {
    get {return _serverConfig ?? Bosdyn_Api_NetworkComputeServerConfiguration()}
    set {_serverConfig = newValue}
  }
  /// Returns true if `serverConfig` has been explicitly set.
  public var hasServerConfig: Bool {return self._serverConfig != nil}
  /// Clears the value of `serverConfig`. Subsequent reads from it will return its default value.
  public mutating func clearServerConfig() {self._serverConfig = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _inputData: Bosdyn_Api_NetworkComputeInputData? = nil
  fileprivate var _serverConfig: Bosdyn_Api_NetworkComputeServerConfiguration? = nil
}

public struct Bosdyn_Api_ImageSourceAndService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Image source.
  public var imageSource: String = String()

  /// Image service.  If blank, it is assumed to be the robot's default image service.
  public var imageService: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bosdyn_Api_NetworkComputeInputData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var input: Bosdyn_Api_NetworkComputeInputData.OneOf_Input? = nil

  /// Image source to collect an image from.
  public var imageSourceAndService: Bosdyn_Api_ImageSourceAndService {
    get {
      if case .imageSourceAndService(let v)? = input {return v}
      return Bosdyn_Api_ImageSourceAndService()
    }
    set {input = .imageSourceAndService(newValue)}
  }

  /// Image to process, if you are not using an image source.
  public var image: Bosdyn_Api_Image {
    get {
      if case .image(let v)? = input {return v}
      return Bosdyn_Api_Image()
    }
    set {input = .image(newValue)}
  }

  /// Other data that isn't an image.  NetworkComputeBridge service will pass it through
  /// to the remote server so you can do computation on arbitrary data.
  public var otherData: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .otherData(let v)? = input {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {input = .otherData(newValue)}
  }

  /// Name of the model to be run on the input data.
  public var modelName: String = String()

  /// Minimum confidence [0.0 - 1.0] an object must have to be returned. Detections below this
  /// confidence threshold will be suppressed in the response.
  public var minConfidence: Float = 0

  /// Options for rotating the image before processing. When unset, no rotation is applied.
  /// Rotation is supported for data from image services that provide a FrameTreeSnapshot
  /// defining the sensor's frame with respect to Spot's body and vision frames.
  /// Field is ignored for non-image input.
  public var rotateImage: Bosdyn_Api_NetworkComputeInputData.RotateImage = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Input: Equatable {
    /// Image source to collect an image from.
    case imageSourceAndService(Bosdyn_Api_ImageSourceAndService)
    /// Image to process, if you are not using an image source.
    case image(Bosdyn_Api_Image)
    /// Other data that isn't an image.  NetworkComputeBridge service will pass it through
    /// to the remote server so you can do computation on arbitrary data.
    case otherData(SwiftProtobuf.Google_Protobuf_Any)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_NetworkComputeInputData.OneOf_Input, rhs: Bosdyn_Api_NetworkComputeInputData.OneOf_Input) -> Bool {
      switch (lhs, rhs) {
      case (.imageSourceAndService(let l), .imageSourceAndService(let r)): return l == r
      case (.image(let l), .image(let r)): return l == r
      case (.otherData(let l), .otherData(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public enum RotateImage: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified rotation method. Do not use.
    case unknown // = 0

    /// No rotation applied.
    case noRotation // = 3

    /// Rotate the images so the horizon is not rolled with respect to gravity.
    case alignHorizontal // = 1

    /// Rotate the images so that the horizon in the image is aligned with the inclination of
    /// the body. For example, when applied to the left body camera this option rotates the image
    /// so that the world does not appear upside down when the robot is standing upright, but if the
    /// body is pitched up, the image will appear rotated.
    case alignWithBody // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .alignHorizontal
      case 2: self = .alignWithBody
      case 3: self = .noRotation
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .alignHorizontal: return 1
      case .alignWithBody: return 2
      case .noRotation: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_NetworkComputeInputData.RotateImage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_NetworkComputeInputData.RotateImage] = [
    .unknown,
    .noRotation,
    .alignHorizontal,
    .alignWithBody,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_NetworkComputeServerConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Service name in the robot's Directory for the worker that will process the request.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bosdyn_Api_NetworkComputeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Detection information. May include bounding boxes, image coordinates, 3D pose information, etc.
  public var objectInImage: [Bosdyn_Api_WorldObject] = []

  /// The image we computed the data on. If the input image itself was provided in the request,
  /// this field is not populated.  This field is not set for non-image input.
  public var imageResponse: Bosdyn_Api_ImageResponse {
    get {return _imageResponse ?? Bosdyn_Api_ImageResponse()}
    set {_imageResponse = newValue}
  }
  /// Returns true if `imageResponse` has been explicitly set.
  public var hasImageResponse: Bool {return self._imageResponse != nil}
  /// Clears the value of `imageResponse`. Subsequent reads from it will return its default value.
  public mutating func clearImageResponse() {self._imageResponse = nil}

  /// Non image-type data that can optionally be returned by a remote server.
  public var otherData: SwiftProtobuf.Google_Protobuf_Any {
    get {return _otherData ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_otherData = newValue}
  }
  /// Returns true if `otherData` has been explicitly set.
  public var hasOtherData: Bool {return self._otherData != nil}
  /// Clears the value of `otherData`. Subsequent reads from it will return its default value.
  public mutating func clearOtherData() {self._otherData = nil}

  /// Command status
  public var status: Bosdyn_Api_NetworkComputeStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _imageResponse: Bosdyn_Api_ImageResponse? = nil
  fileprivate var _otherData: SwiftProtobuf.Google_Protobuf_Any? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_NetworkComputeStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NETWORK_COMPUTE_STATUS_UNKNOWN"),
    1: .same(proto: "NETWORK_COMPUTE_STATUS_SUCCESS"),
    2: .same(proto: "NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND"),
    3: .same(proto: "NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR"),
    4: .same(proto: "NETWORK_COMPUTE_STATUS_ROTATION_ERROR"),
  ]
}

extension Bosdyn_Api_ListAvailableModelsStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIST_AVAILABLE_MODELS_STATUS_UNKNOWN"),
    1: .same(proto: "LIST_AVAILABLE_MODELS_STATUS_SUCCESS"),
    2: .same(proto: "LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND"),
    3: .same(proto: "LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR"),
  ]
}

extension Bosdyn_Api_ListAvailableModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAvailableModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "server_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._serverConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serverConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListAvailableModelsRequest, rhs: Bosdyn_Api_ListAvailableModelsRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._serverConfig != rhs._serverConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListAvailableModelsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAvailableModelsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "available_models"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedStringField(value: &self.availableModels)
      case 5: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.availableModels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.availableModels, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListAvailableModelsResponse, rhs: Bosdyn_Api_ListAvailableModelsResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.availableModels != rhs.availableModels {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_NetworkComputeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkComputeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "input_data"),
    3: .standard(proto: "server_config"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._inputData)
      case 3: try decoder.decodeSingularMessageField(value: &self._serverConfig)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._inputData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._serverConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_NetworkComputeRequest, rhs: Bosdyn_Api_NetworkComputeRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._inputData != rhs._inputData {return false}
    if lhs._serverConfig != rhs._serverConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageSourceAndService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageSourceAndService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_source"),
    2: .standard(proto: "image_service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.imageSource)
      case 2: try decoder.decodeSingularStringField(value: &self.imageService)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageSource.isEmpty {
      try visitor.visitSingularStringField(value: self.imageSource, fieldNumber: 1)
    }
    if !self.imageService.isEmpty {
      try visitor.visitSingularStringField(value: self.imageService, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageSourceAndService, rhs: Bosdyn_Api_ImageSourceAndService) -> Bool {
    if lhs.imageSource != rhs.imageSource {return false}
    if lhs.imageService != rhs.imageService {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_NetworkComputeInputData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkComputeInputData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "image_source_and_service"),
    2: .same(proto: "image"),
    3: .standard(proto: "other_data"),
    4: .standard(proto: "model_name"),
    5: .standard(proto: "min_confidence"),
    6: .standard(proto: "rotate_image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2:
        var v: Bosdyn_Api_Image?
        if let current = self.input {
          try decoder.handleConflictingOneOf()
          if case .image(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.input = .image(v)}
      case 3:
        var v: SwiftProtobuf.Google_Protobuf_Any?
        if let current = self.input {
          try decoder.handleConflictingOneOf()
          if case .otherData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.input = .otherData(v)}
      case 4: try decoder.decodeSingularStringField(value: &self.modelName)
      case 5: try decoder.decodeSingularFloatField(value: &self.minConfidence)
      case 6: try decoder.decodeSingularEnumField(value: &self.rotateImage)
      case 7:
        var v: Bosdyn_Api_ImageSourceAndService?
        if let current = self.input {
          try decoder.handleConflictingOneOf()
          if case .imageSourceAndService(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.input = .imageSourceAndService(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.input {
    case .image(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .otherData(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    default: break
    }
    if !self.modelName.isEmpty {
      try visitor.visitSingularStringField(value: self.modelName, fieldNumber: 4)
    }
    if self.minConfidence != 0 {
      try visitor.visitSingularFloatField(value: self.minConfidence, fieldNumber: 5)
    }
    if self.rotateImage != .unknown {
      try visitor.visitSingularEnumField(value: self.rotateImage, fieldNumber: 6)
    }
    if case .imageSourceAndService(let v)? = self.input {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_NetworkComputeInputData, rhs: Bosdyn_Api_NetworkComputeInputData) -> Bool {
    if lhs.input != rhs.input {return false}
    if lhs.modelName != rhs.modelName {return false}
    if lhs.minConfidence != rhs.minConfidence {return false}
    if lhs.rotateImage != rhs.rotateImage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_NetworkComputeInputData.RotateImage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROTATE_IMAGE_UNKNOWN"),
    1: .same(proto: "ROTATE_IMAGE_ALIGN_HORIZONTAL"),
    2: .same(proto: "ROTATE_IMAGE_ALIGN_WITH_BODY"),
    3: .same(proto: "ROTATE_IMAGE_NO_ROTATION"),
  ]
}

extension Bosdyn_Api_NetworkComputeServerConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkComputeServerConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_NetworkComputeServerConfiguration, rhs: Bosdyn_Api_NetworkComputeServerConfiguration) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_NetworkComputeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkComputeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "object_in_image"),
    3: .standard(proto: "image_response"),
    4: .standard(proto: "other_data"),
    5: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.objectInImage)
      case 3: try decoder.decodeSingularMessageField(value: &self._imageResponse)
      case 4: try decoder.decodeSingularMessageField(value: &self._otherData)
      case 5: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.objectInImage.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectInImage, fieldNumber: 2)
    }
    if let v = self._imageResponse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._otherData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_NetworkComputeResponse, rhs: Bosdyn_Api_NetworkComputeResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.objectInImage != rhs.objectInImage {return false}
    if lhs._imageResponse != rhs._imageResponse {return false}
    if lhs._otherData != rhs._otherData {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
