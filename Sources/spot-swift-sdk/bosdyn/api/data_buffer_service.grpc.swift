//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/data_buffer_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// This service is a mechanism for adding information to the robot's log files.
///
/// Usage: instantiate `Bosdyn_Api_DataBufferServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_DataBufferServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_DataBufferServiceClientInterceptorFactoryProtocol? { get }

  func recordTextMessages(
    _ request: Bosdyn_Api_RecordTextMessagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RecordTextMessagesRequest, Bosdyn_Api_RecordTextMessagesResponse>

  func recordOperatorComments(
    _ request: Bosdyn_Api_RecordOperatorCommentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RecordOperatorCommentsRequest, Bosdyn_Api_RecordOperatorCommentsResponse>

  func recordDataBlobs(
    _ request: Bosdyn_Api_RecordDataBlobsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RecordDataBlobsRequest, Bosdyn_Api_RecordDataBlobsResponse>

  func recordEvents(
    _ request: Bosdyn_Api_RecordEventsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RecordEventsRequest, Bosdyn_Api_RecordEventsResponse>

  func registerSignalSchema(
    _ request: Bosdyn_Api_RegisterSignalSchemaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RegisterSignalSchemaRequest, Bosdyn_Api_RegisterSignalSchemaResponse>

  func recordSignalTicks(
    _ request: Bosdyn_Api_RecordSignalTicksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RecordSignalTicksRequest, Bosdyn_Api_RecordSignalTicksResponse>
}

extension Bosdyn_Api_DataBufferServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.DataBufferService"
  }

  /// Add text messages to the log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordTextMessages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordTextMessages(
    _ request: Bosdyn_Api_RecordTextMessagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RecordTextMessagesRequest, Bosdyn_Api_RecordTextMessagesResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RecordTextMessages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTextMessagesInterceptors() ?? []
    )
  }

  /// Add a set of operator messages to the log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordOperatorComments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordOperatorComments(
    _ request: Bosdyn_Api_RecordOperatorCommentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RecordOperatorCommentsRequest, Bosdyn_Api_RecordOperatorCommentsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RecordOperatorComments",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordOperatorCommentsInterceptors() ?? []
    )
  }

  /// Add message-style data to the log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordDataBlobs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordDataBlobs(
    _ request: Bosdyn_Api_RecordDataBlobsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RecordDataBlobsRequest, Bosdyn_Api_RecordDataBlobsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RecordDataBlobs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordDataBlobsInterceptors() ?? []
    )
  }

  /// Add event data to the log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordEvents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordEvents(
    _ request: Bosdyn_Api_RecordEventsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RecordEventsRequest, Bosdyn_Api_RecordEventsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RecordEvents",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordEventsInterceptors() ?? []
    )
  }

  /// Register a log tick schema, allowing client to later log tick data.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterSignalSchema.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerSignalSchema(
    _ request: Bosdyn_Api_RegisterSignalSchemaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RegisterSignalSchemaRequest, Bosdyn_Api_RegisterSignalSchemaResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RegisterSignalSchema",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterSignalSchemaInterceptors() ?? []
    )
  }

  /// Add signal data for registered signal schema to the log.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordSignalTicks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordSignalTicks(
    _ request: Bosdyn_Api_RecordSignalTicksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RecordSignalTicksRequest, Bosdyn_Api_RecordSignalTicksResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataBufferService/RecordSignalTicks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordSignalTicksInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_DataBufferServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'recordTextMessages'.
  func makeRecordTextMessagesInterceptors() -> [ClientInterceptor<Bosdyn_Api_RecordTextMessagesRequest, Bosdyn_Api_RecordTextMessagesResponse>]

  /// - Returns: Interceptors to use when invoking 'recordOperatorComments'.
  func makeRecordOperatorCommentsInterceptors() -> [ClientInterceptor<Bosdyn_Api_RecordOperatorCommentsRequest, Bosdyn_Api_RecordOperatorCommentsResponse>]

  /// - Returns: Interceptors to use when invoking 'recordDataBlobs'.
  func makeRecordDataBlobsInterceptors() -> [ClientInterceptor<Bosdyn_Api_RecordDataBlobsRequest, Bosdyn_Api_RecordDataBlobsResponse>]

  /// - Returns: Interceptors to use when invoking 'recordEvents'.
  func makeRecordEventsInterceptors() -> [ClientInterceptor<Bosdyn_Api_RecordEventsRequest, Bosdyn_Api_RecordEventsResponse>]

  /// - Returns: Interceptors to use when invoking 'registerSignalSchema'.
  func makeRegisterSignalSchemaInterceptors() -> [ClientInterceptor<Bosdyn_Api_RegisterSignalSchemaRequest, Bosdyn_Api_RegisterSignalSchemaResponse>]

  /// - Returns: Interceptors to use when invoking 'recordSignalTicks'.
  func makeRecordSignalTicksInterceptors() -> [ClientInterceptor<Bosdyn_Api_RecordSignalTicksRequest, Bosdyn_Api_RecordSignalTicksResponse>]
}

public final class Bosdyn_Api_DataBufferServiceClient: Bosdyn_Api_DataBufferServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_DataBufferServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.DataBufferService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_DataBufferServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// This service is a mechanism for adding information to the robot's log files.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_DataBufferServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_DataBufferServiceServerInterceptorFactoryProtocol? { get }

  /// Add text messages to the log.
  func recordTextMessages(request: Bosdyn_Api_RecordTextMessagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RecordTextMessagesResponse>

  /// Add a set of operator messages to the log.
  func recordOperatorComments(request: Bosdyn_Api_RecordOperatorCommentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RecordOperatorCommentsResponse>

  /// Add message-style data to the log.
  func recordDataBlobs(request: Bosdyn_Api_RecordDataBlobsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RecordDataBlobsResponse>

  /// Add event data to the log.
  func recordEvents(request: Bosdyn_Api_RecordEventsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RecordEventsResponse>

  /// Register a log tick schema, allowing client to later log tick data.
  func registerSignalSchema(request: Bosdyn_Api_RegisterSignalSchemaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RegisterSignalSchemaResponse>

  /// Add signal data for registered signal schema to the log.
  func recordSignalTicks(request: Bosdyn_Api_RecordSignalTicksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RecordSignalTicksResponse>
}

extension Bosdyn_Api_DataBufferServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.DataBufferService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RecordTextMessages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RecordTextMessagesRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RecordTextMessagesResponse>(),
        interceptors: self.interceptors?.makeRecordTextMessagesInterceptors() ?? [],
        userFunction: self.recordTextMessages(request:context:)
      )

    case "RecordOperatorComments":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RecordOperatorCommentsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RecordOperatorCommentsResponse>(),
        interceptors: self.interceptors?.makeRecordOperatorCommentsInterceptors() ?? [],
        userFunction: self.recordOperatorComments(request:context:)
      )

    case "RecordDataBlobs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RecordDataBlobsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RecordDataBlobsResponse>(),
        interceptors: self.interceptors?.makeRecordDataBlobsInterceptors() ?? [],
        userFunction: self.recordDataBlobs(request:context:)
      )

    case "RecordEvents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RecordEventsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RecordEventsResponse>(),
        interceptors: self.interceptors?.makeRecordEventsInterceptors() ?? [],
        userFunction: self.recordEvents(request:context:)
      )

    case "RegisterSignalSchema":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RegisterSignalSchemaRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RegisterSignalSchemaResponse>(),
        interceptors: self.interceptors?.makeRegisterSignalSchemaInterceptors() ?? [],
        userFunction: self.registerSignalSchema(request:context:)
      )

    case "RecordSignalTicks":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RecordSignalTicksRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RecordSignalTicksResponse>(),
        interceptors: self.interceptors?.makeRecordSignalTicksInterceptors() ?? [],
        userFunction: self.recordSignalTicks(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_DataBufferServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'recordTextMessages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordTextMessagesInterceptors() -> [ServerInterceptor<Bosdyn_Api_RecordTextMessagesRequest, Bosdyn_Api_RecordTextMessagesResponse>]

  /// - Returns: Interceptors to use when handling 'recordOperatorComments'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordOperatorCommentsInterceptors() -> [ServerInterceptor<Bosdyn_Api_RecordOperatorCommentsRequest, Bosdyn_Api_RecordOperatorCommentsResponse>]

  /// - Returns: Interceptors to use when handling 'recordDataBlobs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordDataBlobsInterceptors() -> [ServerInterceptor<Bosdyn_Api_RecordDataBlobsRequest, Bosdyn_Api_RecordDataBlobsResponse>]

  /// - Returns: Interceptors to use when handling 'recordEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordEventsInterceptors() -> [ServerInterceptor<Bosdyn_Api_RecordEventsRequest, Bosdyn_Api_RecordEventsResponse>]

  /// - Returns: Interceptors to use when handling 'registerSignalSchema'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterSignalSchemaInterceptors() -> [ServerInterceptor<Bosdyn_Api_RegisterSignalSchemaRequest, Bosdyn_Api_RegisterSignalSchemaResponse>]

  /// - Returns: Interceptors to use when handling 'recordSignalTicks'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordSignalTicksInterceptors() -> [ServerInterceptor<Bosdyn_Api_RecordSignalTicksRequest, Bosdyn_Api_RecordSignalTicksResponse>]
}
