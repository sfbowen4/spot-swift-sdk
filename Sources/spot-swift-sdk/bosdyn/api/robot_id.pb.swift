// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/robot_id.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Robot identity information, which should be static while robot is powered-on.
public struct Bosdyn_Api_RobotId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A unique string identifier for the particular robot.
  public var serialNumber: String = String()

  /// Type of robot.  E.g., 'spot'.
  public var species: String = String()

  /// Robot version/platform.
  public var version: String = String()

  /// Version information about software running on the robot.
  public var softwareRelease: Bosdyn_Api_RobotSoftwareRelease {
    get {return _softwareRelease ?? Bosdyn_Api_RobotSoftwareRelease()}
    set {_softwareRelease = newValue}
  }
  /// Returns true if `softwareRelease` has been explicitly set.
  public var hasSoftwareRelease: Bool {return self._softwareRelease != nil}
  /// Clears the value of `softwareRelease`. Subsequent reads from it will return its default value.
  public mutating func clearSoftwareRelease() {self._softwareRelease = nil}

  /// Optional, customer-supplied nickname.
  public var nickname: String = String()

  /// Computer Serial Number. Unlike serial_number, which identifies a complete robot,
  /// the computer_serial_number identifies the computer hardware used in the robot.
  public var computerSerialNumber: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _softwareRelease: Bosdyn_Api_RobotSoftwareRelease? = nil
}

/// The software versioning number for a release.
public struct Bosdyn_Api_SoftwareVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signficant changes to software.
  public var majorVersion: Int32 = 0

  /// Normal changes to software.
  public var minorVersion: Int32 = 0

  /// Fixes which should not change intended capabilities or affect compatibility.
  public var patchLevel: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Description of the software release currently running on the robot.
public struct Bosdyn_Api_RobotSoftwareRelease {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The software version, e.g., 2.0.1
  public var version: Bosdyn_Api_SoftwareVersion {
    get {return _version ?? Bosdyn_Api_SoftwareVersion()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  /// The name of the robot, e.g., '20190601'
  public var name: String = String()

  /// Kind of software release.
  public var type: String = String()

  /// Timestamp of the changeset.
  public var changesetDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _changesetDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_changesetDate = newValue}
  }
  /// Returns true if `changesetDate` has been explicitly set.
  public var hasChangesetDate: Bool {return self._changesetDate != nil}
  /// Clears the value of `changesetDate`. Subsequent reads from it will return its default value.
  public mutating func clearChangesetDate() {self._changesetDate = nil}

  /// Changeset hash.
  public var changeset: String = String()

  /// API version.  E.g., 2.14.5.
  public var apiVersion: String = String()

  /// Extra information associated with the build.
  public var buildInformation: String = String()

  /// Date/time when release was installed.
  public var installDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _installDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_installDate = newValue}
  }
  /// Returns true if `installDate` has been explicitly set.
  public var hasInstallDate: Bool {return self._installDate != nil}
  /// Clears the value of `installDate`. Subsequent reads from it will return its default value.
  public mutating func clearInstallDate() {self._installDate = nil}

  /// Other information about the build.
  public var parameters: [Bosdyn_Api_Parameter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: Bosdyn_Api_SoftwareVersion? = nil
  fileprivate var _changesetDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _installDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The RobotId request message sent to a robot to learn it's basic identification information.
public struct Bosdyn_Api_RobotIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request/response header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The RobotId response message, including the ID information for a robot.
public struct Bosdyn_Api_RobotIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request/response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The requested RobotId information.
  public var robotID: Bosdyn_Api_RobotId {
    get {return _robotID ?? Bosdyn_Api_RobotId()}
    set {_robotID = newValue}
  }
  /// Returns true if `robotID` has been explicitly set.
  public var hasRobotID: Bool {return self._robotID != nil}
  /// Clears the value of `robotID`. Subsequent reads from it will return its default value.
  public mutating func clearRobotID() {self._robotID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _robotID: Bosdyn_Api_RobotId? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_RobotId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "serial_number"),
    2: .same(proto: "species"),
    3: .same(proto: "version"),
    4: .standard(proto: "software_release"),
    5: .same(proto: "nickname"),
    6: .standard(proto: "computer_serial_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serialNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.species)
      case 3: try decoder.decodeSingularStringField(value: &self.version)
      case 4: try decoder.decodeSingularMessageField(value: &self._softwareRelease)
      case 5: try decoder.decodeSingularStringField(value: &self.nickname)
      case 6: try decoder.decodeSingularStringField(value: &self.computerSerialNumber)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serialNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.serialNumber, fieldNumber: 1)
    }
    if !self.species.isEmpty {
      try visitor.visitSingularStringField(value: self.species, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if let v = self._softwareRelease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 5)
    }
    if !self.computerSerialNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.computerSerialNumber, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotId, rhs: Bosdyn_Api_RobotId) -> Bool {
    if lhs.serialNumber != rhs.serialNumber {return false}
    if lhs.species != rhs.species {return false}
    if lhs.version != rhs.version {return false}
    if lhs._softwareRelease != rhs._softwareRelease {return false}
    if lhs.nickname != rhs.nickname {return false}
    if lhs.computerSerialNumber != rhs.computerSerialNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SoftwareVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SoftwareVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "major_version"),
    2: .standard(proto: "minor_version"),
    3: .standard(proto: "patch_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.majorVersion)
      case 2: try decoder.decodeSingularInt32Field(value: &self.minorVersion)
      case 3: try decoder.decodeSingularInt32Field(value: &self.patchLevel)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.majorVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.majorVersion, fieldNumber: 1)
    }
    if self.minorVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.minorVersion, fieldNumber: 2)
    }
    if self.patchLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.patchLevel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SoftwareVersion, rhs: Bosdyn_Api_SoftwareVersion) -> Bool {
    if lhs.majorVersion != rhs.majorVersion {return false}
    if lhs.minorVersion != rhs.minorVersion {return false}
    if lhs.patchLevel != rhs.patchLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotSoftwareRelease: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotSoftwareRelease"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .standard(proto: "changeset_date"),
    5: .same(proto: "changeset"),
    6: .standard(proto: "api_version"),
    7: .standard(proto: "build_information"),
    8: .standard(proto: "install_date"),
    9: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._version)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.type)
      case 4: try decoder.decodeSingularMessageField(value: &self._changesetDate)
      case 5: try decoder.decodeSingularStringField(value: &self.changeset)
      case 6: try decoder.decodeSingularStringField(value: &self.apiVersion)
      case 7: try decoder.decodeSingularStringField(value: &self.buildInformation)
      case 8: try decoder.decodeSingularMessageField(value: &self._installDate)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.parameters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if let v = self._changesetDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.changeset.isEmpty {
      try visitor.visitSingularStringField(value: self.changeset, fieldNumber: 5)
    }
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 6)
    }
    if !self.buildInformation.isEmpty {
      try visitor.visitSingularStringField(value: self.buildInformation, fieldNumber: 7)
    }
    if let v = self._installDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parameters, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotSoftwareRelease, rhs: Bosdyn_Api_RobotSoftwareRelease) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._changesetDate != rhs._changesetDate {return false}
    if lhs.changeset != rhs.changeset {return false}
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.buildInformation != rhs.buildInformation {return false}
    if lhs._installDate != rhs._installDate {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotIdRequest, rhs: Bosdyn_Api_RobotIdRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotIdResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "robot_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._robotID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._robotID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotIdResponse, rhs: Bosdyn_Api_RobotIdResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._robotID != rhs._robotID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
