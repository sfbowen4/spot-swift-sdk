// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/gripper_command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The synchronized command message for commanding the gripper to move.
/// A synchronized commands is one of the possible robot command messages for controlling the robot.
public struct Bosdyn_Api_GripperCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The gripper request must be one of the basic command primitives.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Only one command can be requested at a time.
    public var command: Bosdyn_Api_GripperCommand.Request.OneOf_Command? = nil

    /// Control opening and closing the gripper.
    public var clawGripperCommand: Bosdyn_Api_ClawGripperCommand.Request {
      get {
        if case .clawGripperCommand(let v)? = command {return v}
        return Bosdyn_Api_ClawGripperCommand.Request()
      }
      set {command = .clawGripperCommand(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Only one command can be requested at a time.
    public enum OneOf_Command: Equatable {
      /// Control opening and closing the gripper.
      case clawGripperCommand(Bosdyn_Api_ClawGripperCommand.Request)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_GripperCommand.Request.OneOf_Command, rhs: Bosdyn_Api_GripperCommand.Request.OneOf_Command) -> Bool {
        switch (lhs, rhs) {
        case (.clawGripperCommand(let l), .clawGripperCommand(let r)): return l == r
        }
      }
    #endif
    }

    public init() {}
  }

  /// The feedback for the gripper command that will provide information on the progress
  /// of the command.
  public struct Feedback {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var command: Bosdyn_Api_GripperCommand.Feedback.OneOf_Command? = nil

    /// Feedback for the claw gripper command.
    public var clawGripperFeedback: Bosdyn_Api_ClawGripperCommand.Feedback {
      get {
        if case .clawGripperFeedback(let v)? = command {return v}
        return Bosdyn_Api_ClawGripperCommand.Feedback()
      }
      set {command = .clawGripperFeedback(newValue)}
    }

    public var status: Bosdyn_Api_RobotCommandFeedbackStatus.Status = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Command: Equatable {
      /// Feedback for the claw gripper command.
      case clawGripperFeedback(Bosdyn_Api_ClawGripperCommand.Feedback)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_GripperCommand.Feedback.OneOf_Command, rhs: Bosdyn_Api_GripperCommand.Feedback.OneOf_Command) -> Bool {
        switch (lhs, rhs) {
        case (.clawGripperFeedback(let l), .clawGripperFeedback(let r)): return l == r
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

/// Command to open and close the gripper.
public struct Bosdyn_Api_ClawGripperCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Scalar trajectory for opening/closing the gripper. If 1 point is specified
    /// with no end time, we will execute a minimum time trajectory that observes
    /// velocity and acceleration constraints. Otherwise, we will use piecewise
    /// cubic interpolation, meaning there will be a cubic polynomial between each
    /// trajectory point, with continuous position and velocity at each trajectory
    /// point. If the requested trajectory violates the velocity or acceleration
    /// constraints below, a trajectory that is as close as possible but still
    /// obeys the constraints will be executed instead.
    /// position is radians: 0 is fully closed -1.5708 (-90 degrees) is fully open
    /// velocity is radians / sec.
    public var trajectory: Bosdyn_Api_ScalarTrajectory {
      get {return _trajectory ?? Bosdyn_Api_ScalarTrajectory()}
      set {_trajectory = newValue}
    }
    /// Returns true if `trajectory` has been explicitly set.
    public var hasTrajectory: Bool {return self._trajectory != nil}
    /// Clears the value of `trajectory`. Subsequent reads from it will return its default value.
    public mutating func clearTrajectory() {self._trajectory = nil}

    /// If unspecified, a default value of 10 (rad/s) will be used.
    public var maximumOpenCloseVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _maximumOpenCloseVelocity ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_maximumOpenCloseVelocity = newValue}
    }
    /// Returns true if `maximumOpenCloseVelocity` has been explicitly set.
    public var hasMaximumOpenCloseVelocity: Bool {return self._maximumOpenCloseVelocity != nil}
    /// Clears the value of `maximumOpenCloseVelocity`. Subsequent reads from it will return its default value.
    public mutating func clearMaximumOpenCloseVelocity() {self._maximumOpenCloseVelocity = nil}

    /// If unspecified, a default value of 40 (rad/s/s) will be used.
    public var maximumOpenCloseAcceleration: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _maximumOpenCloseAcceleration ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_maximumOpenCloseAcceleration = newValue}
    }
    /// Returns true if `maximumOpenCloseAcceleration` has been explicitly set.
    public var hasMaximumOpenCloseAcceleration: Bool {return self._maximumOpenCloseAcceleration != nil}
    /// Clears the value of `maximumOpenCloseAcceleration`. Subsequent reads from it will return its default value.
    public mutating func clearMaximumOpenCloseAcceleration() {self._maximumOpenCloseAcceleration = nil}

    /// Maximum torque applied. If unspecified, a default value of 5.5 (Nm) will be used.
    public var maximumTorque: SwiftProtobuf.Google_Protobuf_DoubleValue {
      get {return _maximumTorque ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
      set {_maximumTorque = newValue}
    }
    /// Returns true if `maximumTorque` has been explicitly set.
    public var hasMaximumTorque: Bool {return self._maximumTorque != nil}
    /// Clears the value of `maximumTorque`. Subsequent reads from it will return its default value.
    public mutating func clearMaximumTorque() {self._maximumTorque = nil}

    /// By default the gripper transitions to force control when it detects an object closing.
    /// Setting this field to true disables the transition to force control on contact detection
    /// and always keeps the gripper in position control.
    public var disableForceOnContact: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _trajectory: Bosdyn_Api_ScalarTrajectory? = nil
    fileprivate var _maximumOpenCloseVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _maximumOpenCloseAcceleration: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    fileprivate var _maximumTorque: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  }

  public struct Feedback {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current status of the command.
    public var status: Bosdyn_Api_ClawGripperCommand.Feedback.Status = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Status: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
      case unknown // = 0

      /// The gripper is opening or closing.
      case inProgress // = 1

      /// The gripper is at the final point of the trajectory.
      case atGoal // = 2

      /// During a close, detected contact and transitioned to force control.
      case applyingForce // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .inProgress
        case 2: self = .atGoal
        case 3: self = .applyingForce
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .inProgress: return 1
        case .atGoal: return 2
        case .applyingForce: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_ClawGripperCommand.Feedback.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ClawGripperCommand.Feedback.Status] = [
    .unknown,
    .inProgress,
    .atGoal,
    .applyingForce,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_GripperCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GripperCommand"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GripperCommand, rhs: Bosdyn_Api_GripperCommand) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GripperCommand.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_GripperCommand.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "claw_gripper_command"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_ClawGripperCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .clawGripperCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .clawGripperCommand(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .clawGripperCommand(let v)? = self.command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GripperCommand.Request, rhs: Bosdyn_Api_GripperCommand.Request) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GripperCommand.Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_GripperCommand.protoMessageName + ".Feedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "claw_gripper_feedback"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_ClawGripperCommand.Feedback?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .clawGripperFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .clawGripperFeedback(v)}
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .clawGripperFeedback(let v)? = self.command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GripperCommand.Feedback, rhs: Bosdyn_Api_GripperCommand.Feedback) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClawGripperCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClawGripperCommand"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClawGripperCommand, rhs: Bosdyn_Api_ClawGripperCommand) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClawGripperCommand.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_ClawGripperCommand.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "trajectory"),
    2: .standard(proto: "maximum_open_close_velocity"),
    3: .standard(proto: "maximum_open_close_acceleration"),
    4: .standard(proto: "maximum_torque"),
    6: .standard(proto: "disable_force_on_contact"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._maximumOpenCloseVelocity)
      case 3: try decoder.decodeSingularMessageField(value: &self._maximumOpenCloseAcceleration)
      case 4: try decoder.decodeSingularMessageField(value: &self._maximumTorque)
      case 5: try decoder.decodeSingularMessageField(value: &self._trajectory)
      case 6: try decoder.decodeSingularBoolField(value: &self.disableForceOnContact)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maximumOpenCloseVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._maximumOpenCloseAcceleration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._maximumTorque {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._trajectory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.disableForceOnContact != false {
      try visitor.visitSingularBoolField(value: self.disableForceOnContact, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClawGripperCommand.Request, rhs: Bosdyn_Api_ClawGripperCommand.Request) -> Bool {
    if lhs._trajectory != rhs._trajectory {return false}
    if lhs._maximumOpenCloseVelocity != rhs._maximumOpenCloseVelocity {return false}
    if lhs._maximumOpenCloseAcceleration != rhs._maximumOpenCloseAcceleration {return false}
    if lhs._maximumTorque != rhs._maximumTorque {return false}
    if lhs.disableForceOnContact != rhs.disableForceOnContact {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClawGripperCommand.Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_ClawGripperCommand.protoMessageName + ".Feedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClawGripperCommand.Feedback, rhs: Bosdyn_Api_ClawGripperCommand.Feedback) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClawGripperCommand.Feedback.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_IN_PROGRESS"),
    2: .same(proto: "STATUS_AT_GOAL"),
    3: .same(proto: "STATUS_APPLYING_FORCE"),
  ]
}
