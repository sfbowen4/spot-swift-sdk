//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/license_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The LicenseService allows clients to query the currently installed license on robot.
///
/// Usage: instantiate `Bosdyn_Api_LicenseServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_LicenseServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_LicenseServiceClientInterceptorFactoryProtocol? { get }

  func getLicenseInfo(
    _ request: Bosdyn_Api_GetLicenseInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetLicenseInfoRequest, Bosdyn_Api_GetLicenseInfoResponse>

  func getFeatureEnabled(
    _ request: Bosdyn_Api_GetFeatureEnabledRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetFeatureEnabledRequest, Bosdyn_Api_GetFeatureEnabledResponse>
}

extension Bosdyn_Api_LicenseServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.LicenseService"
  }

  /// Get information, such as the license number, dates of validity, and features for the license
  /// currently uploaded on the robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLicenseInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLicenseInfo(
    _ request: Bosdyn_Api_GetLicenseInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetLicenseInfoRequest, Bosdyn_Api_GetLicenseInfoResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.LicenseService/GetLicenseInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLicenseInfoInterceptors() ?? []
    )
  }

  /// Check if specific features (identified by string names) are enabled under the currently loaded
  /// license for this robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFeatureEnabled.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFeatureEnabled(
    _ request: Bosdyn_Api_GetFeatureEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetFeatureEnabledRequest, Bosdyn_Api_GetFeatureEnabledResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.LicenseService/GetFeatureEnabled",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFeatureEnabledInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_LicenseServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getLicenseInfo'.
  func makeGetLicenseInfoInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetLicenseInfoRequest, Bosdyn_Api_GetLicenseInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getFeatureEnabled'.
  func makeGetFeatureEnabledInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetFeatureEnabledRequest, Bosdyn_Api_GetFeatureEnabledResponse>]
}

public final class Bosdyn_Api_LicenseServiceClient: Bosdyn_Api_LicenseServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_LicenseServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.LicenseService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_LicenseServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The LicenseService allows clients to query the currently installed license on robot.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_LicenseServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_LicenseServiceServerInterceptorFactoryProtocol? { get }

  /// Get information, such as the license number, dates of validity, and features for the license
  /// currently uploaded on the robot.
  func getLicenseInfo(request: Bosdyn_Api_GetLicenseInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetLicenseInfoResponse>

  /// Check if specific features (identified by string names) are enabled under the currently loaded
  /// license for this robot.
  func getFeatureEnabled(request: Bosdyn_Api_GetFeatureEnabledRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetFeatureEnabledResponse>
}

extension Bosdyn_Api_LicenseServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.LicenseService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetLicenseInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetLicenseInfoRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetLicenseInfoResponse>(),
        interceptors: self.interceptors?.makeGetLicenseInfoInterceptors() ?? [],
        userFunction: self.getLicenseInfo(request:context:)
      )

    case "GetFeatureEnabled":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetFeatureEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetFeatureEnabledResponse>(),
        interceptors: self.interceptors?.makeGetFeatureEnabledInterceptors() ?? [],
        userFunction: self.getFeatureEnabled(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_LicenseServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getLicenseInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLicenseInfoInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetLicenseInfoRequest, Bosdyn_Api_GetLicenseInfoResponse>]

  /// - Returns: Interceptors to use when handling 'getFeatureEnabled'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFeatureEnabledInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetFeatureEnabledRequest, Bosdyn_Api_GetFeatureEnabledResponse>]
}
