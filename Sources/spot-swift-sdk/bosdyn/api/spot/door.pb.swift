// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot/door.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A door command for the robot to execute plus a lease.
public struct Bosdyn_Api_Spot_OpenDoorCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The Lease to show ownership of the robot.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// The command to execute.
  public var doorCommand: Bosdyn_Api_Spot_DoorCommand.Request {
    get {return _doorCommand ?? Bosdyn_Api_Spot_DoorCommand.Request()}
    set {_doorCommand = newValue}
  }
  /// Returns true if `doorCommand` has been explicitly set.
  public var hasDoorCommand: Bool {return self._doorCommand != nil}
  /// Clears the value of `doorCommand`. Subsequent reads from it will return its default value.
  public mutating func clearDoorCommand() {self._doorCommand = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
  fileprivate var _doorCommand: Bosdyn_Api_Spot_DoorCommand.Request? = nil
}

/// Response to the door command request.
public struct Bosdyn_Api_Spot_OpenDoorCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Details about how the lease was used.
  public var leaseUseResult: Bosdyn_Api_LeaseUseResult {
    get {return _leaseUseResult ?? Bosdyn_Api_LeaseUseResult()}
    set {_leaseUseResult = newValue}
  }
  /// Returns true if `leaseUseResult` has been explicitly set.
  public var hasLeaseUseResult: Bool {return self._leaseUseResult != nil}
  /// Clears the value of `leaseUseResult`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseUseResult() {self._leaseUseResult = nil}

  /// Return status for a request.
  public var status: Bosdyn_Api_Spot_OpenDoorCommandResponse.Status = .unknown

  /// Human-readable error description.  Not for programmatic analysis.
  public var message: String = String()

  /// Unique identifier for the command, If empty, command was not accepted.
  public var doorCommandID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unknown / unexpected error occurred.
    case unknown // = 0

    /// Request was accepted.
    case ok // = 1

    /// Error sending command to RobotCommandService.
    case robotCommandError // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .robotCommandError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .robotCommandError: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _leaseUseResult: Bosdyn_Api_LeaseUseResult? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_OpenDoorCommandResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_OpenDoorCommandResponse.Status] = [
    .unknown,
    .ok,
    .robotCommandError,
  ]
}

#endif  // swift(>=4.2)

/// A request for feedback of a specific door command.
public struct Bosdyn_Api_Spot_OpenDoorFeedbackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Unique identifier for the command, provided by OpenDoorResponse.
  public var doorCommandID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Feedback for a specific door command. This RPC reports the robot's progress opening a door.
public struct Bosdyn_Api_Spot_OpenDoorFeedbackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Generic robot command feedback.
  public var status: Bosdyn_Api_RobotCommandFeedbackStatus.Status = .unknown

  /// Specific door full body command feedback.
  public var feedback: Bosdyn_Api_Spot_DoorCommand.Feedback {
    get {return _feedback ?? Bosdyn_Api_Spot_DoorCommand.Feedback()}
    set {_feedback = newValue}
  }
  /// Returns true if `feedback` has been explicitly set.
  public var hasFeedback: Bool {return self._feedback != nil}
  /// Clears the value of `feedback`. Subsequent reads from it will return its default value.
  public mutating func clearFeedback() {self._feedback = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _feedback: Bosdyn_Api_Spot_DoorCommand.Feedback? = nil
}

///  Door Command specific request and Feedback.
public struct Bosdyn_Api_Spot_DoorCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specify if the hinge is on the left or right side of the door, when looking at the door,
  /// relative to the door handle.
  public enum HingeSide: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case left // = 1
    case right // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .left
      case 2: self = .right
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .left: return 1
      case .right: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Specify if the door is push or pull, when looking at the door.
  public enum SwingDirection: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case inswing // = 1
    case outswing // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .inswing
      case 2: self = .outswing
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .inswing: return 1
      case .outswing: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Specify type of door handle.
  public enum HandleType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case lever // = 1
    case knob // = 2
    case fixedGrasp // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .lever
      case 2: self = .knob
      case 3: self = .fixedGrasp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .lever: return 1
      case .knob: return 2
      case .fixedGrasp: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The robot searches along a ray for the door handle and automatically grasp it before
  /// executing door opening.
  public struct AutoGraspCommand {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The name of the frame that the following fields are expressed in.
    public var frameName: String = String()

    /// The start of the ray the robot searches along for the door handle.
    public var searchRayStartInFrame: Bosdyn_Api_Vec3 {
      get {return _searchRayStartInFrame ?? Bosdyn_Api_Vec3()}
      set {_searchRayStartInFrame = newValue}
    }
    /// Returns true if `searchRayStartInFrame` has been explicitly set.
    public var hasSearchRayStartInFrame: Bool {return self._searchRayStartInFrame != nil}
    /// Clears the value of `searchRayStartInFrame`. Subsequent reads from it will return its default value.
    public mutating func clearSearchRayStartInFrame() {self._searchRayStartInFrame = nil}

    /// The end of the ray the robot searches along for the door handle.
    public var searchRayEndInFrame: Bosdyn_Api_Vec3 {
      get {return _searchRayEndInFrame ?? Bosdyn_Api_Vec3()}
      set {_searchRayEndInFrame = newValue}
    }
    /// Returns true if `searchRayEndInFrame` has been explicitly set.
    public var hasSearchRayEndInFrame: Bool {return self._searchRayEndInFrame != nil}
    /// Clears the value of `searchRayEndInFrame`. Subsequent reads from it will return its default value.
    public mutating func clearSearchRayEndInFrame() {self._searchRayEndInFrame = nil}

    /// The side of the hinge with respect to the robot when facing the door.
    public var hingeSide: Bosdyn_Api_Spot_DoorCommand.HingeSide = .unknown

    /// The direction the door moves with respect to the robot.
    public var swingDirection: Bosdyn_Api_Spot_DoorCommand.SwingDirection = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _searchRayStartInFrame: Bosdyn_Api_Vec3? = nil
    fileprivate var _searchRayEndInFrame: Bosdyn_Api_Vec3? = nil
  }

  /// The robot is already grasping the door handle and will continue opening the door based on
  /// user specified params.
  public struct WarmstartCommand {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The side of the hinge with respect to the robot when facing the door.
    public var hingeSide: Bosdyn_Api_Spot_DoorCommand.HingeSide = .unknown

    /// The direction the door moves with respect to the robot.
    public var swingDirection: Bosdyn_Api_Spot_DoorCommand.SwingDirection = .unknown

    /// The type of handle on the door.
    public var handleType: Bosdyn_Api_Spot_DoorCommand.HandleType = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var command: Bosdyn_Api_Spot_DoorCommand.Request.OneOf_Command? = nil

    public var autoGraspCommand: Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand {
      get {
        if case .autoGraspCommand(let v)? = command {return v}
        return Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand()
      }
      set {command = .autoGraspCommand(newValue)}
    }

    public var warmstartCommand: Bosdyn_Api_Spot_DoorCommand.WarmstartCommand {
      get {
        if case .warmstartCommand(let v)? = command {return v}
        return Bosdyn_Api_Spot_DoorCommand.WarmstartCommand()
      }
      set {command = .warmstartCommand(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Command: Equatable {
      case autoGraspCommand(Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand)
      case warmstartCommand(Bosdyn_Api_Spot_DoorCommand.WarmstartCommand)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand.Request.OneOf_Command, rhs: Bosdyn_Api_Spot_DoorCommand.Request.OneOf_Command) -> Bool {
        switch (lhs, rhs) {
        case (.autoGraspCommand(let l), .autoGraspCommand(let r)): return l == r
        case (.warmstartCommand(let l), .warmstartCommand(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct Feedback {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current status of the command.
    public var status: Bosdyn_Api_Spot_DoorCommand.Feedback.Status = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Status: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
      case unknown // = 0

      /// Robot has finished opening the door.
      case completed // = 1

      /// Robot is attempting to open the door.
      case inProgress // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .unknown
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unknown
        case 1: self = .completed
        case 2: self = .inProgress
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unknown: return 0
        case .completed: return 1
        case .inProgress: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_DoorCommand.HingeSide: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_DoorCommand.HingeSide] = [
    .unknown,
    .left,
    .right,
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.SwingDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_DoorCommand.SwingDirection] = [
    .unknown,
    .inswing,
    .outswing,
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.HandleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_DoorCommand.HandleType] = [
    .unknown,
    .lever,
    .knob,
    .fixedGrasp,
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.Feedback.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_DoorCommand.Feedback.Status] = [
    .unknown,
    .completed,
    .inProgress,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot"

extension Bosdyn_Api_Spot_OpenDoorCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenDoorCommandRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
    4: .standard(proto: "door_command"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      case 4: try decoder.decodeSingularMessageField(value: &self._doorCommand)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._doorCommand {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_OpenDoorCommandRequest, rhs: Bosdyn_Api_Spot_OpenDoorCommandRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs._doorCommand != rhs._doorCommand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_OpenDoorCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenDoorCommandResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "lease_use_result"),
    3: .same(proto: "status"),
    4: .same(proto: "message"),
    5: .standard(proto: "door_command_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._leaseUseResult)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularStringField(value: &self.message)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.doorCommandID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._leaseUseResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 4)
    }
    if self.doorCommandID != 0 {
      try visitor.visitSingularUInt32Field(value: self.doorCommandID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_OpenDoorCommandResponse, rhs: Bosdyn_Api_Spot_OpenDoorCommandResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._leaseUseResult != rhs._leaseUseResult {return false}
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs.doorCommandID != rhs.doorCommandID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_OpenDoorCommandResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_ROBOT_COMMAND_ERROR"),
  ]
}

extension Bosdyn_Api_Spot_OpenDoorFeedbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenDoorFeedbackRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "door_command_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.doorCommandID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.doorCommandID != 0 {
      try visitor.visitSingularUInt32Field(value: self.doorCommandID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_OpenDoorFeedbackRequest, rhs: Bosdyn_Api_Spot_OpenDoorFeedbackRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.doorCommandID != rhs.doorCommandID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_OpenDoorFeedbackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenDoorFeedbackResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    100: .same(proto: "status"),
    2: .same(proto: "feedback"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._feedback)
      case 100: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._feedback {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_OpenDoorFeedbackResponse, rhs: Bosdyn_Api_Spot_OpenDoorFeedbackResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs._feedback != rhs._feedback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DoorCommand"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand, rhs: Bosdyn_Api_Spot_DoorCommand) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand.HingeSide: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HINGE_SIDE_UNKNOWN"),
    1: .same(proto: "HINGE_SIDE_LEFT"),
    2: .same(proto: "HINGE_SIDE_RIGHT"),
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.SwingDirection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SWING_DIRECTION_UNKNOWN"),
    1: .same(proto: "SWING_DIRECTION_INSWING"),
    2: .same(proto: "SWING_DIRECTION_OUTSWING"),
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.HandleType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HANDLE_TYPE_UNKNOWN"),
    1: .same(proto: "HANDLE_TYPE_LEVER"),
    2: .same(proto: "HANDLE_TYPE_KNOB"),
    3: .same(proto: "HANDLE_TYPE_FIXED_GRASP"),
  ]
}

extension Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Spot_DoorCommand.protoMessageName + ".AutoGraspCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frame_name"),
    2: .standard(proto: "search_ray_start_in_frame"),
    3: .standard(proto: "search_ray_end_in_frame"),
    4: .standard(proto: "hinge_side"),
    5: .standard(proto: "swing_direction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.frameName)
      case 2: try decoder.decodeSingularMessageField(value: &self._searchRayStartInFrame)
      case 3: try decoder.decodeSingularMessageField(value: &self._searchRayEndInFrame)
      case 4: try decoder.decodeSingularEnumField(value: &self.hingeSide)
      case 5: try decoder.decodeSingularEnumField(value: &self.swingDirection)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.frameName.isEmpty {
      try visitor.visitSingularStringField(value: self.frameName, fieldNumber: 1)
    }
    if let v = self._searchRayStartInFrame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._searchRayEndInFrame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.hingeSide != .unknown {
      try visitor.visitSingularEnumField(value: self.hingeSide, fieldNumber: 4)
    }
    if self.swingDirection != .unknown {
      try visitor.visitSingularEnumField(value: self.swingDirection, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand, rhs: Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand) -> Bool {
    if lhs.frameName != rhs.frameName {return false}
    if lhs._searchRayStartInFrame != rhs._searchRayStartInFrame {return false}
    if lhs._searchRayEndInFrame != rhs._searchRayEndInFrame {return false}
    if lhs.hingeSide != rhs.hingeSide {return false}
    if lhs.swingDirection != rhs.swingDirection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand.WarmstartCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Spot_DoorCommand.protoMessageName + ".WarmstartCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hinge_side"),
    2: .standard(proto: "swing_direction"),
    3: .standard(proto: "handle_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.hingeSide)
      case 2: try decoder.decodeSingularEnumField(value: &self.swingDirection)
      case 3: try decoder.decodeSingularEnumField(value: &self.handleType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hingeSide != .unknown {
      try visitor.visitSingularEnumField(value: self.hingeSide, fieldNumber: 1)
    }
    if self.swingDirection != .unknown {
      try visitor.visitSingularEnumField(value: self.swingDirection, fieldNumber: 2)
    }
    if self.handleType != .unknown {
      try visitor.visitSingularEnumField(value: self.handleType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand.WarmstartCommand, rhs: Bosdyn_Api_Spot_DoorCommand.WarmstartCommand) -> Bool {
    if lhs.hingeSide != rhs.hingeSide {return false}
    if lhs.swingDirection != rhs.swingDirection {return false}
    if lhs.handleType != rhs.handleType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Spot_DoorCommand.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .standard(proto: "auto_grasp_command"),
    11: .standard(proto: "warmstart_command"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 10:
        var v: Bosdyn_Api_Spot_DoorCommand.AutoGraspCommand?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .autoGraspCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .autoGraspCommand(v)}
      case 11:
        var v: Bosdyn_Api_Spot_DoorCommand.WarmstartCommand?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .warmstartCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .warmstartCommand(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.command {
    case .autoGraspCommand(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .warmstartCommand(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand.Request, rhs: Bosdyn_Api_Spot_DoorCommand.Request) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand.Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_Spot_DoorCommand.protoMessageName + ".Feedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_DoorCommand.Feedback, rhs: Bosdyn_Api_Spot_DoorCommand.Feedback) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_DoorCommand.Feedback.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_COMPLETED"),
    2: .same(proto: "STATUS_IN_PROGRESS"),
  ]
}
