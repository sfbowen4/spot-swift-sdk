// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot/choreography_params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enum for the pivot point for certain choreography sequence moves.
public enum Bosdyn_Api_Spot_Pivot: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case front // = 1
  case hind // = 2
  case center // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .front
    case 2: self = .hind
    case 3: self = .center
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .front: return 1
    case .hind: return 2
    case .center: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_Pivot: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_Pivot] = [
    .unknown,
    .front,
    .hind,
    .center,
  ]
}

#endif  // swift(>=4.2)

/// Enum to describe the type of easing to perform for the slices at either (or both) the
/// beginning and end of a move.
public enum Bosdyn_Api_Spot_Easing: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case linear // = 1
  case quadraticInput // = 2
  case quadraticOutput // = 3
  case quadraticInOut // = 4
  case cubicInput // = 5
  case cubicOutput // = 6
  case cubicInOut // = 7
  case exponentialInput // = 8
  case exponentialOutput // = 9
  case exponentialInOut // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .linear
    case 2: self = .quadraticInput
    case 3: self = .quadraticOutput
    case 4: self = .quadraticInOut
    case 5: self = .cubicInput
    case 6: self = .cubicOutput
    case 7: self = .cubicInOut
    case 8: self = .exponentialInput
    case 9: self = .exponentialOutput
    case 10: self = .exponentialInOut
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .linear: return 1
    case .quadraticInput: return 2
    case .quadraticOutput: return 3
    case .quadraticInOut: return 4
    case .cubicInput: return 5
    case .cubicOutput: return 6
    case .cubicInOut: return 7
    case .exponentialInput: return 8
    case .exponentialOutput: return 9
    case .exponentialInOut: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_Easing: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_Easing] = [
    .unknown,
    .linear,
    .quadraticInput,
    .quadraticOutput,
    .quadraticInOut,
    .cubicInput,
    .cubicOutput,
    .cubicInOut,
    .exponentialInput,
    .exponentialOutput,
    .exponentialInOut,
  ]
}

#endif  // swift(>=4.2)

public enum Bosdyn_Api_Spot_ArmMoveFrame: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case centerOfFootprint // = 1
  case hand // = 2
  case body // = 3
  case shoulder // = 4
  case shadow // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .centerOfFootprint
    case 2: self = .hand
    case 3: self = .body
    case 4: self = .shoulder
    case 5: self = .shadow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .centerOfFootprint: return 1
    case .hand: return 2
    case .body: return 3
    case .shoulder: return 4
    case .shadow: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_ArmMoveFrame: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_ArmMoveFrame] = [
    .unknown,
    .centerOfFootprint,
    .hand,
    .body,
    .shoulder,
    .shadow,
  ]
}

#endif  // swift(>=4.2)

/// Enum to describe which leg is being referenced in specific choreography sequence moves.
public enum Bosdyn_Api_Spot_Leg: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case frontLeft // = 1
  case frontRight // = 2
  case hindLeft // = 3
  case hindRight // = 4
  case noLeg // = -1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .noLeg
    case 0: self = .unknown
    case 1: self = .frontLeft
    case 2: self = .frontRight
    case 3: self = .hindLeft
    case 4: self = .hindRight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noLeg: return -1
    case .unknown: return 0
    case .frontLeft: return 1
    case .frontRight: return 2
    case .hindLeft: return 3
    case .hindRight: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_Leg: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_Leg] = [
    .unknown,
    .frontLeft,
    .frontRight,
    .hindLeft,
    .hindRight,
    .noLeg,
  ]
}

#endif  // swift(>=4.2)

/// Euler Angle (yaw->pitch->roll) vector that uses wrapped values so we can tell which elements are set.
public struct Bosdyn_Api_Spot_EulerZYXValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var roll: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _roll ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_roll = newValue}
  }
  /// Returns true if `roll` has been explicitly set.
  public var hasRoll: Bool {return self._roll != nil}
  /// Clears the value of `roll`. Subsequent reads from it will return its default value.
  public mutating func clearRoll() {self._roll = nil}

  public var pitch: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _pitch ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_pitch = newValue}
  }
  /// Returns true if `pitch` has been explicitly set.
  public var hasPitch: Bool {return self._pitch != nil}
  /// Clears the value of `pitch`. Subsequent reads from it will return its default value.
  public mutating func clearPitch() {self._pitch = nil}

  public var yaw: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yaw ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yaw = newValue}
  }
  /// Returns true if `yaw` has been explicitly set.
  public var hasYaw: Bool {return self._yaw != nil}
  /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
  public mutating func clearYaw() {self._yaw = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _roll: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _pitch: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _yaw: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Euler Angle rates (yaw->pitch->roll) vector that uses wrapped values so we can tell which elements are set.
public struct Bosdyn_Api_Spot_EulerRateZYXValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var roll: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _roll ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_roll = newValue}
  }
  /// Returns true if `roll` has been explicitly set.
  public var hasRoll: Bool {return self._roll != nil}
  /// Clears the value of `roll`. Subsequent reads from it will return its default value.
  public mutating func clearRoll() {self._roll = nil}

  public var pitch: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _pitch ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_pitch = newValue}
  }
  /// Returns true if `pitch` has been explicitly set.
  public var hasPitch: Bool {return self._pitch != nil}
  /// Clears the value of `pitch`. Subsequent reads from it will return its default value.
  public mutating func clearPitch() {self._pitch = nil}

  public var yaw: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yaw ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yaw = newValue}
  }
  /// Returns true if `yaw` has been explicitly set.
  public var hasYaw: Bool {return self._yaw != nil}
  /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
  public mutating func clearYaw() {self._yaw = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _roll: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _pitch: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _yaw: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to the BodyHold move.
public struct Bosdyn_Api_Spot_BodyHoldParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The robot will rotate its body to the specified orientation (roll/pitch/yaw) [rad].
  public var rotation: Bosdyn_Api_Spot_EulerZYXValue {
    get {return _rotation ?? Bosdyn_Api_Spot_EulerZYXValue()}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  public var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  public mutating func clearRotation() {self._rotation = nil}

  /// The positional offset to the robot's current location [m].
  public var translation: Bosdyn_Api_Vec3Value {
    get {return _translation ?? Bosdyn_Api_Vec3Value()}
    set {_translation = newValue}
  }
  /// Returns true if `translation` has been explicitly set.
  public var hasTranslation: Bool {return self._translation != nil}
  /// Clears the value of `translation`. Subsequent reads from it will return its default value.
  public mutating func clearTranslation() {self._translation = nil}

  /// How many "slices" (beats or sub-beats) are allowed before reaching the desired pose.
  public var entrySlices: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _entrySlices ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_entrySlices = newValue}
  }
  /// Returns true if `entrySlices` has been explicitly set.
  public var hasEntrySlices: Bool {return self._entrySlices != nil}
  /// Clears the value of `entrySlices`. Subsequent reads from it will return its default value.
  public mutating func clearEntrySlices() {self._entrySlices = nil}

  /// How many "slices" (beats or sub-beats) are allowed for the robot to return to the original pose.
  public var exitSlices: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _exitSlices ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_exitSlices = newValue}
  }
  /// Returns true if `exitSlices` has been explicitly set.
  public var hasExitSlices: Bool {return self._exitSlices != nil}
  /// Clears the value of `exitSlices`. Subsequent reads from it will return its default value.
  public mutating func clearExitSlices() {self._exitSlices = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rotation: Bosdyn_Api_Spot_EulerZYXValue? = nil
  fileprivate var _translation: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _entrySlices: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _exitSlices: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to Sway move.
public struct Bosdyn_Api_Spot_SwayParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How far to move up/down [m].
  public var vertical: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _vertical ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_vertical = newValue}
  }
  /// Returns true if `vertical` has been explicitly set.
  public var hasVertical: Bool {return self._vertical != nil}
  /// Clears the value of `vertical`. Subsequent reads from it will return its default value.
  public mutating func clearVertical() {self._vertical = nil}

  /// How far to move left/right [m].
  public var horizontal: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _horizontal ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_horizontal = newValue}
  }
  /// Returns true if `horizontal` has been explicitly set.
  public var hasHorizontal: Bool {return self._horizontal != nil}
  /// Clears the value of `horizontal`. Subsequent reads from it will return its default value.
  public mutating func clearHorizontal() {self._horizontal = nil}

  /// How much to roll [rad].
  public var roll: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _roll ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_roll = newValue}
  }
  /// Returns true if `roll` has been explicitly set.
  public var hasRoll: Bool {return self._roll != nil}
  /// Clears the value of `roll`. Subsequent reads from it will return its default value.
  public mutating func clearRoll() {self._roll = nil}

  /// What point on the robot's body should the swaying be centered at. For example, should the head move
  /// instead of the butt?
  public var pivot: Bosdyn_Api_Spot_Pivot = .unknown

  /// What style motion should we use?
  public var style: Bosdyn_Api_Spot_SwayParams.SwayStyle = .unknown

  /// How pronounced should the sway-style be? The value is on a scale from [0,1.0].
  public var pronounced: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _pronounced ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_pronounced = newValue}
  }
  /// Returns true if `pronounced` has been explicitly set.
  public var hasPronounced: Bool {return self._pronounced != nil}
  /// Clears the value of `pronounced`. Subsequent reads from it will return its default value.
  public mutating func clearPronounced() {self._pronounced = nil}

  /// Should the robot hold previous values for the vertical, horizontal, and roll axes if the value is
  /// left unspecified (value of zero).
  public var holdZeroAxes: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _holdZeroAxes ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_holdZeroAxes = newValue}
  }
  /// Returns true if `holdZeroAxes` has been explicitly set.
  public var hasHoldZeroAxes: Bool {return self._holdZeroAxes != nil}
  /// Clears the value of `holdZeroAxes`. Subsequent reads from it will return its default value.
  public mutating func clearHoldZeroAxes() {self._holdZeroAxes = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of motion used by the Sway sequence move.
  public enum SwayStyle: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case standard // = 1
    case fastOut // = 2
    case fastReturn // = 3
    case square // = 4
    case spike // = 5
    case plateau // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .standard
      case 2: self = .fastOut
      case 3: self = .fastReturn
      case 4: self = .square
      case 5: self = .spike
      case 6: self = .plateau
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .standard: return 1
      case .fastOut: return 2
      case .fastReturn: return 3
      case .square: return 4
      case .spike: return 5
      case .plateau: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _vertical: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _horizontal: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _roll: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _pronounced: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _holdZeroAxes: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_SwayParams.SwayStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_SwayParams.SwayStyle] = [
    .unknown,
    .standard,
    .fastOut,
    .fastReturn,
    .square,
    .spike,
    .plateau,
  ]
}

#endif  // swift(>=4.2)

/// Parameters specific to ArmMove move.
public struct Bosdyn_Api_Spot_ArmMoveParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Joint angles in radians for the arm joints.
  public var shoulder0: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _shoulder0 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_shoulder0 = newValue}
  }
  /// Returns true if `shoulder0` has been explicitly set.
  public var hasShoulder0: Bool {return self._shoulder0 != nil}
  /// Clears the value of `shoulder0`. Subsequent reads from it will return its default value.
  public mutating func clearShoulder0() {self._shoulder0 = nil}

  public var shoulder1: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _shoulder1 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_shoulder1 = newValue}
  }
  /// Returns true if `shoulder1` has been explicitly set.
  public var hasShoulder1: Bool {return self._shoulder1 != nil}
  /// Clears the value of `shoulder1`. Subsequent reads from it will return its default value.
  public mutating func clearShoulder1() {self._shoulder1 = nil}

  public var elbow0: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _elbow0 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_elbow0 = newValue}
  }
  /// Returns true if `elbow0` has been explicitly set.
  public var hasElbow0: Bool {return self._elbow0 != nil}
  /// Clears the value of `elbow0`. Subsequent reads from it will return its default value.
  public mutating func clearElbow0() {self._elbow0 = nil}

  public var elbow1: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _elbow1 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_elbow1 = newValue}
  }
  /// Returns true if `elbow1` has been explicitly set.
  public var hasElbow1: Bool {return self._elbow1 != nil}
  /// Clears the value of `elbow1`. Subsequent reads from it will return its default value.
  public mutating func clearElbow1() {self._elbow1 = nil}

  public var wrist0: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _wrist0 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_wrist0 = newValue}
  }
  /// Returns true if `wrist0` has been explicitly set.
  public var hasWrist0: Bool {return self._wrist0 != nil}
  /// Clears the value of `wrist0`. Subsequent reads from it will return its default value.
  public mutating func clearWrist0() {self._wrist0 = nil}

  public var wrist1: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _wrist1 ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_wrist1 = newValue}
  }
  /// Returns true if `wrist1` has been explicitly set.
  public var hasWrist1: Bool {return self._wrist1 != nil}
  /// Clears the value of `wrist1`. Subsequent reads from it will return its default value.
  public mutating func clearWrist1() {self._wrist1 = nil}

  /// How the motion should be paced.
  public var easing: Bosdyn_Api_Spot_Easing = .unknown

  /// Movement for the gripper.
  public var gripper: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _gripper ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_gripper = newValue}
  }
  /// Returns true if `gripper` has been explicitly set.
  public var hasGripper: Bool {return self._gripper != nil}
  /// Clears the value of `gripper`. Subsequent reads from it will return its default value.
  public mutating func clearGripper() {self._gripper = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _shoulder0: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _shoulder1: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _elbow0: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _elbow1: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _wrist0: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _wrist1: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _gripper: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

public struct Bosdyn_Api_Spot_WorkspaceArmMoveParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The robot will rotate its body to the specified orientation (roll/pitch/yaw) [rad].
  public var rotation: Bosdyn_Api_Spot_EulerZYXValue {
    get {return _rotation ?? Bosdyn_Api_Spot_EulerZYXValue()}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  public var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  public mutating func clearRotation() {self._rotation = nil}

  /// The positional offset to the robot's current location [m].
  public var translation: Bosdyn_Api_Vec3Value {
    get {return _translation ?? Bosdyn_Api_Vec3Value()}
    set {_translation = newValue}
  }
  /// Returns true if `translation` has been explicitly set.
  public var hasTranslation: Bool {return self._translation != nil}
  /// Clears the value of `translation`. Subsequent reads from it will return its default value.
  public mutating func clearTranslation() {self._translation = nil}

  /// Go to an absolute position/orientation?  Otherwise, relative to starting pose.
  public var absolute: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _absolute ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_absolute = newValue}
  }
  /// Returns true if `absolute` has been explicitly set.
  public var hasAbsolute: Bool {return self._absolute != nil}
  /// Clears the value of `absolute`. Subsequent reads from it will return its default value.
  public mutating func clearAbsolute() {self._absolute = nil}

  /// What frame is the motion specified in.
  public var frame: Bosdyn_Api_Spot_ArmMoveFrame = .unknown

  /// How the motion should be paced.
  public var easing: Bosdyn_Api_Spot_Easing = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rotation: Bosdyn_Api_Spot_EulerZYXValue? = nil
  fileprivate var _translation: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _absolute: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

public struct Bosdyn_Api_Spot_Figure8Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var height: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _height ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  public var width: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _width ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  public var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  public mutating func clearWidth() {self._width = nil}

  public var beatsPerCycle: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _beatsPerCycle ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_beatsPerCycle = newValue}
  }
  /// Returns true if `beatsPerCycle` has been explicitly set.
  public var hasBeatsPerCycle: Bool {return self._beatsPerCycle != nil}
  /// Clears the value of `beatsPerCycle`. Subsequent reads from it will return its default value.
  public mutating func clearBeatsPerCycle() {self._beatsPerCycle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _height: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _width: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _beatsPerCycle: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters for open/close of gripper.
public struct Bosdyn_Api_Spot_GripperParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Angle in radians at which the gripper is open. Note that a 0 radian angle correlates to completely closed.
  public var angle: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _angle ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  public var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  public mutating func clearAngle() {self._angle = nil}

  /// Speed in m/s at which the gripper should open/close to achieve the desired angle.
  public var speed: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _speed ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_speed = newValue}
  }
  /// Returns true if `speed` has been explicitly set.
  public var hasSpeed: Bool {return self._speed != nil}
  /// Clears the value of `speed`. Subsequent reads from it will return its default value.
  public mutating func clearSpeed() {self._speed = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _angle: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _speed: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to KneelLegMove move.
public struct Bosdyn_Api_Spot_KneelLegMoveParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Joint angles of the left front leg in radians.
  /// If mirrored, the joints will be flipped for the other leg.
  public var hipX: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _hipX ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_hipX = newValue}
  }
  /// Returns true if `hipX` has been explicitly set.
  public var hasHipX: Bool {return self._hipX != nil}
  /// Clears the value of `hipX`. Subsequent reads from it will return its default value.
  public mutating func clearHipX() {self._hipX = nil}

  public var hipY: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _hipY ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_hipY = newValue}
  }
  /// Returns true if `hipY` has been explicitly set.
  public var hasHipY: Bool {return self._hipY != nil}
  /// Clears the value of `hipY`. Subsequent reads from it will return its default value.
  public mutating func clearHipY() {self._hipY = nil}

  public var knee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _knee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_knee = newValue}
  }
  /// Returns true if `knee` has been explicitly set.
  public var hasKnee: Bool {return self._knee != nil}
  /// Clears the value of `knee`. Subsequent reads from it will return its default value.
  public mutating func clearKnee() {self._knee = nil}

  /// If mirrored is true, the joints will be flipped for the leg on the other side (right vs left) of the body.
  public var mirror: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _mirror ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_mirror = newValue}
  }
  /// Returns true if `mirror` has been explicitly set.
  public var hasMirror: Bool {return self._mirror != nil}
  /// Clears the value of `mirror`. Subsequent reads from it will return its default value.
  public mutating func clearMirror() {self._mirror = nil}

  /// How the motion should be paced.
  public var easing: Bosdyn_Api_Spot_Easing = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _hipX: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _hipY: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _knee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _mirror: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to KneelLegMove2 move.
public struct Bosdyn_Api_Spot_KneelLegMove2Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Joint angles of the front left leg in radians.
  public var leftHipX: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _leftHipX ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_leftHipX = newValue}
  }
  /// Returns true if `leftHipX` has been explicitly set.
  public var hasLeftHipX: Bool {return self._leftHipX != nil}
  /// Clears the value of `leftHipX`. Subsequent reads from it will return its default value.
  public mutating func clearLeftHipX() {self._leftHipX = nil}

  public var leftHipY: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _leftHipY ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_leftHipY = newValue}
  }
  /// Returns true if `leftHipY` has been explicitly set.
  public var hasLeftHipY: Bool {return self._leftHipY != nil}
  /// Clears the value of `leftHipY`. Subsequent reads from it will return its default value.
  public mutating func clearLeftHipY() {self._leftHipY = nil}

  public var leftKnee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _leftKnee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_leftKnee = newValue}
  }
  /// Returns true if `leftKnee` has been explicitly set.
  public var hasLeftKnee: Bool {return self._leftKnee != nil}
  /// Clears the value of `leftKnee`. Subsequent reads from it will return its default value.
  public mutating func clearLeftKnee() {self._leftKnee = nil}

  /// Joint angles of the front right leg in radians.
  public var rightHipX: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _rightHipX ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_rightHipX = newValue}
  }
  /// Returns true if `rightHipX` has been explicitly set.
  public var hasRightHipX: Bool {return self._rightHipX != nil}
  /// Clears the value of `rightHipX`. Subsequent reads from it will return its default value.
  public mutating func clearRightHipX() {self._rightHipX = nil}

  public var rightHipY: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _rightHipY ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_rightHipY = newValue}
  }
  /// Returns true if `rightHipY` has been explicitly set.
  public var hasRightHipY: Bool {return self._rightHipY != nil}
  /// Clears the value of `rightHipY`. Subsequent reads from it will return its default value.
  public mutating func clearRightHipY() {self._rightHipY = nil}

  public var rightKnee: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _rightKnee ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_rightKnee = newValue}
  }
  /// Returns true if `rightKnee` has been explicitly set.
  public var hasRightKnee: Bool {return self._rightKnee != nil}
  /// Clears the value of `rightKnee`. Subsequent reads from it will return its default value.
  public mutating func clearRightKnee() {self._rightKnee = nil}

  /// How the motion should be paced.
  public var easing: Bosdyn_Api_Spot_Easing = .unknown

  /// Should we combine with the next move into a smooth trajectory.
  public var linkToNext: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _linkToNext ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_linkToNext = newValue}
  }
  /// Returns true if `linkToNext` has been explicitly set.
  public var hasLinkToNext: Bool {return self._linkToNext != nil}
  /// Clears the value of `linkToNext`. Subsequent reads from it will return its default value.
  public mutating func clearLinkToNext() {self._linkToNext = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _leftHipX: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _leftHipY: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _leftKnee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _rightHipX: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _rightHipY: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _rightKnee: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _linkToNext: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to RunningMan move.
public struct Bosdyn_Api_Spot_RunningManParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var velocity: Bosdyn_Api_Vec2Value {
    get {return _velocity ?? Bosdyn_Api_Vec2Value()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  /// How high to pick up the forward-moving feet [m].
  public var swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingHeight ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingHeight = newValue}
  }
  /// Returns true if `swingHeight` has been explicitly set.
  public var hasSwingHeight: Bool {return self._swingHeight != nil}
  /// Clears the value of `swingHeight`. Subsequent reads from it will return its default value.
  public mutating func clearSwingHeight() {self._swingHeight = nil}

  /// How far to spread the contralateral pair of feet [m].
  public var spread: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _spread ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_spread = newValue}
  }
  /// Returns true if `spread` has been explicitly set.
  public var hasSpread: Bool {return self._spread != nil}
  /// Clears the value of `spread`. Subsequent reads from it will return its default value.
  public mutating func clearSpread() {self._spread = nil}

  /// Should we reverse the motion?
  public var reverse: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _reverse ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_reverse = newValue}
  }
  /// Returns true if `reverse` has been explicitly set.
  public var hasReverse: Bool {return self._reverse != nil}
  /// Clears the value of `reverse`. Subsequent reads from it will return its default value.
  public mutating func clearReverse() {self._reverse = nil}

  /// How many full running man cycles should the robot complete in place before starting to move with the desired velocity.
  public var preMoveCycles: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _preMoveCycles ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_preMoveCycles = newValue}
  }
  /// Returns true if `preMoveCycles` has been explicitly set.
  public var hasPreMoveCycles: Bool {return self._preMoveCycles != nil}
  /// Clears the value of `preMoveCycles`. Subsequent reads from it will return its default value.
  public mutating func clearPreMoveCycles() {self._preMoveCycles = nil}

  /// Do the move at some multiple of the dance cadence.
  public var speedMultiplier: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _speedMultiplier ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_speedMultiplier = newValue}
  }
  /// Returns true if `speedMultiplier` has been explicitly set.
  public var hasSpeedMultiplier: Bool {return self._speedMultiplier != nil}
  /// Clears the value of `speedMultiplier`. Subsequent reads from it will return its default value.
  public mutating func clearSpeedMultiplier() {self._speedMultiplier = nil}

  /// What fraction of the time to have feet on the ground.
  public var dutyCycle: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _dutyCycle ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_dutyCycle = newValue}
  }
  /// Returns true if `dutyCycle` has been explicitly set.
  public var hasDutyCycle: Bool {return self._dutyCycle != nil}
  /// Clears the value of `dutyCycle`. Subsequent reads from it will return its default value.
  public mutating func clearDutyCycle() {self._dutyCycle = nil}

  /// How high to hold the center of mass above the ground on average.
  public var comHeight: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _comHeight ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_comHeight = newValue}
  }
  /// Returns true if `comHeight` has been explicitly set.
  public var hasComHeight: Bool {return self._comHeight != nil}
  /// Clears the value of `comHeight`. Subsequent reads from it will return its default value.
  public mutating func clearComHeight() {self._comHeight = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _velocity: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _spread: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _reverse: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _preMoveCycles: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _speedMultiplier: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _dutyCycle: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _comHeight: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to Hop move.
public struct Bosdyn_Api_Spot_HopParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The velocity of the hop gait (X is forward; y is left)[m/s].
  public var velocity: Bosdyn_Api_Vec2Value {
    get {return _velocity ?? Bosdyn_Api_Vec2Value()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  /// How fast the hop gait should turn [rad/s].
  public var yawRate: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yawRate ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yawRate = newValue}
  }
  /// Returns true if `yawRate` has been explicitly set.
  public var hasYawRate: Bool {return self._yawRate != nil}
  /// Clears the value of `yawRate`. Subsequent reads from it will return its default value.
  public mutating func clearYawRate() {self._yawRate = nil}

  /// How long the robot should stand in between each hop.
  public var standTime: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _standTime ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_standTime = newValue}
  }
  /// Returns true if `standTime` has been explicitly set.
  public var hasStandTime: Bool {return self._standTime != nil}
  /// Clears the value of `standTime`. Subsequent reads from it will return its default value.
  public mutating func clearStandTime() {self._standTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _velocity: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _yawRate: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _standTime: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to the RandomRotate move.
public struct Bosdyn_Api_Spot_RandomRotateParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amplitude [rad] of the rotation in each axis.
  public var amplitude: Bosdyn_Api_Spot_EulerZYXValue {
    get {return _amplitude ?? Bosdyn_Api_Spot_EulerZYXValue()}
    set {_amplitude = newValue}
  }
  /// Returns true if `amplitude` has been explicitly set.
  public var hasAmplitude: Bool {return self._amplitude != nil}
  /// Clears the value of `amplitude`. Subsequent reads from it will return its default value.
  public mutating func clearAmplitude() {self._amplitude = nil}

  /// The speed [rad/s] of the motion in each axis.
  public var speed: Bosdyn_Api_Spot_EulerRateZYXValue {
    get {return _speed ?? Bosdyn_Api_Spot_EulerRateZYXValue()}
    set {_speed = newValue}
  }
  /// Returns true if `speed` has been explicitly set.
  public var hasSpeed: Bool {return self._speed != nil}
  /// Clears the value of `speed`. Subsequent reads from it will return its default value.
  public mutating func clearSpeed() {self._speed = nil}

  /// The amount of variation allowed in the speed of the random rotations [m/s]. Note,
  /// this must be a positive value.
  public var speedVariation: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _speedVariation ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_speedVariation = newValue}
  }
  /// Returns true if `speedVariation` has been explicitly set.
  public var hasSpeedVariation: Bool {return self._speedVariation != nil}
  /// Clears the value of `speedVariation`. Subsequent reads from it will return its default value.
  public mutating func clearSpeedVariation() {self._speedVariation = nil}

  /// The specified speed values will be split into this many number of tiers between
  /// the bounds of [speed - speed_variation, speed + speed variation]. Then a tier (with
  /// a specified speed) will be randomly choosen and performed for each axis.
  public var numSpeedTiers: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _numSpeedTiers ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_numSpeedTiers = newValue}
  }
  /// Returns true if `numSpeedTiers` has been explicitly set.
  public var hasNumSpeedTiers: Bool {return self._numSpeedTiers != nil}
  /// Clears the value of `numSpeedTiers`. Subsequent reads from it will return its default value.
  public mutating func clearNumSpeedTiers() {self._numSpeedTiers = nil}

  /// How much can the output speed vary from the choosen tiered speed.
  public var tierVariation: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _tierVariation ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_tierVariation = newValue}
  }
  /// Returns true if `tierVariation` has been explicitly set.
  public var hasTierVariation: Bool {return self._tierVariation != nil}
  /// Clears the value of `tierVariation`. Subsequent reads from it will return its default value.
  public mutating func clearTierVariation() {self._tierVariation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amplitude: Bosdyn_Api_Spot_EulerZYXValue? = nil
  fileprivate var _speed: Bosdyn_Api_Spot_EulerRateZYXValue? = nil
  fileprivate var _speedVariation: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _numSpeedTiers: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _tierVariation: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters for the robot's crawling gait.
public struct Bosdyn_Api_Spot_CrawlParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The number of slices (beats/sub-beats) the duration of a leg swing in the crawl gait should be.
  public var swingSlices: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingSlices ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingSlices = newValue}
  }
  /// Returns true if `swingSlices` has been explicitly set.
  public var hasSwingSlices: Bool {return self._swingSlices != nil}
  /// Clears the value of `swingSlices`. Subsequent reads from it will return its default value.
  public mutating func clearSwingSlices() {self._swingSlices = nil}

  /// The speed at which we should crawl [m/s].  X is forward.  Y is left.
  public var velocity: Bosdyn_Api_Vec2Value {
    get {return _velocity ?? Bosdyn_Api_Vec2Value()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  /// The distance between the robot's left and right feet [m].
  public var stanceWidth: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _stanceWidth ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_stanceWidth = newValue}
  }
  /// Returns true if `stanceWidth` has been explicitly set.
  public var hasStanceWidth: Bool {return self._stanceWidth != nil}
  /// Clears the value of `stanceWidth`. Subsequent reads from it will return its default value.
  public mutating func clearStanceWidth() {self._stanceWidth = nil}

  /// The distance between the robot's front and back feet [m].
  public var stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _stanceLength ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_stanceLength = newValue}
  }
  /// Returns true if `stanceLength` has been explicitly set.
  public var hasStanceLength: Bool {return self._stanceLength != nil}
  /// Clears the value of `stanceLength`. Subsequent reads from it will return its default value.
  public mutating func clearStanceLength() {self._stanceLength = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _swingSlices: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _velocity: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _stanceWidth: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters for the Bourree move.
public struct Bosdyn_Api_Spot_BourreeParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The speed at which we should bourree [m/s].  X is forward.  Y is left.
  public var velocity: Bosdyn_Api_Vec2Value {
    get {return _velocity ?? Bosdyn_Api_Vec2Value()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  /// How fast the bourree should turn [rad/s].
  public var yawRate: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yawRate ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yawRate = newValue}
  }
  /// Returns true if `yawRate` has been explicitly set.
  public var hasYawRate: Bool {return self._yawRate != nil}
  /// Clears the value of `yawRate`. Subsequent reads from it will return its default value.
  public mutating func clearYawRate() {self._yawRate = nil}

  /// How far apart front and hind feet should be. [m]
  public var stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _stanceLength ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_stanceLength = newValue}
  }
  /// Returns true if `stanceLength` has been explicitly set.
  public var hasStanceLength: Bool {return self._stanceLength != nil}
  /// Clears the value of `stanceLength`. Subsequent reads from it will return its default value.
  public mutating func clearStanceLength() {self._stanceLength = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _velocity: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _yawRate: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters for moves that can go to either side.
public struct Bosdyn_Api_Spot_SideParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var side: Bosdyn_Api_Spot_SideParams.Side = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Side: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case left // = 1
    case right // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .left
      case 2: self = .right
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .left: return 1
      case .right: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_SideParams.Side: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_SideParams.Side] = [
    .unknown,
    .left,
    .right,
  ]
}

#endif  // swift(>=4.2)

/// Parameters for the robot making a jump.
public struct Bosdyn_Api_Spot_JumpParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amount in radians that the robot will turn while in the air.
  public var yaw: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yaw ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yaw = newValue}
  }
  /// Returns true if `yaw` has been explicitly set.
  public var hasYaw: Bool {return self._yaw != nil}
  /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
  public mutating func clearYaw() {self._yaw = nil}

  /// The amount of time in slices (beats) that the robot will be in the air.
  public var flightSlices: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _flightSlices ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_flightSlices = newValue}
  }
  /// Returns true if `flightSlices` has been explicitly set.
  public var hasFlightSlices: Bool {return self._flightSlices != nil}
  /// Clears the value of `flightSlices`. Subsequent reads from it will return its default value.
  public mutating func clearFlightSlices() {self._flightSlices = nil}

  /// The distance between the robot's left and right feet [m].
  public var stanceWidth: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _stanceWidth ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_stanceWidth = newValue}
  }
  /// Returns true if `stanceWidth` has been explicitly set.
  public var hasStanceWidth: Bool {return self._stanceWidth != nil}
  /// Clears the value of `stanceWidth`. Subsequent reads from it will return its default value.
  public mutating func clearStanceWidth() {self._stanceWidth = nil}

  /// The distance between the robot's front and back feet [m].
  public var stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _stanceLength ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_stanceLength = newValue}
  }
  /// Returns true if `stanceLength` has been explicitly set.
  public var hasStanceLength: Bool {return self._stanceLength != nil}
  /// Clears the value of `stanceLength`. Subsequent reads from it will return its default value.
  public mutating func clearStanceLength() {self._stanceLength = nil}

  /// Should we turn to a yaw in choreography sequence frame?
  public var absolute: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _absolute ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_absolute = newValue}
  }
  /// Returns true if `absolute` has been explicitly set.
  public var hasAbsolute: Bool {return self._absolute != nil}
  /// Clears the value of `absolute`. Subsequent reads from it will return its default value.
  public mutating func clearAbsolute() {self._absolute = nil}

  /// How far the robot should jump [m].
  public var translation: Bosdyn_Api_Vec2Value {
    get {return _translation ?? Bosdyn_Api_Vec2Value()}
    set {_translation = newValue}
  }
  /// Returns true if `translation` has been explicitly set.
  public var hasTranslation: Bool {return self._translation != nil}
  /// Clears the value of `translation`. Subsequent reads from it will return its default value.
  public mutating func clearTranslation() {self._translation = nil}

  /// How much it should lo/td the first pair of lets ahead of the other pair.  In fraction of flight time.
  public var splitFraction: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _splitFraction ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_splitFraction = newValue}
  }
  /// Returns true if `splitFraction` has been explicitly set.
  public var hasSplitFraction: Bool {return self._splitFraction != nil}
  /// Clears the value of `splitFraction`. Subsequent reads from it will return its default value.
  public mutating func clearSplitFraction() {self._splitFraction = nil}

  public var leadLegPair: Bosdyn_Api_Spot_JumpParams.Lead = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// If split_fraction is non-zero, which legs to lift first.
  public enum Lead: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case auto // = 1
    case front // = 2
    case hind // = 3
    case left // = 4
    case right // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .auto
      case 2: self = .front
      case 3: self = .hind
      case 4: self = .left
      case 5: self = .right
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .auto: return 1
      case .front: return 2
      case .hind: return 3
      case .left: return 4
      case .right: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _yaw: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _flightSlices: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _stanceWidth: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _stanceLength: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _absolute: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _translation: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _splitFraction: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_Spot_JumpParams.Lead: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Spot_JumpParams.Lead] = [
    .unknown,
    .auto,
    .front,
    .hind,
    .left,
    .right,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_Spot_StepParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Which foot to use (FL = 1, FR = 2, HL = 3, HR = 4).
  public var foot: Bosdyn_Api_Spot_Leg = .unknown

  /// Offset of the foot from it's nominal position, in meters.
  public var offset: Bosdyn_Api_Vec2Value {
    get {return _offset ?? Bosdyn_Api_Vec2Value()}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  public var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  public mutating func clearOffset() {self._offset = nil}

  /// Should we use a second foot?  (None = 0, FL = 1, FR = 2, HL = 3, HR = 4).
  public var secondFoot: Bosdyn_Api_Spot_Leg = .unknown

  /// Where should the swing foot go?  This vector should be described in a gravity-aligned body frame
  /// relative to the centerpoint of the swing. If set to {0,0,0}, uses the default swing path.
  public var swingWaypoint: Bosdyn_Api_Vec3Value {
    get {return _swingWaypoint ?? Bosdyn_Api_Vec3Value()}
    set {_swingWaypoint = newValue}
  }
  /// Returns true if `swingWaypoint` has been explicitly set.
  public var hasSwingWaypoint: Bool {return self._swingWaypoint != nil}
  /// Clears the value of `swingWaypoint`. Subsequent reads from it will return its default value.
  public mutating func clearSwingWaypoint() {self._swingWaypoint = nil}

  /// Parameters for altering swing.
  /// Note that these will have no effect if swing_waypoint is specified. As well, a zero (or nearly zero)
  /// value will be considered as an unspecified parameter.
  public var swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingHeight ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingHeight = newValue}
  }
  /// Returns true if `swingHeight` has been explicitly set.
  public var hasSwingHeight: Bool {return self._swingHeight != nil}
  /// Clears the value of `swingHeight`. Subsequent reads from it will return its default value.
  public mutating func clearSwingHeight() {self._swingHeight = nil}

  /// m/s
  public var liftoffVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _liftoffVelocity ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_liftoffVelocity = newValue}
  }
  /// Returns true if `liftoffVelocity` has been explicitly set.
  public var hasLiftoffVelocity: Bool {return self._liftoffVelocity != nil}
  /// Clears the value of `liftoffVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearLiftoffVelocity() {self._liftoffVelocity = nil}

  /// m/s
  public var touchdownVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _touchdownVelocity ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_touchdownVelocity = newValue}
  }
  /// Returns true if `touchdownVelocity` has been explicitly set.
  public var hasTouchdownVelocity: Bool {return self._touchdownVelocity != nil}
  /// Clears the value of `touchdownVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearTouchdownVelocity() {self._touchdownVelocity = nil}

  /// Should we mirror the offset for the second foot?
  /// Ignored if second_foot is set to None
  public var mirrorX: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _mirrorX ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_mirrorX = newValue}
  }
  /// Returns true if `mirrorX` has been explicitly set.
  public var hasMirrorX: Bool {return self._mirrorX != nil}
  /// Clears the value of `mirrorX`. Subsequent reads from it will return its default value.
  public mutating func clearMirrorX() {self._mirrorX = nil}

  public var mirrorY: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _mirrorY ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_mirrorY = newValue}
  }
  /// Returns true if `mirrorY` has been explicitly set.
  public var hasMirrorY: Bool {return self._mirrorY != nil}
  /// Clears the value of `mirrorY`. Subsequent reads from it will return its default value.
  public mutating func clearMirrorY() {self._mirrorY = nil}

  /// *** Deprecation Warning ***
  /// DEPRECATED as of 2.3.0: The mirror field has been deprecated in favor for a more descriptive
  ///  break down to mirror_x and mirror_y.
  /// The following field will be deprecated and moved to 'reserved' in a future release.
  public var mirror: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _mirror ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_mirror = newValue}
  }
  /// Returns true if `mirror` has been explicitly set.
  public var hasMirror: Bool {return self._mirror != nil}
  /// Clears the value of `mirror`. Subsequent reads from it will return its default value.
  public mutating func clearMirror() {self._mirror = nil}

  /// What fraction of the swing should be spent near the waypoint.
  public var waypointDwell: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _waypointDwell ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_waypointDwell = newValue}
  }
  /// Returns true if `waypointDwell` has been explicitly set.
  public var hasWaypointDwell: Bool {return self._waypointDwell != nil}
  /// Clears the value of `waypointDwell`. Subsequent reads from it will return its default value.
  public mutating func clearWaypointDwell() {self._waypointDwell = nil}

  /// Should we touch the ground and come back rather than stepping to a new place?
  public var touch: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _touch ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_touch = newValue}
  }
  /// Returns true if `touch` has been explicitly set.
  public var hasTouch: Bool {return self._touch != nil}
  /// Clears the value of `touch`. Subsequent reads from it will return its default value.
  public mutating func clearTouch() {self._touch = nil}

  public var touchOffset: Bosdyn_Api_Vec2Value {
    get {return _touchOffset ?? Bosdyn_Api_Vec2Value()}
    set {_touchOffset = newValue}
  }
  /// Returns true if `touchOffset` has been explicitly set.
  public var hasTouchOffset: Bool {return self._touchOffset != nil}
  /// Clears the value of `touchOffset`. Subsequent reads from it will return its default value.
  public mutating func clearTouchOffset() {self._touchOffset = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _offset: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _swingWaypoint: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _liftoffVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _touchdownVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _mirrorX: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _mirrorY: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _mirror: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _waypointDwell: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _touch: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _touchOffset: Bosdyn_Api_Vec2Value? = nil
}

/// Parameters for the robot rotating the body.
public struct Bosdyn_Api_Spot_RotateBodyParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The robot will rotate its body to the specified orientation (roll/pitch/yaw).
  public var rotation: Bosdyn_Api_Spot_EulerZYXValue {
    get {return _rotation ?? Bosdyn_Api_Spot_EulerZYXValue()}
    set {_rotation = newValue}
  }
  /// Returns true if `rotation` has been explicitly set.
  public var hasRotation: Bool {return self._rotation != nil}
  /// Clears the value of `rotation`. Subsequent reads from it will return its default value.
  public mutating func clearRotation() {self._rotation = nil}

  /// If true, the robot will transition back to the initial pose we started at before this choreography sequence move begin execution,
  /// and otherwise it will remain in whatever pose it is in after completing the choreography sequence move.
  public var returnToStartPose: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _returnToStartPose ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_returnToStartPose = newValue}
  }
  /// Returns true if `returnToStartPose` has been explicitly set.
  public var hasReturnToStartPose: Bool {return self._returnToStartPose != nil}
  /// Clears the value of `returnToStartPose`. Subsequent reads from it will return its default value.
  public mutating func clearReturnToStartPose() {self._returnToStartPose = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rotation: Bosdyn_Api_Spot_EulerZYXValue? = nil
  fileprivate var _returnToStartPose: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to the ButtCircle DanceMove.
public struct Bosdyn_Api_Spot_ButtCircleParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How big a circle the robutt will move in. Described in meters.
  public var radius: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _radius ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_radius = newValue}
  }
  /// Returns true if `radius` has been explicitly set.
  public var hasRadius: Bool {return self._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
  public mutating func clearRadius() {self._radius = nil}

  /// The number of beats that elapse while performing the butt circle.
  public var beatsPerCircle: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _beatsPerCircle ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_beatsPerCircle = newValue}
  }
  /// Returns true if `beatsPerCircle` has been explicitly set.
  public var hasBeatsPerCircle: Bool {return self._beatsPerCircle != nil}
  /// Clears the value of `beatsPerCircle`. Subsequent reads from it will return its default value.
  public mutating func clearBeatsPerCircle() {self._beatsPerCircle = nil}

  /// The number of circles that will be performed.  If non-zero, takes precedence over beats_per_circle.
  public var numberOfCircles: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _numberOfCircles ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_numberOfCircles = newValue}
  }
  /// Returns true if `numberOfCircles` has been explicitly set.
  public var hasNumberOfCircles: Bool {return self._numberOfCircles != nil}
  /// Clears the value of `numberOfCircles`. Subsequent reads from it will return its default value.
  public mutating func clearNumberOfCircles() {self._numberOfCircles = nil}

  /// The pivot point the butt circles should be centered around.
  public var pivot: Bosdyn_Api_Spot_Pivot = .unknown

  /// Which way to rotate.
  public var clockwise: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _clockwise ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_clockwise = newValue}
  }
  /// Returns true if `clockwise` has been explicitly set.
  public var hasClockwise: Bool {return self._clockwise != nil}
  /// Clears the value of `clockwise`. Subsequent reads from it will return its default value.
  public mutating func clearClockwise() {self._clockwise = nil}

  /// Where to start.  Zero is up.
  public var startingAngle: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _startingAngle ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_startingAngle = newValue}
  }
  /// Returns true if `startingAngle` has been explicitly set.
  public var hasStartingAngle: Bool {return self._startingAngle != nil}
  /// Clears the value of `startingAngle`. Subsequent reads from it will return its default value.
  public mutating func clearStartingAngle() {self._startingAngle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _radius: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _beatsPerCircle: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _numberOfCircles: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _clockwise: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _startingAngle: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to twerking
public struct Bosdyn_Api_Spot_TwerkParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How far the robot should twerk in meters.
  public var height: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _height ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _height: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to turning.
public struct Bosdyn_Api_Spot_TurnParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// How far to turn, described in radians with a positive value representing a turn to the left.
  public var yaw: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _yaw ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_yaw = newValue}
  }
  /// Returns true if `yaw` has been explicitly set.
  public var hasYaw: Bool {return self._yaw != nil}
  /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
  public mutating func clearYaw() {self._yaw = nil}

  /// Should we turn to a yaw in choreography sequence frame?
  public var absolute: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _absolute ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_absolute = newValue}
  }
  /// Returns true if `absolute` has been explicitly set.
  public var hasAbsolute: Bool {return self._absolute != nil}
  /// Clears the value of `absolute`. Subsequent reads from it will return its default value.
  public mutating func clearAbsolute() {self._absolute = nil}

  /// Swing parameters to describe the footstep pattern during the turning [height in meters]. Note,
  /// a zero (or nearly zero) value will be considered as an unspecified parameter.
  public var swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingHeight ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingHeight = newValue}
  }
  /// Returns true if `swingHeight` has been explicitly set.
  public var hasSwingHeight: Bool {return self._swingHeight != nil}
  /// Clears the value of `swingHeight`. Subsequent reads from it will return its default value.
  public mutating func clearSwingHeight() {self._swingHeight = nil}

  /// Swing parameter to describe the foot's swing velocity during the turning [m/s]. Note, a zero
  /// (or nearly zero) value will be considered as an unspecified parameter.
  public var swingVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingVelocity ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingVelocity = newValue}
  }
  /// Returns true if `swingVelocity` has been explicitly set.
  public var hasSwingVelocity: Bool {return self._swingVelocity != nil}
  /// Clears the value of `swingVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearSwingVelocity() {self._swingVelocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _yaw: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _absolute: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _swingVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to pace translation.
public struct Bosdyn_Api_Spot_Pace2StepParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Where to move.
  public var motion: Bosdyn_Api_Vec2Value {
    get {return _motion ?? Bosdyn_Api_Vec2Value()}
    set {_motion = newValue}
  }
  /// Returns true if `motion` has been explicitly set.
  public var hasMotion: Bool {return self._motion != nil}
  /// Clears the value of `motion`. Subsequent reads from it will return its default value.
  public mutating func clearMotion() {self._motion = nil}

  /// Swing parameters to describe the footstep pattern during the pace translation gait. Note, a zero (or nearly zero)
  /// value will be considered as an unspecified parameter.
  public var swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingHeight ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingHeight = newValue}
  }
  /// Returns true if `swingHeight` has been explicitly set.
  public var hasSwingHeight: Bool {return self._swingHeight != nil}
  /// Clears the value of `swingHeight`. Subsequent reads from it will return its default value.
  public mutating func clearSwingHeight() {self._swingHeight = nil}

  public var swingVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _swingVelocity ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_swingVelocity = newValue}
  }
  /// Returns true if `swingVelocity` has been explicitly set.
  public var hasSwingVelocity: Bool {return self._swingVelocity != nil}
  /// Clears the value of `swingVelocity`. Subsequent reads from it will return its default value.
  public mutating func clearSwingVelocity() {self._swingVelocity = nil}

  /// Should the motion be relative to where the dance started (true) rather than relative to the current position (false).
  public var absolute: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _absolute ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_absolute = newValue}
  }
  /// Returns true if `absolute` has been explicitly set.
  public var hasAbsolute: Bool {return self._absolute != nil}
  /// Clears the value of `absolute`. Subsequent reads from it will return its default value.
  public mutating func clearAbsolute() {self._absolute = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _motion: Bosdyn_Api_Vec2Value? = nil
  fileprivate var _swingHeight: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _swingVelocity: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _absolute: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to the chicken head move.
public struct Bosdyn_Api_Spot_ChickenHeadParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Bobs the head in this direction in the robot footprint frame.
  public var bobMagnitude: Bosdyn_Api_Vec3Value {
    get {return _bobMagnitude ?? Bosdyn_Api_Vec3Value()}
    set {_bobMagnitude = newValue}
  }
  /// Returns true if `bobMagnitude` has been explicitly set.
  public var hasBobMagnitude: Bool {return self._bobMagnitude != nil}
  /// Clears the value of `bobMagnitude`. Subsequent reads from it will return its default value.
  public mutating func clearBobMagnitude() {self._bobMagnitude = nil}

  /// How fast to bob the head.
  public var beatsPerCycle: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _beatsPerCycle ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_beatsPerCycle = newValue}
  }
  /// Returns true if `beatsPerCycle` has been explicitly set.
  public var hasBeatsPerCycle: Bool {return self._beatsPerCycle != nil}
  /// Clears the value of `beatsPerCycle`. Subsequent reads from it will return its default value.
  public mutating func clearBeatsPerCycle() {self._beatsPerCycle = nil}

  /// Should we move the frame when the robot steps?
  public var follow: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _follow ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_follow = newValue}
  }
  /// Returns true if `follow` has been explicitly set.
  public var hasFollow: Bool {return self._follow != nil}
  /// Clears the value of `follow`. Subsequent reads from it will return its default value.
  public mutating func clearFollow() {self._follow = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bobMagnitude: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _beatsPerCycle: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _follow: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to clapping.
public struct Bosdyn_Api_Spot_ClapParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Direction in a gravity-aligned body frame of clapping motion. A typical value for the location is (0, 1, 0).
  public var direction: Bosdyn_Api_Vec3Value {
    get {return _direction ?? Bosdyn_Api_Vec3Value()}
    set {_direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  public var hasDirection: Bool {return self._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  public mutating func clearDirection() {self._direction = nil}

  /// Location in body frame of the clap. A typical value for the location is (0.4, 0, -0.5).
  public var location: Bosdyn_Api_Vec3Value {
    get {return _location ?? Bosdyn_Api_Vec3Value()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  /// Speed of the clap [m/s].
  public var speed: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _speed ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_speed = newValue}
  }
  /// Returns true if `speed` has been explicitly set.
  public var hasSpeed: Bool {return self._speed != nil}
  /// Clears the value of `speed`. Subsequent reads from it will return its default value.
  public mutating func clearSpeed() {self._speed = nil}

  /// How far apart the limbs are before clapping [m].
  public var clapDistance: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _clapDistance ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_clapDistance = newValue}
  }
  /// Returns true if `clapDistance` has been explicitly set.
  public var hasClapDistance: Bool {return self._clapDistance != nil}
  /// Clears the value of `clapDistance`. Subsequent reads from it will return its default value.
  public mutating func clearClapDistance() {self._clapDistance = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _direction: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _location: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _speed: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _clapDistance: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
}

/// Parameters specific to the kneel_circles move.
public struct Bosdyn_Api_Spot_KneelCircleParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Location in body frame of the circle center. A typical value for the location is (0.4, 0, -0.5).
  public var location: Bosdyn_Api_Vec3Value {
    get {return _location ?? Bosdyn_Api_Vec3Value()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {self._location = nil}

  /// How beats per circle.  One or two are reasonable values.
  public var beatsPerCircle: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _beatsPerCircle ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_beatsPerCircle = newValue}
  }
  /// Returns true if `beatsPerCircle` has been explicitly set.
  public var hasBeatsPerCircle: Bool {return self._beatsPerCircle != nil}
  /// Clears the value of `beatsPerCircle`. Subsequent reads from it will return its default value.
  public mutating func clearBeatsPerCircle() {self._beatsPerCircle = nil}

  /// How many circles to perform.  Mutually exclusive with beats_per_circle.
  public var numberOfCircles: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _numberOfCircles ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_numberOfCircles = newValue}
  }
  /// Returns true if `numberOfCircles` has been explicitly set.
  public var hasNumberOfCircles: Bool {return self._numberOfCircles != nil}
  /// Clears the value of `numberOfCircles`. Subsequent reads from it will return its default value.
  public mutating func clearNumberOfCircles() {self._numberOfCircles = nil}

  /// How far apart the feet are when circling [m].
  public var offset: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _offset ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  public var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  public mutating func clearOffset() {self._offset = nil}

  /// Size of the circles [m].
  public var radius: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _radius ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_radius = newValue}
  }
  /// Returns true if `radius` has been explicitly set.
  public var hasRadius: Bool {return self._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
  public mutating func clearRadius() {self._radius = nil}

  /// Which way to circle.
  public var reverse: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _reverse ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_reverse = newValue}
  }
  /// Returns true if `reverse` has been explicitly set.
  public var hasReverse: Bool {return self._reverse != nil}
  /// Clears the value of `reverse`. Subsequent reads from it will return its default value.
  public mutating func clearReverse() {self._reverse = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _location: Bosdyn_Api_Vec3Value? = nil
  fileprivate var _beatsPerCircle: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _numberOfCircles: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _offset: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _radius: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _reverse: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

/// Parameters specific to FrontUp move.
public struct Bosdyn_Api_Spot_FrontUpParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Should we raise the hind feet instead.
  public var mirror: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _mirror ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_mirror = newValue}
  }
  /// Returns true if `mirror` has been explicitly set.
  public var hasMirror: Bool {return self._mirror != nil}
  /// Clears the value of `mirror`. Subsequent reads from it will return its default value.
  public mutating func clearMirror() {self._mirror = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _mirror: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot"

extension Bosdyn_Api_Spot_Pivot: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PIVOT_UNKNOWN"),
    1: .same(proto: "PIVOT_FRONT"),
    2: .same(proto: "PIVOT_HIND"),
    3: .same(proto: "PIVOT_CENTER"),
  ]
}

extension Bosdyn_Api_Spot_Easing: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EASING_UNKNOWN"),
    1: .same(proto: "EASING_LINEAR"),
    2: .same(proto: "EASING_QUADRATIC_INPUT"),
    3: .same(proto: "EASING_QUADRATIC_OUTPUT"),
    4: .same(proto: "EASING_QUADRATIC_IN_OUT"),
    5: .same(proto: "EASING_CUBIC_INPUT"),
    6: .same(proto: "EASING_CUBIC_OUTPUT"),
    7: .same(proto: "EASING_CUBIC_IN_OUT"),
    8: .same(proto: "EASING_EXPONENTIAL_INPUT"),
    9: .same(proto: "EASING_EXPONENTIAL_OUTPUT"),
    10: .same(proto: "EASING_EXPONENTIAL_IN_OUT"),
  ]
}

extension Bosdyn_Api_Spot_ArmMoveFrame: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ARM_MOVE_FRAME_UNKNOWN"),
    1: .same(proto: "ARM_MOVE_FRAME_CENTER_OF_FOOTPRINT"),
    2: .same(proto: "ARM_MOVE_FRAME_HAND"),
    3: .same(proto: "ARM_MOVE_FRAME_BODY"),
    4: .same(proto: "ARM_MOVE_FRAME_SHOULDER"),
    5: .same(proto: "ARM_MOVE_FRAME_SHADOW"),
  ]
}

extension Bosdyn_Api_Spot_Leg: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "LEG_NO_LEG"),
    0: .same(proto: "LEG_UNKNOWN"),
    1: .same(proto: "LEG_FRONT_LEFT"),
    2: .same(proto: "LEG_FRONT_RIGHT"),
    3: .same(proto: "LEG_HIND_LEFT"),
    4: .same(proto: "LEG_HIND_RIGHT"),
  ]
}

extension Bosdyn_Api_Spot_EulerZYXValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EulerZYXValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "roll"),
    2: .same(proto: "pitch"),
    3: .same(proto: "yaw"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._roll)
      case 2: try decoder.decodeSingularMessageField(value: &self._pitch)
      case 3: try decoder.decodeSingularMessageField(value: &self._yaw)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pitch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_EulerZYXValue, rhs: Bosdyn_Api_Spot_EulerZYXValue) -> Bool {
    if lhs._roll != rhs._roll {return false}
    if lhs._pitch != rhs._pitch {return false}
    if lhs._yaw != rhs._yaw {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_EulerRateZYXValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EulerRateZYXValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "roll"),
    2: .same(proto: "pitch"),
    3: .same(proto: "yaw"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._roll)
      case 2: try decoder.decodeSingularMessageField(value: &self._pitch)
      case 3: try decoder.decodeSingularMessageField(value: &self._yaw)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pitch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_EulerRateZYXValue, rhs: Bosdyn_Api_Spot_EulerRateZYXValue) -> Bool {
    if lhs._roll != rhs._roll {return false}
    if lhs._pitch != rhs._pitch {return false}
    if lhs._yaw != rhs._yaw {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_BodyHoldParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BodyHoldParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rotation"),
    2: .same(proto: "translation"),
    3: .standard(proto: "entry_slices"),
    4: .standard(proto: "exit_slices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._rotation)
      case 2: try decoder.decodeSingularMessageField(value: &self._translation)
      case 3: try decoder.decodeSingularMessageField(value: &self._entrySlices)
      case 4: try decoder.decodeSingularMessageField(value: &self._exitSlices)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._translation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._entrySlices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._exitSlices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_BodyHoldParams, rhs: Bosdyn_Api_Spot_BodyHoldParams) -> Bool {
    if lhs._rotation != rhs._rotation {return false}
    if lhs._translation != rhs._translation {return false}
    if lhs._entrySlices != rhs._entrySlices {return false}
    if lhs._exitSlices != rhs._exitSlices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_SwayParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SwayParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vertical"),
    2: .same(proto: "horizontal"),
    3: .same(proto: "roll"),
    4: .same(proto: "pivot"),
    5: .same(proto: "style"),
    6: .same(proto: "pronounced"),
    7: .standard(proto: "hold_zero_axes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._vertical)
      case 2: try decoder.decodeSingularMessageField(value: &self._horizontal)
      case 3: try decoder.decodeSingularMessageField(value: &self._roll)
      case 4: try decoder.decodeSingularEnumField(value: &self.pivot)
      case 5: try decoder.decodeSingularEnumField(value: &self.style)
      case 6: try decoder.decodeSingularMessageField(value: &self._pronounced)
      case 7: try decoder.decodeSingularMessageField(value: &self._holdZeroAxes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vertical {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._horizontal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._roll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.pivot != .unknown {
      try visitor.visitSingularEnumField(value: self.pivot, fieldNumber: 4)
    }
    if self.style != .unknown {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 5)
    }
    if let v = self._pronounced {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._holdZeroAxes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_SwayParams, rhs: Bosdyn_Api_Spot_SwayParams) -> Bool {
    if lhs._vertical != rhs._vertical {return false}
    if lhs._horizontal != rhs._horizontal {return false}
    if lhs._roll != rhs._roll {return false}
    if lhs.pivot != rhs.pivot {return false}
    if lhs.style != rhs.style {return false}
    if lhs._pronounced != rhs._pronounced {return false}
    if lhs._holdZeroAxes != rhs._holdZeroAxes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_SwayParams.SwayStyle: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SWAY_STYLE_UNKNOWN"),
    1: .same(proto: "SWAY_STYLE_STANDARD"),
    2: .same(proto: "SWAY_STYLE_FAST_OUT"),
    3: .same(proto: "SWAY_STYLE_FAST_RETURN"),
    4: .same(proto: "SWAY_STYLE_SQUARE"),
    5: .same(proto: "SWAY_STYLE_SPIKE"),
    6: .same(proto: "SWAY_STYLE_PLATEAU"),
  ]
}

extension Bosdyn_Api_Spot_ArmMoveParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArmMoveParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shoulder_0"),
    2: .standard(proto: "shoulder_1"),
    3: .standard(proto: "elbow_0"),
    4: .standard(proto: "elbow_1"),
    5: .standard(proto: "wrist_0"),
    6: .standard(proto: "wrist_1"),
    7: .same(proto: "easing"),
    8: .same(proto: "gripper"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._shoulder0)
      case 2: try decoder.decodeSingularMessageField(value: &self._shoulder1)
      case 3: try decoder.decodeSingularMessageField(value: &self._elbow0)
      case 4: try decoder.decodeSingularMessageField(value: &self._elbow1)
      case 5: try decoder.decodeSingularMessageField(value: &self._wrist0)
      case 6: try decoder.decodeSingularMessageField(value: &self._wrist1)
      case 7: try decoder.decodeSingularEnumField(value: &self.easing)
      case 8: try decoder.decodeSingularMessageField(value: &self._gripper)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._shoulder0 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._shoulder1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._elbow0 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._elbow1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._wrist0 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._wrist1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.easing != .unknown {
      try visitor.visitSingularEnumField(value: self.easing, fieldNumber: 7)
    }
    if let v = self._gripper {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_ArmMoveParams, rhs: Bosdyn_Api_Spot_ArmMoveParams) -> Bool {
    if lhs._shoulder0 != rhs._shoulder0 {return false}
    if lhs._shoulder1 != rhs._shoulder1 {return false}
    if lhs._elbow0 != rhs._elbow0 {return false}
    if lhs._elbow1 != rhs._elbow1 {return false}
    if lhs._wrist0 != rhs._wrist0 {return false}
    if lhs._wrist1 != rhs._wrist1 {return false}
    if lhs.easing != rhs.easing {return false}
    if lhs._gripper != rhs._gripper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_WorkspaceArmMoveParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkspaceArmMoveParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rotation"),
    2: .same(proto: "translation"),
    3: .same(proto: "absolute"),
    4: .same(proto: "frame"),
    5: .same(proto: "easing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._rotation)
      case 2: try decoder.decodeSingularMessageField(value: &self._translation)
      case 3: try decoder.decodeSingularMessageField(value: &self._absolute)
      case 4: try decoder.decodeSingularEnumField(value: &self.frame)
      case 5: try decoder.decodeSingularEnumField(value: &self.easing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._translation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._absolute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.frame != .unknown {
      try visitor.visitSingularEnumField(value: self.frame, fieldNumber: 4)
    }
    if self.easing != .unknown {
      try visitor.visitSingularEnumField(value: self.easing, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_WorkspaceArmMoveParams, rhs: Bosdyn_Api_Spot_WorkspaceArmMoveParams) -> Bool {
    if lhs._rotation != rhs._rotation {return false}
    if lhs._translation != rhs._translation {return false}
    if lhs._absolute != rhs._absolute {return false}
    if lhs.frame != rhs.frame {return false}
    if lhs.easing != rhs.easing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_Figure8Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Figure8Params"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    3: .standard(proto: "beats_per_cycle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._height)
      case 2: try decoder.decodeSingularMessageField(value: &self._width)
      case 3: try decoder.decodeSingularMessageField(value: &self._beatsPerCycle)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._width {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._beatsPerCycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_Figure8Params, rhs: Bosdyn_Api_Spot_Figure8Params) -> Bool {
    if lhs._height != rhs._height {return false}
    if lhs._width != rhs._width {return false}
    if lhs._beatsPerCycle != rhs._beatsPerCycle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_GripperParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GripperParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "angle"),
    2: .same(proto: "speed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._angle)
      case 2: try decoder.decodeSingularMessageField(value: &self._speed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._angle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._speed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_GripperParams, rhs: Bosdyn_Api_Spot_GripperParams) -> Bool {
    if lhs._angle != rhs._angle {return false}
    if lhs._speed != rhs._speed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_KneelLegMoveParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KneelLegMoveParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hip_x"),
    2: .standard(proto: "hip_y"),
    3: .same(proto: "knee"),
    4: .same(proto: "mirror"),
    5: .same(proto: "easing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._hipX)
      case 2: try decoder.decodeSingularMessageField(value: &self._hipY)
      case 3: try decoder.decodeSingularMessageField(value: &self._knee)
      case 4: try decoder.decodeSingularMessageField(value: &self._mirror)
      case 5: try decoder.decodeSingularEnumField(value: &self.easing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._hipX {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._hipY {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._knee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._mirror {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.easing != .unknown {
      try visitor.visitSingularEnumField(value: self.easing, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_KneelLegMoveParams, rhs: Bosdyn_Api_Spot_KneelLegMoveParams) -> Bool {
    if lhs._hipX != rhs._hipX {return false}
    if lhs._hipY != rhs._hipY {return false}
    if lhs._knee != rhs._knee {return false}
    if lhs._mirror != rhs._mirror {return false}
    if lhs.easing != rhs.easing {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_KneelLegMove2Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KneelLegMove2Params"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "left_hip_x"),
    2: .standard(proto: "left_hip_y"),
    3: .standard(proto: "left_knee"),
    4: .standard(proto: "right_hip_x"),
    5: .standard(proto: "right_hip_y"),
    6: .standard(proto: "right_knee"),
    7: .same(proto: "easing"),
    8: .standard(proto: "link_to_next"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._leftHipX)
      case 2: try decoder.decodeSingularMessageField(value: &self._leftHipY)
      case 3: try decoder.decodeSingularMessageField(value: &self._leftKnee)
      case 4: try decoder.decodeSingularMessageField(value: &self._rightHipX)
      case 5: try decoder.decodeSingularMessageField(value: &self._rightHipY)
      case 6: try decoder.decodeSingularMessageField(value: &self._rightKnee)
      case 7: try decoder.decodeSingularEnumField(value: &self.easing)
      case 8: try decoder.decodeSingularMessageField(value: &self._linkToNext)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._leftHipX {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._leftHipY {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._leftKnee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._rightHipX {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._rightHipY {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._rightKnee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.easing != .unknown {
      try visitor.visitSingularEnumField(value: self.easing, fieldNumber: 7)
    }
    if let v = self._linkToNext {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_KneelLegMove2Params, rhs: Bosdyn_Api_Spot_KneelLegMove2Params) -> Bool {
    if lhs._leftHipX != rhs._leftHipX {return false}
    if lhs._leftHipY != rhs._leftHipY {return false}
    if lhs._leftKnee != rhs._leftKnee {return false}
    if lhs._rightHipX != rhs._rightHipX {return false}
    if lhs._rightHipY != rhs._rightHipY {return false}
    if lhs._rightKnee != rhs._rightKnee {return false}
    if lhs.easing != rhs.easing {return false}
    if lhs._linkToNext != rhs._linkToNext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_RunningManParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunningManParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "velocity"),
    2: .standard(proto: "swing_height"),
    3: .same(proto: "spread"),
    4: .same(proto: "reverse"),
    5: .standard(proto: "pre_move_cycles"),
    6: .standard(proto: "speed_multiplier"),
    7: .standard(proto: "duty_cycle"),
    8: .standard(proto: "com_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 2: try decoder.decodeSingularMessageField(value: &self._swingHeight)
      case 3: try decoder.decodeSingularMessageField(value: &self._spread)
      case 4: try decoder.decodeSingularMessageField(value: &self._reverse)
      case 5: try decoder.decodeSingularMessageField(value: &self._preMoveCycles)
      case 6: try decoder.decodeSingularMessageField(value: &self._speedMultiplier)
      case 7: try decoder.decodeSingularMessageField(value: &self._dutyCycle)
      case 8: try decoder.decodeSingularMessageField(value: &self._comHeight)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._swingHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._spread {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._reverse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._preMoveCycles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._speedMultiplier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._dutyCycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._comHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_RunningManParams, rhs: Bosdyn_Api_Spot_RunningManParams) -> Bool {
    if lhs._velocity != rhs._velocity {return false}
    if lhs._swingHeight != rhs._swingHeight {return false}
    if lhs._spread != rhs._spread {return false}
    if lhs._reverse != rhs._reverse {return false}
    if lhs._preMoveCycles != rhs._preMoveCycles {return false}
    if lhs._speedMultiplier != rhs._speedMultiplier {return false}
    if lhs._dutyCycle != rhs._dutyCycle {return false}
    if lhs._comHeight != rhs._comHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_HopParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HopParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "velocity"),
    2: .standard(proto: "yaw_rate"),
    3: .standard(proto: "stand_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 2: try decoder.decodeSingularMessageField(value: &self._yawRate)
      case 3: try decoder.decodeSingularMessageField(value: &self._standTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._yawRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._standTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_HopParams, rhs: Bosdyn_Api_Spot_HopParams) -> Bool {
    if lhs._velocity != rhs._velocity {return false}
    if lhs._yawRate != rhs._yawRate {return false}
    if lhs._standTime != rhs._standTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_RandomRotateParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RandomRotateParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amplitude"),
    2: .same(proto: "speed"),
    3: .standard(proto: "speed_variation"),
    4: .standard(proto: "num_speed_tiers"),
    5: .standard(proto: "tier_variation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._amplitude)
      case 2: try decoder.decodeSingularMessageField(value: &self._speed)
      case 3: try decoder.decodeSingularMessageField(value: &self._speedVariation)
      case 4: try decoder.decodeSingularMessageField(value: &self._numSpeedTiers)
      case 5: try decoder.decodeSingularMessageField(value: &self._tierVariation)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._amplitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._speed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._speedVariation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._numSpeedTiers {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._tierVariation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_RandomRotateParams, rhs: Bosdyn_Api_Spot_RandomRotateParams) -> Bool {
    if lhs._amplitude != rhs._amplitude {return false}
    if lhs._speed != rhs._speed {return false}
    if lhs._speedVariation != rhs._speedVariation {return false}
    if lhs._numSpeedTiers != rhs._numSpeedTiers {return false}
    if lhs._tierVariation != rhs._tierVariation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_CrawlParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CrawlParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swing_slices"),
    2: .same(proto: "velocity"),
    3: .standard(proto: "stance_width"),
    4: .standard(proto: "stance_length"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._swingSlices)
      case 2: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 3: try decoder.decodeSingularMessageField(value: &self._stanceWidth)
      case 4: try decoder.decodeSingularMessageField(value: &self._stanceLength)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._swingSlices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._stanceWidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._stanceLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_CrawlParams, rhs: Bosdyn_Api_Spot_CrawlParams) -> Bool {
    if lhs._swingSlices != rhs._swingSlices {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._stanceWidth != rhs._stanceWidth {return false}
    if lhs._stanceLength != rhs._stanceLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_BourreeParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BourreeParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "velocity"),
    2: .standard(proto: "yaw_rate"),
    3: .standard(proto: "stance_length"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 2: try decoder.decodeSingularMessageField(value: &self._yawRate)
      case 3: try decoder.decodeSingularMessageField(value: &self._stanceLength)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._yawRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._stanceLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_BourreeParams, rhs: Bosdyn_Api_Spot_BourreeParams) -> Bool {
    if lhs._velocity != rhs._velocity {return false}
    if lhs._yawRate != rhs._yawRate {return false}
    if lhs._stanceLength != rhs._stanceLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_SideParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SideParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "side"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.side)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.side != .unknown {
      try visitor.visitSingularEnumField(value: self.side, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_SideParams, rhs: Bosdyn_Api_Spot_SideParams) -> Bool {
    if lhs.side != rhs.side {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_SideParams.Side: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIDE_UNKNOWN"),
    1: .same(proto: "SIDE_LEFT"),
    2: .same(proto: "SIDE_RIGHT"),
  ]
}

extension Bosdyn_Api_Spot_JumpParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JumpParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yaw"),
    2: .standard(proto: "flight_slices"),
    3: .standard(proto: "stance_width"),
    4: .standard(proto: "stance_length"),
    5: .same(proto: "absolute"),
    6: .same(proto: "translation"),
    7: .standard(proto: "split_fraction"),
    8: .standard(proto: "lead_leg_pair"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._yaw)
      case 2: try decoder.decodeSingularMessageField(value: &self._flightSlices)
      case 3: try decoder.decodeSingularMessageField(value: &self._stanceWidth)
      case 4: try decoder.decodeSingularMessageField(value: &self._stanceLength)
      case 5: try decoder.decodeSingularMessageField(value: &self._absolute)
      case 6: try decoder.decodeSingularMessageField(value: &self._translation)
      case 7: try decoder.decodeSingularMessageField(value: &self._splitFraction)
      case 8: try decoder.decodeSingularEnumField(value: &self.leadLegPair)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._flightSlices {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._stanceWidth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._stanceLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._absolute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._translation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._splitFraction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.leadLegPair != .unknown {
      try visitor.visitSingularEnumField(value: self.leadLegPair, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_JumpParams, rhs: Bosdyn_Api_Spot_JumpParams) -> Bool {
    if lhs._yaw != rhs._yaw {return false}
    if lhs._flightSlices != rhs._flightSlices {return false}
    if lhs._stanceWidth != rhs._stanceWidth {return false}
    if lhs._stanceLength != rhs._stanceLength {return false}
    if lhs._absolute != rhs._absolute {return false}
    if lhs._translation != rhs._translation {return false}
    if lhs._splitFraction != rhs._splitFraction {return false}
    if lhs.leadLegPair != rhs.leadLegPair {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_JumpParams.Lead: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEAD_UNKNOWN"),
    1: .same(proto: "LEAD_AUTO"),
    2: .same(proto: "LEAD_FRONT"),
    3: .same(proto: "LEAD_HIND"),
    4: .same(proto: "LEAD_LEFT"),
    5: .same(proto: "LEAD_RIGHT"),
  ]
}

extension Bosdyn_Api_Spot_StepParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StepParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "foot"),
    2: .same(proto: "offset"),
    3: .standard(proto: "second_foot"),
    5: .standard(proto: "swing_waypoint"),
    6: .standard(proto: "swing_height"),
    7: .standard(proto: "liftoff_velocity"),
    8: .standard(proto: "touchdown_velocity"),
    9: .standard(proto: "mirror_x"),
    10: .standard(proto: "mirror_y"),
    4: .same(proto: "mirror"),
    11: .standard(proto: "waypoint_dwell"),
    12: .same(proto: "touch"),
    13: .standard(proto: "touch_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.foot)
      case 2: try decoder.decodeSingularMessageField(value: &self._offset)
      case 3: try decoder.decodeSingularEnumField(value: &self.secondFoot)
      case 4: try decoder.decodeSingularMessageField(value: &self._mirror)
      case 5: try decoder.decodeSingularMessageField(value: &self._swingWaypoint)
      case 6: try decoder.decodeSingularMessageField(value: &self._swingHeight)
      case 7: try decoder.decodeSingularMessageField(value: &self._liftoffVelocity)
      case 8: try decoder.decodeSingularMessageField(value: &self._touchdownVelocity)
      case 9: try decoder.decodeSingularMessageField(value: &self._mirrorX)
      case 10: try decoder.decodeSingularMessageField(value: &self._mirrorY)
      case 11: try decoder.decodeSingularMessageField(value: &self._waypointDwell)
      case 12: try decoder.decodeSingularMessageField(value: &self._touch)
      case 13: try decoder.decodeSingularMessageField(value: &self._touchOffset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.foot != .unknown {
      try visitor.visitSingularEnumField(value: self.foot, fieldNumber: 1)
    }
    if let v = self._offset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.secondFoot != .unknown {
      try visitor.visitSingularEnumField(value: self.secondFoot, fieldNumber: 3)
    }
    if let v = self._mirror {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._swingWaypoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._swingHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._liftoffVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._touchdownVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._mirrorX {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._mirrorY {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._waypointDwell {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._touch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._touchOffset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_StepParams, rhs: Bosdyn_Api_Spot_StepParams) -> Bool {
    if lhs.foot != rhs.foot {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs.secondFoot != rhs.secondFoot {return false}
    if lhs._swingWaypoint != rhs._swingWaypoint {return false}
    if lhs._swingHeight != rhs._swingHeight {return false}
    if lhs._liftoffVelocity != rhs._liftoffVelocity {return false}
    if lhs._touchdownVelocity != rhs._touchdownVelocity {return false}
    if lhs._mirrorX != rhs._mirrorX {return false}
    if lhs._mirrorY != rhs._mirrorY {return false}
    if lhs._mirror != rhs._mirror {return false}
    if lhs._waypointDwell != rhs._waypointDwell {return false}
    if lhs._touch != rhs._touch {return false}
    if lhs._touchOffset != rhs._touchOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_RotateBodyParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RotateBodyParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rotation"),
    2: .standard(proto: "return_to_start_pose"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._rotation)
      case 2: try decoder.decodeSingularMessageField(value: &self._returnToStartPose)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._returnToStartPose {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_RotateBodyParams, rhs: Bosdyn_Api_Spot_RotateBodyParams) -> Bool {
    if lhs._rotation != rhs._rotation {return false}
    if lhs._returnToStartPose != rhs._returnToStartPose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_ButtCircleParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ButtCircleParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "radius"),
    2: .standard(proto: "beats_per_circle"),
    3: .standard(proto: "number_of_circles"),
    4: .same(proto: "pivot"),
    5: .same(proto: "clockwise"),
    6: .standard(proto: "starting_angle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._radius)
      case 2: try decoder.decodeSingularMessageField(value: &self._beatsPerCircle)
      case 3: try decoder.decodeSingularMessageField(value: &self._numberOfCircles)
      case 4: try decoder.decodeSingularEnumField(value: &self.pivot)
      case 5: try decoder.decodeSingularMessageField(value: &self._clockwise)
      case 6: try decoder.decodeSingularMessageField(value: &self._startingAngle)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._radius {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._beatsPerCircle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._numberOfCircles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.pivot != .unknown {
      try visitor.visitSingularEnumField(value: self.pivot, fieldNumber: 4)
    }
    if let v = self._clockwise {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._startingAngle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_ButtCircleParams, rhs: Bosdyn_Api_Spot_ButtCircleParams) -> Bool {
    if lhs._radius != rhs._radius {return false}
    if lhs._beatsPerCircle != rhs._beatsPerCircle {return false}
    if lhs._numberOfCircles != rhs._numberOfCircles {return false}
    if lhs.pivot != rhs.pivot {return false}
    if lhs._clockwise != rhs._clockwise {return false}
    if lhs._startingAngle != rhs._startingAngle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_TwerkParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TwerkParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._height)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_TwerkParams, rhs: Bosdyn_Api_Spot_TwerkParams) -> Bool {
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_TurnParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TurnParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yaw"),
    2: .same(proto: "absolute"),
    3: .standard(proto: "swing_height"),
    4: .standard(proto: "swing_velocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._yaw)
      case 2: try decoder.decodeSingularMessageField(value: &self._absolute)
      case 3: try decoder.decodeSingularMessageField(value: &self._swingHeight)
      case 4: try decoder.decodeSingularMessageField(value: &self._swingVelocity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._absolute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._swingHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._swingVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_TurnParams, rhs: Bosdyn_Api_Spot_TurnParams) -> Bool {
    if lhs._yaw != rhs._yaw {return false}
    if lhs._absolute != rhs._absolute {return false}
    if lhs._swingHeight != rhs._swingHeight {return false}
    if lhs._swingVelocity != rhs._swingVelocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_Pace2StepParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pace2StepParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "motion"),
    3: .standard(proto: "swing_height"),
    4: .standard(proto: "swing_velocity"),
    5: .same(proto: "absolute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._motion)
      case 3: try decoder.decodeSingularMessageField(value: &self._swingHeight)
      case 4: try decoder.decodeSingularMessageField(value: &self._swingVelocity)
      case 5: try decoder.decodeSingularMessageField(value: &self._absolute)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._motion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._swingHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._swingVelocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._absolute {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_Pace2StepParams, rhs: Bosdyn_Api_Spot_Pace2StepParams) -> Bool {
    if lhs._motion != rhs._motion {return false}
    if lhs._swingHeight != rhs._swingHeight {return false}
    if lhs._swingVelocity != rhs._swingVelocity {return false}
    if lhs._absolute != rhs._absolute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_ChickenHeadParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChickenHeadParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bob_magnitude"),
    2: .standard(proto: "beats_per_cycle"),
    3: .same(proto: "follow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bobMagnitude)
      case 2: try decoder.decodeSingularMessageField(value: &self._beatsPerCycle)
      case 3: try decoder.decodeSingularMessageField(value: &self._follow)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bobMagnitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._beatsPerCycle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._follow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_ChickenHeadParams, rhs: Bosdyn_Api_Spot_ChickenHeadParams) -> Bool {
    if lhs._bobMagnitude != rhs._bobMagnitude {return false}
    if lhs._beatsPerCycle != rhs._beatsPerCycle {return false}
    if lhs._follow != rhs._follow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_ClapParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClapParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "location"),
    3: .same(proto: "speed"),
    4: .standard(proto: "clap_distance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._direction)
      case 2: try decoder.decodeSingularMessageField(value: &self._location)
      case 3: try decoder.decodeSingularMessageField(value: &self._speed)
      case 4: try decoder.decodeSingularMessageField(value: &self._clapDistance)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._direction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._speed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._clapDistance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_ClapParams, rhs: Bosdyn_Api_Spot_ClapParams) -> Bool {
    if lhs._direction != rhs._direction {return false}
    if lhs._location != rhs._location {return false}
    if lhs._speed != rhs._speed {return false}
    if lhs._clapDistance != rhs._clapDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_KneelCircleParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KneelCircleParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .standard(proto: "beats_per_circle"),
    3: .standard(proto: "number_of_circles"),
    4: .same(proto: "offset"),
    5: .same(proto: "radius"),
    6: .same(proto: "reverse"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._location)
      case 2: try decoder.decodeSingularMessageField(value: &self._beatsPerCircle)
      case 3: try decoder.decodeSingularMessageField(value: &self._numberOfCircles)
      case 4: try decoder.decodeSingularMessageField(value: &self._offset)
      case 5: try decoder.decodeSingularMessageField(value: &self._radius)
      case 6: try decoder.decodeSingularMessageField(value: &self._reverse)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._beatsPerCircle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._numberOfCircles {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._offset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._radius {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._reverse {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_KneelCircleParams, rhs: Bosdyn_Api_Spot_KneelCircleParams) -> Bool {
    if lhs._location != rhs._location {return false}
    if lhs._beatsPerCircle != rhs._beatsPerCircle {return false}
    if lhs._numberOfCircles != rhs._numberOfCircles {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._radius != rhs._radius {return false}
    if lhs._reverse != rhs._reverse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Spot_FrontUpParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrontUpParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mirror"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._mirror)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._mirror {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Spot_FrontUpParams, rhs: Bosdyn_Api_Spot_FrontUpParams) -> Bool {
    if lhs._mirror != rhs._mirror {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
