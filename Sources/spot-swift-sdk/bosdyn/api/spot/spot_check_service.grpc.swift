//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/spot/spot_check_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// RPCs for monitoring robot health and recalibration various sensors. These procedures should be
/// run periodically in order to keep the system running in the best possible condition.
///
/// Usage: instantiate `Bosdyn_Api_Spot_SpotCheckServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_Spot_SpotCheckServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_Spot_SpotCheckServiceClientInterceptorFactoryProtocol? { get }

  func spotCheckCommand(
    _ request: Bosdyn_Api_Spot_SpotCheckCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Spot_SpotCheckCommandRequest, Bosdyn_Api_Spot_SpotCheckCommandResponse>

  func spotCheckFeedback(
    _ request: Bosdyn_Api_Spot_SpotCheckFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Spot_SpotCheckFeedbackRequest, Bosdyn_Api_Spot_SpotCheckFeedbackResponse>

  func cameraCalibrationCommand(
    _ request: Bosdyn_Api_Spot_CameraCalibrationCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Spot_CameraCalibrationCommandRequest, Bosdyn_Api_Spot_CameraCalibrationCommandResponse>

  func cameraCalibrationFeedback(
    _ request: Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest, Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse>
}

extension Bosdyn_Api_Spot_SpotCheckServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot.SpotCheckService"
  }

  /// Send a command to the SpotCheck service. The spotcheck service is responsible to both
  /// recalibrating actuation sensors and checking camera health.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotCheckCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func spotCheckCommand(
    _ request: Bosdyn_Api_Spot_SpotCheckCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Spot_SpotCheckCommandRequest, Bosdyn_Api_Spot_SpotCheckCommandResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot.SpotCheckService/SpotCheckCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotCheckCommandInterceptors() ?? []
    )
  }

  /// Check the status of the spot check procedure. After procedure completes, this reports back
  /// results for specific joints and cameras.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotCheckFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func spotCheckFeedback(
    _ request: Bosdyn_Api_Spot_SpotCheckFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Spot_SpotCheckFeedbackRequest, Bosdyn_Api_Spot_SpotCheckFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot.SpotCheckService/SpotCheckFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotCheckFeedbackInterceptors() ?? []
    )
  }

  /// Send a camera calibration command to the robot. Used to start or abort a calibration routine.
  ///
  /// - Parameters:
  ///   - request: Request to send to CameraCalibrationCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cameraCalibrationCommand(
    _ request: Bosdyn_Api_Spot_CameraCalibrationCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Spot_CameraCalibrationCommandRequest, Bosdyn_Api_Spot_CameraCalibrationCommandResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot.SpotCheckService/CameraCalibrationCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCameraCalibrationCommandInterceptors() ?? []
    )
  }

  /// Check the status of the camera calibration procedure.
  ///
  /// - Parameters:
  ///   - request: Request to send to CameraCalibrationFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cameraCalibrationFeedback(
    _ request: Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest, Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot.SpotCheckService/CameraCalibrationFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCameraCalibrationFeedbackInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_Spot_SpotCheckServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'spotCheckCommand'.
  func makeSpotCheckCommandInterceptors() -> [ClientInterceptor<Bosdyn_Api_Spot_SpotCheckCommandRequest, Bosdyn_Api_Spot_SpotCheckCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'spotCheckFeedback'.
  func makeSpotCheckFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_Spot_SpotCheckFeedbackRequest, Bosdyn_Api_Spot_SpotCheckFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'cameraCalibrationCommand'.
  func makeCameraCalibrationCommandInterceptors() -> [ClientInterceptor<Bosdyn_Api_Spot_CameraCalibrationCommandRequest, Bosdyn_Api_Spot_CameraCalibrationCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'cameraCalibrationFeedback'.
  func makeCameraCalibrationFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest, Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse>]
}

public final class Bosdyn_Api_Spot_SpotCheckServiceClient: Bosdyn_Api_Spot_SpotCheckServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_Spot_SpotCheckServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot.SpotCheckService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_Spot_SpotCheckServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// RPCs for monitoring robot health and recalibration various sensors. These procedures should be
/// run periodically in order to keep the system running in the best possible condition.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_Spot_SpotCheckServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_Spot_SpotCheckServiceServerInterceptorFactoryProtocol? { get }

  /// Send a command to the SpotCheck service. The spotcheck service is responsible to both
  /// recalibrating actuation sensors and checking camera health.
  func spotCheckCommand(request: Bosdyn_Api_Spot_SpotCheckCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Spot_SpotCheckCommandResponse>

  /// Check the status of the spot check procedure. After procedure completes, this reports back
  /// results for specific joints and cameras.
  func spotCheckFeedback(request: Bosdyn_Api_Spot_SpotCheckFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Spot_SpotCheckFeedbackResponse>

  /// Send a camera calibration command to the robot. Used to start or abort a calibration routine.
  func cameraCalibrationCommand(request: Bosdyn_Api_Spot_CameraCalibrationCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Spot_CameraCalibrationCommandResponse>

  /// Check the status of the camera calibration procedure.
  func cameraCalibrationFeedback(request: Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse>
}

extension Bosdyn_Api_Spot_SpotCheckServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot.SpotCheckService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SpotCheckCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Spot_SpotCheckCommandRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Spot_SpotCheckCommandResponse>(),
        interceptors: self.interceptors?.makeSpotCheckCommandInterceptors() ?? [],
        userFunction: self.spotCheckCommand(request:context:)
      )

    case "SpotCheckFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Spot_SpotCheckFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Spot_SpotCheckFeedbackResponse>(),
        interceptors: self.interceptors?.makeSpotCheckFeedbackInterceptors() ?? [],
        userFunction: self.spotCheckFeedback(request:context:)
      )

    case "CameraCalibrationCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Spot_CameraCalibrationCommandRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Spot_CameraCalibrationCommandResponse>(),
        interceptors: self.interceptors?.makeCameraCalibrationCommandInterceptors() ?? [],
        userFunction: self.cameraCalibrationCommand(request:context:)
      )

    case "CameraCalibrationFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse>(),
        interceptors: self.interceptors?.makeCameraCalibrationFeedbackInterceptors() ?? [],
        userFunction: self.cameraCalibrationFeedback(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_Spot_SpotCheckServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'spotCheckCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotCheckCommandInterceptors() -> [ServerInterceptor<Bosdyn_Api_Spot_SpotCheckCommandRequest, Bosdyn_Api_Spot_SpotCheckCommandResponse>]

  /// - Returns: Interceptors to use when handling 'spotCheckFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotCheckFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_Spot_SpotCheckFeedbackRequest, Bosdyn_Api_Spot_SpotCheckFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'cameraCalibrationCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCameraCalibrationCommandInterceptors() -> [ServerInterceptor<Bosdyn_Api_Spot_CameraCalibrationCommandRequest, Bosdyn_Api_Spot_CameraCalibrationCommandResponse>]

  /// - Returns: Interceptors to use when handling 'cameraCalibrationFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCameraCalibrationFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_Spot_CameraCalibrationFeedbackRequest, Bosdyn_Api_Spot_CameraCalibrationFeedbackResponse>]
}
