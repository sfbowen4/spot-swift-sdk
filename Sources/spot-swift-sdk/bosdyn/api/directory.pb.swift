// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/directory.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A message representing a discoverable service.  By definition, all services
/// discoverable by this system are expected to be grpc "services" provided by
/// some server.
public struct Bosdyn_Api_ServiceEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The unique user-friendly name of this service.
  public var name: String = String()

  /// The type of this service. Usually identifies the underlying implementation.
  /// Does not have to be unique among all ServiceEntry objects.
  public var type: String = String()

  /// Information used to route to the desired Service. Can either be a full address
  /// (aService.spot.robot) or just a DNS label that will be automatically converted to an
  /// address (aService).
  public var authority: String = String()

  /// Last update time in robot timebase for this service record. This serves as the time of
  /// the last heartbeat to the robot.
  public var lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdate = newValue}
  }
  /// Returns true if `lastUpdate` has been explicitly set.
  public var hasLastUpdate: Bool {return self._lastUpdate != nil}
  /// Clears the value of `lastUpdate`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdate() {self._lastUpdate = nil}

  /// If 'user_token_required' field is true, any requests to this service must contain
  /// a user token for the machine.  Requests without a user token will result in a
  /// 401. Most services will want to require a user_token, but ones like auth_service
  /// do not.
  public var userTokenRequired: Bool = false

  /// If 'permission_required' field is non-empty, any requests to this service must
  /// have the same string in the "per" claim of the user token.
  public var permissionRequired: String = String()

  /// Number of seconds to wait between heartbeats before assuming service in no longer live
  /// If unset (0) liveness checks will be disabled for this service.
  public var livenessTimeoutSecs: Double = 0

  /// The GUID of the payload that this service was registered from. An empty string represents a
  /// service that was registered via a client using standard user credentials or internal to the
  /// robot. This value is set automatically based on the user token and cannot be set or updated
  /// via the API, so it should not be populated by the client at registration time.
  public var hostPayloadGuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A message containing information that allows a client to identify a
/// given endpoint host using an ip and a port.
public struct Bosdyn_Api_Endpoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The IP address of the computer hosting this endpoint.
  public var hostIp: String = String()

  /// The port number on which the endpoint is provided.
  public var port: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The GetServiceEntry request message sends the service name to the robot.
public struct Bosdyn_Api_GetServiceEntryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The unique user-friendly name of the service.
  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The GetServiceEntry response message returns a ServiceEntry for the desired service name.
public struct Bosdyn_Api_GetServiceEntryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response Header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Current status of the request.
  public var status: Bosdyn_Api_GetServiceEntryResponse.Status = .unknown

  /// The record for the discovered service.  Only set if 'status' field == STATUS_OK.
  public var serviceEntry: Bosdyn_Api_ServiceEntry {
    get {return _serviceEntry ?? Bosdyn_Api_ServiceEntry()}
    set {_serviceEntry = newValue}
  }
  /// Returns true if `serviceEntry` has been explicitly set.
  public var hasServiceEntry: Bool {return self._serviceEntry != nil}
  /// Clears the value of `serviceEntry`. Subsequent reads from it will return its default value.
  public mutating func clearServiceEntry() {self._serviceEntry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used. An internal DirectoryService issue has happened if UNKNOWN is set.
    case unknown // = 0

    /// GetService was successful. The service_entry field is filled out.
    case ok // = 1

    /// GetService failed because the requested service name does not exist.
    case nonexistentService // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .nonexistentService
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .nonexistentService: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _serviceEntry: Bosdyn_Api_ServiceEntry? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_GetServiceEntryResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_GetServiceEntryResponse.Status] = [
    .unknown,
    .ok,
    .nonexistentService,
  ]
}

#endif  // swift(>=4.2)

/// The ListServiceEntries request message will ask the robot for all services.
public struct Bosdyn_Api_ListServiceEntriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The ListServiceEntries response message returns all known services at the time the request
/// was recieved.
public struct Bosdyn_Api_ListServiceEntriesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The resources managed by the LeaseService.
  public var serviceEntries: [Bosdyn_Api_ServiceEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_ServiceEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "authority"),
    4: .standard(proto: "last_update"),
    5: .standard(proto: "user_token_required"),
    7: .standard(proto: "permission_required"),
    8: .standard(proto: "liveness_timeout_secs"),
    9: .standard(proto: "host_payload_guid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.authority)
      case 4: try decoder.decodeSingularMessageField(value: &self._lastUpdate)
      case 5: try decoder.decodeSingularBoolField(value: &self.userTokenRequired)
      case 7: try decoder.decodeSingularStringField(value: &self.permissionRequired)
      case 8: try decoder.decodeSingularDoubleField(value: &self.livenessTimeoutSecs)
      case 9: try decoder.decodeSingularStringField(value: &self.hostPayloadGuid)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.authority.isEmpty {
      try visitor.visitSingularStringField(value: self.authority, fieldNumber: 3)
    }
    if let v = self._lastUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.userTokenRequired != false {
      try visitor.visitSingularBoolField(value: self.userTokenRequired, fieldNumber: 5)
    }
    if !self.permissionRequired.isEmpty {
      try visitor.visitSingularStringField(value: self.permissionRequired, fieldNumber: 7)
    }
    if self.livenessTimeoutSecs != 0 {
      try visitor.visitSingularDoubleField(value: self.livenessTimeoutSecs, fieldNumber: 8)
    }
    if !self.hostPayloadGuid.isEmpty {
      try visitor.visitSingularStringField(value: self.hostPayloadGuid, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ServiceEntry, rhs: Bosdyn_Api_ServiceEntry) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.authority != rhs.authority {return false}
    if lhs._lastUpdate != rhs._lastUpdate {return false}
    if lhs.userTokenRequired != rhs.userTokenRequired {return false}
    if lhs.permissionRequired != rhs.permissionRequired {return false}
    if lhs.livenessTimeoutSecs != rhs.livenessTimeoutSecs {return false}
    if lhs.hostPayloadGuid != rhs.hostPayloadGuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Endpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Endpoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "host_ip"),
    2: .same(proto: "port"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hostIp)
      case 2: try decoder.decodeSingularInt32Field(value: &self.port)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostIp.isEmpty {
      try visitor.visitSingularStringField(value: self.hostIp, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Endpoint, rhs: Bosdyn_Api_Endpoint) -> Bool {
    if lhs.hostIp != rhs.hostIp {return false}
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetServiceEntryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceEntryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetServiceEntryRequest, rhs: Bosdyn_Api_GetServiceEntryRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetServiceEntryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceEntryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "service_entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._serviceEntry)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._serviceEntry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetServiceEntryResponse, rhs: Bosdyn_Api_GetServiceEntryResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs._serviceEntry != rhs._serviceEntry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetServiceEntryResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_NONEXISTENT_SERVICE"),
  ]
}

extension Bosdyn_Api_ListServiceEntriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceEntriesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListServiceEntriesRequest, rhs: Bosdyn_Api_ListServiceEntriesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListServiceEntriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListServiceEntriesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "service_entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.serviceEntries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.serviceEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceEntries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListServiceEntriesResponse, rhs: Bosdyn_Api_ListServiceEntriesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.serviceEntries != rhs.serviceEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
