// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/point_cloud.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about a sensor or process that produces point clouds.
public struct Bosdyn_Api_PointCloudSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the point cloud source. This is intended to be unique accross all point cloud sources,
  /// and should be human readable.
  public var name: String = String()

  /// The frame name of the sensor. The transformation from vision_tform_sensor can be computed
  /// by traversing the tree in the FrameTreeSnapshot.
  public var frameNameSensor: String = String()

  /// Time that the data was produced on the sensor in the robot's clock.
  public var acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acquisitionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acquisitionTime = newValue}
  }
  /// Returns true if `acquisitionTime` has been explicitly set.
  public var hasAcquisitionTime: Bool {return self._acquisitionTime != nil}
  /// Clears the value of `acquisitionTime`. Subsequent reads from it will return its default value.
  public mutating func clearAcquisitionTime() {self._acquisitionTime = nil}

  /// A tree-based collection of transformations, which will include the transformations
  /// to the point cloud data frame and the point cloud sensor frame.
  public var transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot {
    get {return _transformsSnapshot ?? Bosdyn_Api_FrameTreeSnapshot()}
    set {_transformsSnapshot = newValue}
  }
  /// Returns true if `transformsSnapshot` has been explicitly set.
  public var hasTransformsSnapshot: Bool {return self._transformsSnapshot != nil}
  /// Clears the value of `transformsSnapshot`. Subsequent reads from it will return its default value.
  public mutating func clearTransformsSnapshot() {self._transformsSnapshot = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot? = nil
}

/// Data from a point-cloud producing sensor or process.
public struct Bosdyn_Api_PointCloud {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The sensor or process that produced the point cloud.
  public var source: Bosdyn_Api_PointCloudSource {
    get {return _source ?? Bosdyn_Api_PointCloudSource()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  /// The number of points in the point cloud.
  public var numPoints: Int32 = 0

  /// Representation of the underlying point cloud data.
  public var encoding: Bosdyn_Api_PointCloud.Encoding = .unknown

  /// Constants needed to decode the point cloud.
  public var encodingParameters: Bosdyn_Api_PointCloud.EncodingParameters {
    get {return _encodingParameters ?? Bosdyn_Api_PointCloud.EncodingParameters()}
    set {_encodingParameters = newValue}
  }
  /// Returns true if `encodingParameters` has been explicitly set.
  public var hasEncodingParameters: Bool {return self._encodingParameters != nil}
  /// Clears the value of `encodingParameters`. Subsequent reads from it will return its default value.
  public mutating func clearEncodingParameters() {self._encodingParameters = nil}

  /// Raw byte data representing the points.
  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Point clouds may be encoded in different ways to preserve bandwidth or disk space.
  public enum Encoding: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The point cloud has an unknown encoding.
    case unknown // = 0

    /// Each point is x,y,z float32 value (12 bytes, little-endian) stored sequentially. This allows
    /// the point cloud to be expressed in any range and resolution represented by floating point
    /// numbers, but the point cloud will be larger than if one of the other encodings is used.
    case xyz32F // = 1

    /// Each point is 3 signed int8s plus an extra shared signed int8s (4 byte).
    /// byte layout: [..., p1_x, p1_y, p1_z, x, ...]
    /// Each coordinate is mapped to a value between -1 and +1 (corresponding to a
    /// minimum and maximum range).
    /// The resulting point is:
    ///   P = remap(p1 * f + p2, c * f, m)
    /// Where:
    ///   p1 = the highest byte in each dimension of the point.
    ///   p2 = a vector of "extra" bytes converted to metric units.
    ///     = [mod (x, f), mod(x/f, f), mod(x/(f^2), f)] - f/2
    ///   x = the "extra" byte for each point.
    ///   f = An integer scale factor.
    ///   m = [max_x, max_y, max_z], the point cloud max bounds in meters.
    ///   c = a remapping constant.
    /// And:
    ///  remap(a, b, c) = (a + b)/(2 * b) - c
    /// Point clouds use 1/3 the memory of XYZ_32F, but have limits on resolution
    /// and range. Points must not lie outside of the box of size [-m, m]. Within that box,
    /// the resolution of the point cloud will depend on the encoding parameters.
    /// For example if m = [10, 10, 10], and f = 5 with c = 127 the resolution is
    /// approximately 1.5 cm per point.
    case xyz4Sc // = 2

    /// Each point is 3 signed int8s plus two extra shared signed int8s (5 byte).
    /// The encoding is the same as XYZ_4SC, except the "extra" value x is a 16 bit integer.
    /// This encoding has roughly double the resolution of XYZ_4SC, but takes up
    /// an additional byte for each point.
    case xyz5Sc // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .xyz32F
      case 2: self = .xyz4Sc
      case 3: self = .xyz5Sc
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .xyz32F: return 1
      case .xyz4Sc: return 2
      case .xyz5Sc: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Parameters needed to decode the point cloud.
  public struct EncodingParameters {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Used in the remapping process from bytes to metric units. (unitless)
    public var scaleFactor: Int32 = 0

    /// In XYZ_4SC and XYZ_5SC, the point cloud is assumed to lie inside a box
    /// centered in the data frame. max_x, max_y, max_z are half the dimensions
    /// of that box. These dimensions should be assumed to be meters.
    public var maxX: Double = 0

    /// max_y is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
    /// dimensions should be assumed to be meters.
    public var maxY: Double = 0

    /// max_z is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
    /// dimensions should be assumed to be meters.
    public var maxZ: Double = 0

    /// Used in the remapping process from bytes to metric units. (unitless)
    /// For XYZ_4SC and XYZ_5C, this should equal 127.
    public var remappingConstant: Double = 0

    /// Number of bytes in each point in this encoding.
    public var bytesPerPoint: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _source: Bosdyn_Api_PointCloudSource? = nil
  fileprivate var _encodingParameters: Bosdyn_Api_PointCloud.EncodingParameters? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_PointCloud.Encoding: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_PointCloud.Encoding] = [
    .unknown,
    .xyz32F,
    .xyz4Sc,
    .xyz5Sc,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_ListPointCloudSourcesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The GetPointCloud response message which returns any point cloud data associated with that service.
public struct Bosdyn_Api_ListPointCloudSourcesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response Header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The set of PointCloudSources available from this service.
  /// May be empty if the service serves no point clouds (e.g., if no sensors were found on startup).
  public var pointCloudSources: [Bosdyn_Api_PointCloudSource] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

public struct Bosdyn_Api_PointCloudRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the point cloud source to request from.
  public var pointCloudSourceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The GetPointCloud request message to ask a specific point cloud service for data.
public struct Bosdyn_Api_GetPointCloudRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Sources to retrieve from. The service will return a response for each PointCloudRequest.
  public var pointCloudRequests: [Bosdyn_Api_PointCloudRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_PointCloudResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Return status for the request.
  public var status: Bosdyn_Api_PointCloudResponse.Status = .unknown

  /// The current point cloud from the service.
  public var pointCloud: Bosdyn_Api_PointCloud {
    get {return _pointCloud ?? Bosdyn_Api_PointCloud()}
    set {_pointCloud = newValue}
  }
  /// Returns true if `pointCloud` has been explicitly set.
  public var hasPointCloud: Bool {return self._pointCloud != nil}
  /// Clears the value of `pointCloud`. Subsequent reads from it will return its default value.
  public mutating func clearPointCloud() {self._pointCloud = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used.
    /// An internal PointCloudService issue has happened if UNKNOWN is set.
    /// None of the other fields are filled out.
    case unknown // = 0

    /// Call succeeded at filling out all the fields.
    case ok // = 1

    /// Failed to fill out PointCloudSource. All the other fields are not filled out.
    case sourceDataError // = 2

    /// There was a problem with the point cloud data.  Only the PointCloudSource is filled out.
    case pointCloudDataError // = 3

    /// Provided point cloud source was not found. One
    case unknownSource // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .sourceDataError
      case 3: self = .pointCloudDataError
      case 4: self = .unknownSource
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .sourceDataError: return 2
      case .pointCloudDataError: return 3
      case .unknownSource: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _pointCloud: Bosdyn_Api_PointCloud? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_PointCloudResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_PointCloudResponse.Status] = [
    .unknown,
    .ok,
    .sourceDataError,
    .pointCloudDataError,
    .unknownSource,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_GetPointCloudResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The resulting point clouds for each requested source.
  public var pointCloudResponses: [Bosdyn_Api_PointCloudResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_PointCloudSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PointCloudSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .standard(proto: "frame_name_sensor"),
    30: .standard(proto: "acquisition_time"),
    31: .standard(proto: "transforms_snapshot"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.frameNameSensor)
      case 30: try decoder.decodeSingularMessageField(value: &self._acquisitionTime)
      case 31: try decoder.decodeSingularMessageField(value: &self._transformsSnapshot)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.frameNameSensor.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameSensor, fieldNumber: 3)
    }
    if let v = self._acquisitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }
    if let v = self._transformsSnapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PointCloudSource, rhs: Bosdyn_Api_PointCloudSource) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.frameNameSensor != rhs.frameNameSensor {return false}
    if lhs._acquisitionTime != rhs._acquisitionTime {return false}
    if lhs._transformsSnapshot != rhs._transformsSnapshot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PointCloud: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PointCloud"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .standard(proto: "num_points"),
    3: .same(proto: "encoding"),
    4: .standard(proto: "encoding_parameters"),
    5: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._source)
      case 2: try decoder.decodeSingularInt32Field(value: &self.numPoints)
      case 3: try decoder.decodeSingularEnumField(value: &self.encoding)
      case 4: try decoder.decodeSingularMessageField(value: &self._encodingParameters)
      case 5: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.numPoints != 0 {
      try visitor.visitSingularInt32Field(value: self.numPoints, fieldNumber: 2)
    }
    if self.encoding != .unknown {
      try visitor.visitSingularEnumField(value: self.encoding, fieldNumber: 3)
    }
    if let v = self._encodingParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PointCloud, rhs: Bosdyn_Api_PointCloud) -> Bool {
    if lhs._source != rhs._source {return false}
    if lhs.numPoints != rhs.numPoints {return false}
    if lhs.encoding != rhs.encoding {return false}
    if lhs._encodingParameters != rhs._encodingParameters {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PointCloud.Encoding: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENCODING_UNKNOWN"),
    1: .same(proto: "ENCODING_XYZ_32F"),
    2: .same(proto: "ENCODING_XYZ_4SC"),
    3: .same(proto: "ENCODING_XYZ_5SC"),
  ]
}

extension Bosdyn_Api_PointCloud.EncodingParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_PointCloud.protoMessageName + ".EncodingParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scale_factor"),
    2: .standard(proto: "max_x"),
    3: .standard(proto: "max_y"),
    4: .standard(proto: "max_z"),
    5: .standard(proto: "remapping_constant"),
    6: .standard(proto: "bytes_per_point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.scaleFactor)
      case 2: try decoder.decodeSingularDoubleField(value: &self.maxX)
      case 3: try decoder.decodeSingularDoubleField(value: &self.maxY)
      case 4: try decoder.decodeSingularDoubleField(value: &self.maxZ)
      case 5: try decoder.decodeSingularDoubleField(value: &self.remappingConstant)
      case 6: try decoder.decodeSingularInt32Field(value: &self.bytesPerPoint)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scaleFactor != 0 {
      try visitor.visitSingularInt32Field(value: self.scaleFactor, fieldNumber: 1)
    }
    if self.maxX != 0 {
      try visitor.visitSingularDoubleField(value: self.maxX, fieldNumber: 2)
    }
    if self.maxY != 0 {
      try visitor.visitSingularDoubleField(value: self.maxY, fieldNumber: 3)
    }
    if self.maxZ != 0 {
      try visitor.visitSingularDoubleField(value: self.maxZ, fieldNumber: 4)
    }
    if self.remappingConstant != 0 {
      try visitor.visitSingularDoubleField(value: self.remappingConstant, fieldNumber: 5)
    }
    if self.bytesPerPoint != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesPerPoint, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PointCloud.EncodingParameters, rhs: Bosdyn_Api_PointCloud.EncodingParameters) -> Bool {
    if lhs.scaleFactor != rhs.scaleFactor {return false}
    if lhs.maxX != rhs.maxX {return false}
    if lhs.maxY != rhs.maxY {return false}
    if lhs.maxZ != rhs.maxZ {return false}
    if lhs.remappingConstant != rhs.remappingConstant {return false}
    if lhs.bytesPerPoint != rhs.bytesPerPoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListPointCloudSourcesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPointCloudSourcesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListPointCloudSourcesRequest, rhs: Bosdyn_Api_ListPointCloudSourcesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListPointCloudSourcesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPointCloudSourcesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "point_cloud_sources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pointCloudSources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pointCloudSources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pointCloudSources, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListPointCloudSourcesResponse, rhs: Bosdyn_Api_ListPointCloudSourcesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.pointCloudSources != rhs.pointCloudSources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PointCloudRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PointCloudRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_cloud_source_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pointCloudSourceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pointCloudSourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.pointCloudSourceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PointCloudRequest, rhs: Bosdyn_Api_PointCloudRequest) -> Bool {
    if lhs.pointCloudSourceName != rhs.pointCloudSourceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetPointCloudRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPointCloudRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "point_cloud_requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pointCloudRequests)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pointCloudRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pointCloudRequests, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetPointCloudRequest, rhs: Bosdyn_Api_GetPointCloudRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.pointCloudRequests != rhs.pointCloudRequests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PointCloudResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PointCloudResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "point_cloud"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularMessageField(value: &self._pointCloud)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if let v = self._pointCloud {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PointCloudResponse, rhs: Bosdyn_Api_PointCloudResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._pointCloud != rhs._pointCloud {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PointCloudResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_SOURCE_DATA_ERROR"),
    3: .same(proto: "STATUS_POINT_CLOUD_DATA_ERROR"),
    4: .same(proto: "STATUS_UNKNOWN_SOURCE"),
  ]
}

extension Bosdyn_Api_GetPointCloudResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPointCloudResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    4: .standard(proto: "point_cloud_responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.pointCloudResponses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pointCloudResponses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pointCloudResponses, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetPointCloudResponse, rhs: Bosdyn_Api_GetPointCloudResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.pointCloudResponses != rhs.pointCloudResponses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
