//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/payload_registration_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// This service provides a way to register new payloads.
///
/// Usage: instantiate `Bosdyn_Api_PayloadRegistrationServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_PayloadRegistrationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_PayloadRegistrationServiceClientInterceptorFactoryProtocol? { get }

  func registerPayload(
    _ request: Bosdyn_Api_RegisterPayloadRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RegisterPayloadRequest, Bosdyn_Api_RegisterPayloadResponse>

  func updatePayloadVersion(
    _ request: Bosdyn_Api_UpdatePayloadVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_UpdatePayloadVersionRequest, Bosdyn_Api_UpdatePayloadVersionResponse>

  func getPayloadAuthToken(
    _ request: Bosdyn_Api_GetPayloadAuthTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetPayloadAuthTokenRequest, Bosdyn_Api_GetPayloadAuthTokenResponse>
}

extension Bosdyn_Api_PayloadRegistrationServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.PayloadRegistrationService"
  }

  /// Register a payload with the directory.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterPayload.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerPayload(
    _ request: Bosdyn_Api_RegisterPayloadRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RegisterPayloadRequest, Bosdyn_Api_RegisterPayloadResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.PayloadRegistrationService/RegisterPayload",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterPayloadInterceptors() ?? []
    )
  }

  /// Update the version for the registered payload.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePayloadVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updatePayloadVersion(
    _ request: Bosdyn_Api_UpdatePayloadVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_UpdatePayloadVersionRequest, Bosdyn_Api_UpdatePayloadVersionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.PayloadRegistrationService/UpdatePayloadVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePayloadVersionInterceptors() ?? []
    )
  }

  /// Get the authentication token information associated with a given payload.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPayloadAuthToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPayloadAuthToken(
    _ request: Bosdyn_Api_GetPayloadAuthTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetPayloadAuthTokenRequest, Bosdyn_Api_GetPayloadAuthTokenResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.PayloadRegistrationService/GetPayloadAuthToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPayloadAuthTokenInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_PayloadRegistrationServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerPayload'.
  func makeRegisterPayloadInterceptors() -> [ClientInterceptor<Bosdyn_Api_RegisterPayloadRequest, Bosdyn_Api_RegisterPayloadResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePayloadVersion'.
  func makeUpdatePayloadVersionInterceptors() -> [ClientInterceptor<Bosdyn_Api_UpdatePayloadVersionRequest, Bosdyn_Api_UpdatePayloadVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'getPayloadAuthToken'.
  func makeGetPayloadAuthTokenInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetPayloadAuthTokenRequest, Bosdyn_Api_GetPayloadAuthTokenResponse>]
}

public final class Bosdyn_Api_PayloadRegistrationServiceClient: Bosdyn_Api_PayloadRegistrationServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_PayloadRegistrationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.PayloadRegistrationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_PayloadRegistrationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// This service provides a way to register new payloads.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_PayloadRegistrationServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_PayloadRegistrationServiceServerInterceptorFactoryProtocol? { get }

  /// Register a payload with the directory.
  func registerPayload(request: Bosdyn_Api_RegisterPayloadRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RegisterPayloadResponse>

  /// Update the version for the registered payload.
  func updatePayloadVersion(request: Bosdyn_Api_UpdatePayloadVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_UpdatePayloadVersionResponse>

  /// Get the authentication token information associated with a given payload.
  func getPayloadAuthToken(request: Bosdyn_Api_GetPayloadAuthTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetPayloadAuthTokenResponse>
}

extension Bosdyn_Api_PayloadRegistrationServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.PayloadRegistrationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterPayload":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RegisterPayloadRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RegisterPayloadResponse>(),
        interceptors: self.interceptors?.makeRegisterPayloadInterceptors() ?? [],
        userFunction: self.registerPayload(request:context:)
      )

    case "UpdatePayloadVersion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_UpdatePayloadVersionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_UpdatePayloadVersionResponse>(),
        interceptors: self.interceptors?.makeUpdatePayloadVersionInterceptors() ?? [],
        userFunction: self.updatePayloadVersion(request:context:)
      )

    case "GetPayloadAuthToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetPayloadAuthTokenRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetPayloadAuthTokenResponse>(),
        interceptors: self.interceptors?.makeGetPayloadAuthTokenInterceptors() ?? [],
        userFunction: self.getPayloadAuthToken(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_PayloadRegistrationServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerPayload'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterPayloadInterceptors() -> [ServerInterceptor<Bosdyn_Api_RegisterPayloadRequest, Bosdyn_Api_RegisterPayloadResponse>]

  /// - Returns: Interceptors to use when handling 'updatePayloadVersion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePayloadVersionInterceptors() -> [ServerInterceptor<Bosdyn_Api_UpdatePayloadVersionRequest, Bosdyn_Api_UpdatePayloadVersionResponse>]

  /// - Returns: Interceptors to use when handling 'getPayloadAuthToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPayloadAuthTokenInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetPayloadAuthTokenRequest, Bosdyn_Api_GetPayloadAuthTokenResponse>]
}
