//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/directory_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// DirectoryService lets clients discover which API services are available on a robot.
///
/// Usage: instantiate `Bosdyn_Api_DirectoryServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_DirectoryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_DirectoryServiceClientInterceptorFactoryProtocol? { get }

  func getServiceEntry(
    _ request: Bosdyn_Api_GetServiceEntryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetServiceEntryRequest, Bosdyn_Api_GetServiceEntryResponse>

  func listServiceEntries(
    _ request: Bosdyn_Api_ListServiceEntriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListServiceEntriesRequest, Bosdyn_Api_ListServiceEntriesResponse>
}

extension Bosdyn_Api_DirectoryServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.DirectoryService"
  }

  /// Get information about a specific service.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceEntry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getServiceEntry(
    _ request: Bosdyn_Api_GetServiceEntryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetServiceEntryRequest, Bosdyn_Api_GetServiceEntryResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DirectoryService/GetServiceEntry",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceEntryInterceptors() ?? []
    )
  }

  /// List all known services at time of call.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListServiceEntries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listServiceEntries(
    _ request: Bosdyn_Api_ListServiceEntriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListServiceEntriesRequest, Bosdyn_Api_ListServiceEntriesResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DirectoryService/ListServiceEntries",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListServiceEntriesInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_DirectoryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getServiceEntry'.
  func makeGetServiceEntryInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetServiceEntryRequest, Bosdyn_Api_GetServiceEntryResponse>]

  /// - Returns: Interceptors to use when invoking 'listServiceEntries'.
  func makeListServiceEntriesInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListServiceEntriesRequest, Bosdyn_Api_ListServiceEntriesResponse>]
}

public final class Bosdyn_Api_DirectoryServiceClient: Bosdyn_Api_DirectoryServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_DirectoryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.DirectoryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_DirectoryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// DirectoryService lets clients discover which API services are available on a robot.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_DirectoryServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_DirectoryServiceServerInterceptorFactoryProtocol? { get }

  /// Get information about a specific service.
  func getServiceEntry(request: Bosdyn_Api_GetServiceEntryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetServiceEntryResponse>

  /// List all known services at time of call.
  func listServiceEntries(request: Bosdyn_Api_ListServiceEntriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListServiceEntriesResponse>
}

extension Bosdyn_Api_DirectoryServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.DirectoryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetServiceEntry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetServiceEntryRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetServiceEntryResponse>(),
        interceptors: self.interceptors?.makeGetServiceEntryInterceptors() ?? [],
        userFunction: self.getServiceEntry(request:context:)
      )

    case "ListServiceEntries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListServiceEntriesRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListServiceEntriesResponse>(),
        interceptors: self.interceptors?.makeListServiceEntriesInterceptors() ?? [],
        userFunction: self.listServiceEntries(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_DirectoryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getServiceEntry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceEntryInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetServiceEntryRequest, Bosdyn_Api_GetServiceEntryResponse>]

  /// - Returns: Interceptors to use when handling 'listServiceEntries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListServiceEntriesInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListServiceEntriesRequest, Bosdyn_Api_ListServiceEntriesResponse>]
}
