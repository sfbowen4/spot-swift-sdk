//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/manipulation_api_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Bosdyn_Api_ManipulationApiServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_ManipulationApiServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_ManipulationApiServiceClientInterceptorFactoryProtocol? { get }

  func manipulationApi(
    _ request: Bosdyn_Api_ManipulationApiRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ManipulationApiRequest, Bosdyn_Api_ManipulationApiResponse>

  func manipulationApiFeedback(
    _ request: Bosdyn_Api_ManipulationApiFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ManipulationApiFeedbackRequest, Bosdyn_Api_ManipulationApiFeedbackResponse>

  func overrideGrasp(
    _ request: Bosdyn_Api_ApiGraspOverrideRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ApiGraspOverrideRequest, Bosdyn_Api_ApiGraspOverrideResponse>
}

extension Bosdyn_Api_ManipulationApiServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.ManipulationApiService"
  }

  /// Unary call to ManipulationApi
  ///
  /// - Parameters:
  ///   - request: Request to send to ManipulationApi.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func manipulationApi(
    _ request: Bosdyn_Api_ManipulationApiRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ManipulationApiRequest, Bosdyn_Api_ManipulationApiResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.ManipulationApiService/ManipulationApi",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeManipulationApiInterceptors() ?? []
    )
  }

  /// Unary call to ManipulationApiFeedback
  ///
  /// - Parameters:
  ///   - request: Request to send to ManipulationApiFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func manipulationApiFeedback(
    _ request: Bosdyn_Api_ManipulationApiFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ManipulationApiFeedbackRequest, Bosdyn_Api_ManipulationApiFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.ManipulationApiService/ManipulationApiFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeManipulationApiFeedbackInterceptors() ?? []
    )
  }

  /// Unary call to OverrideGrasp
  ///
  /// - Parameters:
  ///   - request: Request to send to OverrideGrasp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func overrideGrasp(
    _ request: Bosdyn_Api_ApiGraspOverrideRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ApiGraspOverrideRequest, Bosdyn_Api_ApiGraspOverrideResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.ManipulationApiService/OverrideGrasp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOverrideGraspInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_ManipulationApiServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'manipulationApi'.
  func makeManipulationApiInterceptors() -> [ClientInterceptor<Bosdyn_Api_ManipulationApiRequest, Bosdyn_Api_ManipulationApiResponse>]

  /// - Returns: Interceptors to use when invoking 'manipulationApiFeedback'.
  func makeManipulationApiFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_ManipulationApiFeedbackRequest, Bosdyn_Api_ManipulationApiFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'overrideGrasp'.
  func makeOverrideGraspInterceptors() -> [ClientInterceptor<Bosdyn_Api_ApiGraspOverrideRequest, Bosdyn_Api_ApiGraspOverrideResponse>]
}

public final class Bosdyn_Api_ManipulationApiServiceClient: Bosdyn_Api_ManipulationApiServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_ManipulationApiServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.ManipulationApiService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_ManipulationApiServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_ManipulationApiServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_ManipulationApiServiceServerInterceptorFactoryProtocol? { get }

  func manipulationApi(request: Bosdyn_Api_ManipulationApiRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ManipulationApiResponse>

  func manipulationApiFeedback(request: Bosdyn_Api_ManipulationApiFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ManipulationApiFeedbackResponse>

  func overrideGrasp(request: Bosdyn_Api_ApiGraspOverrideRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ApiGraspOverrideResponse>
}

extension Bosdyn_Api_ManipulationApiServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.ManipulationApiService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ManipulationApi":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ManipulationApiRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ManipulationApiResponse>(),
        interceptors: self.interceptors?.makeManipulationApiInterceptors() ?? [],
        userFunction: self.manipulationApi(request:context:)
      )

    case "ManipulationApiFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ManipulationApiFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ManipulationApiFeedbackResponse>(),
        interceptors: self.interceptors?.makeManipulationApiFeedbackInterceptors() ?? [],
        userFunction: self.manipulationApiFeedback(request:context:)
      )

    case "OverrideGrasp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ApiGraspOverrideRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ApiGraspOverrideResponse>(),
        interceptors: self.interceptors?.makeOverrideGraspInterceptors() ?? [],
        userFunction: self.overrideGrasp(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_ManipulationApiServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'manipulationApi'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeManipulationApiInterceptors() -> [ServerInterceptor<Bosdyn_Api_ManipulationApiRequest, Bosdyn_Api_ManipulationApiResponse>]

  /// - Returns: Interceptors to use when handling 'manipulationApiFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeManipulationApiFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_ManipulationApiFeedbackRequest, Bosdyn_Api_ManipulationApiFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'overrideGrasp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOverrideGraspInterceptors() -> [ServerInterceptor<Bosdyn_Api_ApiGraspOverrideRequest, Bosdyn_Api_ApiGraspOverrideResponse>]
}
