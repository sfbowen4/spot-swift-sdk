//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/fault_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The service fault service enables modification of the robot state ServiceFaultState.
///
/// Usage: instantiate `Bosdyn_Api_FaultServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_FaultServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_FaultServiceClientInterceptorFactoryProtocol? { get }

  func triggerServiceFault(
    _ request: Bosdyn_Api_TriggerServiceFaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_TriggerServiceFaultRequest, Bosdyn_Api_TriggerServiceFaultResponse>

  func clearServiceFault(
    _ request: Bosdyn_Api_ClearServiceFaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ClearServiceFaultRequest, Bosdyn_Api_ClearServiceFaultResponse>
}

extension Bosdyn_Api_FaultServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.FaultService"
  }

  /// Sends a ServiceFault to be reporting in robot state.
  ///
  /// - Parameters:
  ///   - request: Request to send to TriggerServiceFault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func triggerServiceFault(
    _ request: Bosdyn_Api_TriggerServiceFaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_TriggerServiceFaultRequest, Bosdyn_Api_TriggerServiceFaultResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.FaultService/TriggerServiceFault",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTriggerServiceFaultInterceptors() ?? []
    )
  }

  /// Clears an active ServiceFault from robot state.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearServiceFault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clearServiceFault(
    _ request: Bosdyn_Api_ClearServiceFaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ClearServiceFaultRequest, Bosdyn_Api_ClearServiceFaultResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.FaultService/ClearServiceFault",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearServiceFaultInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_FaultServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'triggerServiceFault'.
  func makeTriggerServiceFaultInterceptors() -> [ClientInterceptor<Bosdyn_Api_TriggerServiceFaultRequest, Bosdyn_Api_TriggerServiceFaultResponse>]

  /// - Returns: Interceptors to use when invoking 'clearServiceFault'.
  func makeClearServiceFaultInterceptors() -> [ClientInterceptor<Bosdyn_Api_ClearServiceFaultRequest, Bosdyn_Api_ClearServiceFaultResponse>]
}

public final class Bosdyn_Api_FaultServiceClient: Bosdyn_Api_FaultServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_FaultServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.FaultService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_FaultServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The service fault service enables modification of the robot state ServiceFaultState.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_FaultServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_FaultServiceServerInterceptorFactoryProtocol? { get }

  /// Sends a ServiceFault to be reporting in robot state.
  func triggerServiceFault(request: Bosdyn_Api_TriggerServiceFaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_TriggerServiceFaultResponse>

  /// Clears an active ServiceFault from robot state.
  func clearServiceFault(request: Bosdyn_Api_ClearServiceFaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ClearServiceFaultResponse>
}

extension Bosdyn_Api_FaultServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.FaultService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "TriggerServiceFault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_TriggerServiceFaultRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_TriggerServiceFaultResponse>(),
        interceptors: self.interceptors?.makeTriggerServiceFaultInterceptors() ?? [],
        userFunction: self.triggerServiceFault(request:context:)
      )

    case "ClearServiceFault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ClearServiceFaultRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ClearServiceFaultResponse>(),
        interceptors: self.interceptors?.makeClearServiceFaultInterceptors() ?? [],
        userFunction: self.clearServiceFault(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_FaultServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'triggerServiceFault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTriggerServiceFaultInterceptors() -> [ServerInterceptor<Bosdyn_Api_TriggerServiceFaultRequest, Bosdyn_Api_TriggerServiceFaultResponse>]

  /// - Returns: Interceptors to use when handling 'clearServiceFault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearServiceFaultInterceptors() -> [ServerInterceptor<Bosdyn_Api_ClearServiceFaultRequest, Bosdyn_Api_ClearServiceFaultResponse>]
}
