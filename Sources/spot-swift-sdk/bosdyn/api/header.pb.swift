// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/header.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Standard header attached to all GRPC requests to services.
public struct Bosdyn_Api_RequestHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time that the request was sent, as measured by the client's local system clock.
  public var requestTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestTimestamp = newValue}
  }
  /// Returns true if `requestTimestamp` has been explicitly set.
  public var hasRequestTimestamp: Bool {return self._requestTimestamp != nil}
  /// Clears the value of `requestTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearRequestTimestamp() {self._requestTimestamp = nil}

  /// Name of the client to identify itself. The name will typically include a
  /// symbolic string to identify the program, and a unique integer to identify
  /// the specific instance of the process running.
  public var clientName: String = String()

  /// If Set to true, request that request and response messages for this call are not recorded
  /// in the GRPC log.
  public var disableRpcLogging: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// General error code are returned in the header to facilitate error-handling which is not
/// message-specific.
/// This can be used for generic error handlers, aggregation, and trend analysis.
public struct Bosdyn_Api_CommonError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The different error codes that can be returned on a grpc response message.
  public var code: Bosdyn_Api_CommonError.Code = .unspecified

  /// Human-readable error description.  Not for programmatic analysis.
  public var message: String = String()

  /// Extra information that can optionally be provided for generic error handling/analysis.
  public var data: SwiftProtobuf.Google_Protobuf_Any {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Code: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Code is not specified.
    case unspecified // = 0

    /// Not an error.  Request was successful.
    case ok // = 1

    /// Service experienced an unexpected error state.
    case internalServerError // = 2

    /// Ill-formed request.  Request arguments were not valid.
    case invalidRequest // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .ok
      case 2: self = .internalServerError
      case 3: self = .invalidRequest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .ok: return 1
      case .internalServerError: return 2
      case .invalidRequest: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_CommonError.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_CommonError.Code] = [
    .unspecified,
    .ok,
    .internalServerError,
    .invalidRequest,
  ]
}

#endif  // swift(>=4.2)

/// Standard header attached to all GRPC responses from services.
public struct Bosdyn_Api_ResponseHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Echo-back the RequestHeader for timing information, etc....
  public var requestHeader: Bosdyn_Api_RequestHeader {
    get {return _requestHeader ?? Bosdyn_Api_RequestHeader()}
    set {_requestHeader = newValue}
  }
  /// Returns true if `requestHeader` has been explicitly set.
  public var hasRequestHeader: Bool {return self._requestHeader != nil}
  /// Clears the value of `requestHeader`. Subsequent reads from it will return its default value.
  public mutating func clearRequestHeader() {self._requestHeader = nil}

  /// Time that the request was received. The server clock is the time basis.
  public var requestReceivedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _requestReceivedTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_requestReceivedTimestamp = newValue}
  }
  /// Returns true if `requestReceivedTimestamp` has been explicitly set.
  public var hasRequestReceivedTimestamp: Bool {return self._requestReceivedTimestamp != nil}
  /// Clears the value of `requestReceivedTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearRequestReceivedTimestamp() {self._requestReceivedTimestamp = nil}

  /// Time that the response was received. The server clock is the time basis.
  public var responseTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _responseTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_responseTimestamp = newValue}
  }
  /// Returns true if `responseTimestamp` has been explicitly set.
  public var hasResponseTimestamp: Bool {return self._responseTimestamp != nil}
  /// Clears the value of `responseTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearResponseTimestamp() {self._responseTimestamp = nil}

  /// Common errors, such as invalid input or internal server problems.
  /// If there is a common error, the rest of the response message outside of the
  /// ResponseHeader will be invalid.
  public var error: Bosdyn_Api_CommonError {
    get {return _error ?? Bosdyn_Api_CommonError()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  /// Echoed request message. In some cases it may not be present, or it may be a stripped
  /// down representation of the request.
  public var request: SwiftProtobuf.Google_Protobuf_Any {
    get {return _request ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  public var hasRequest: Bool {return self._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  public mutating func clearRequest() {self._request = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestHeader: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _requestReceivedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _responseTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _error: Bosdyn_Api_CommonError? = nil
  fileprivate var _request: SwiftProtobuf.Google_Protobuf_Any? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_RequestHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_timestamp"),
    2: .standard(proto: "client_name"),
    3: .standard(proto: "disable_rpc_logging"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._requestTimestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.clientName)
      case 3: try decoder.decodeSingularBoolField(value: &self.disableRpcLogging)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requestTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.clientName.isEmpty {
      try visitor.visitSingularStringField(value: self.clientName, fieldNumber: 2)
    }
    if self.disableRpcLogging != false {
      try visitor.visitSingularBoolField(value: self.disableRpcLogging, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RequestHeader, rhs: Bosdyn_Api_RequestHeader) -> Bool {
    if lhs._requestTimestamp != rhs._requestTimestamp {return false}
    if lhs.clientName != rhs.clientName {return false}
    if lhs.disableRpcLogging != rhs.disableRpcLogging {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CommonError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommonError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      case 3: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .unspecified {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_CommonError, rhs: Bosdyn_Api_CommonError) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CommonError.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CODE_UNSPECIFIED"),
    1: .same(proto: "CODE_OK"),
    2: .same(proto: "CODE_INTERNAL_SERVER_ERROR"),
    3: .same(proto: "CODE_INVALID_REQUEST"),
  ]
}

extension Bosdyn_Api_ResponseHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_header"),
    2: .standard(proto: "request_received_timestamp"),
    3: .standard(proto: "response_timestamp"),
    4: .same(proto: "error"),
    5: .same(proto: "request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._requestHeader)
      case 2: try decoder.decodeSingularMessageField(value: &self._requestReceivedTimestamp)
      case 3: try decoder.decodeSingularMessageField(value: &self._responseTimestamp)
      case 4: try decoder.decodeSingularMessageField(value: &self._error)
      case 5: try decoder.decodeSingularMessageField(value: &self._request)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requestHeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._requestReceivedTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._responseTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._request {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ResponseHeader, rhs: Bosdyn_Api_ResponseHeader) -> Bool {
    if lhs._requestHeader != rhs._requestHeader {return false}
    if lhs._requestReceivedTimestamp != rhs._requestReceivedTimestamp {return false}
    if lhs._responseTimestamp != rhs._responseTimestamp {return false}
    if lhs._error != rhs._error {return false}
    if lhs._request != rhs._request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
