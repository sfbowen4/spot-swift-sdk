// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/service_fault.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information necessary to uniquely specify a service fault.
/// A service fault typically is associated with a service running on the robot or a
/// payload. Occassionally, the fault may pertain to a payload but no specific service
/// on the payload. In that situation, no service_name should not be specified and instead
/// a payload_guid should be specified. Otherwise, in the standard case of a service
/// originating fault, only the service_name should be specified and the payload_guid
/// will be populated automatically by the fault service on robot.
public struct Bosdyn_Api_ServiceFaultId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the fault.
  public var faultName: String = String()

  /// Name of the registered service associated with the fault.
  /// Optional. Service name does not need to be specified if this is a payload-level
  /// fault with no associated service.
  public var serviceName: String = String()

  /// GUID of the payload associated with the faulted service.
  /// Optional. If not set, it will be assigned to the payload associated with the
  /// service_name.
  public var payloadGuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The current service faults for services registered with the robot.
/// A fault is an indicator of a problem with a service or payload registered
/// with the robot. An active fault may indicate a service may fail to comply
/// with a user request.
/// If the name, service_name, and payload_guid of a newly triggered ServiceFault matches an
/// already active ServiceFault the new fault will not be added to the active fault list.
/// The oldest matching fault will be maintained.
public struct Bosdyn_Api_ServiceFault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifying information of the fault.
  public var faultID: Bosdyn_Api_ServiceFaultId {
    get {return _faultID ?? Bosdyn_Api_ServiceFaultId()}
    set {_faultID = newValue}
  }
  /// Returns true if `faultID` has been explicitly set.
  public var hasFaultID: Bool {return self._faultID != nil}
  /// Clears the value of `faultID`. Subsequent reads from it will return its default value.
  public mutating func clearFaultID() {self._faultID = nil}

  /// User visible description of the fault (and possibly remedies). Will be
  /// displayed on tablet.
  public var errorMessage: String = String()

  /// Fault attributes
  /// Each fault may be flagged with attribute metadata (strings in this case.)
  /// These attributes are useful to communicate that a particular fault may
  /// have significant effect on the operations of services. Some potential attributes
  /// may be "autowalk", "Spot CORE", "vision", or "gauge detection". These
  /// attributes enable the caller to flag a fault as indicating a problem with
  /// particular robot abstractions. A fault may have, zero, one, or more
  /// attributes attached to it.
  public var attributes: [String] = []

  /// The severity level will have some indication of the potential breakage
  /// resulting from the fault. For example, a fault associated with payload
  /// X and severity level SEVERITY_INFO may indicate the payload is in an
  /// unexpected state but still operational. However, a fault with serverity
  /// level SEVERITY_CRITICAL may indicate the payload is no
  /// longer operational.
  public var severity: Bosdyn_Api_ServiceFault.Severity = .unknown

  /// Time of robot local clock at fault onset. Set by robot-state service.
  public var onsetTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _onsetTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_onsetTimestamp = newValue}
  }
  /// Returns true if `onsetTimestamp` has been explicitly set.
  public var hasOnsetTimestamp: Bool {return self._onsetTimestamp != nil}
  /// Clears the value of `onsetTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearOnsetTimestamp() {self._onsetTimestamp = nil}

  /// Time elapsed since onset of the fault. Set by robot-state service.
  public var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  public var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  public mutating func clearDuration() {self._duration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Severity: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown severity
    case unknown // = 0

    /// Service still functional
    case info // = 1

    /// Service performance may be degraded
    case warn // = 2

    /// Critical service fault
    case critical // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .info
      case 2: self = .warn
      case 3: self = .critical
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .info: return 1
      case .warn: return 2
      case .critical: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _faultID: Bosdyn_Api_ServiceFaultId? = nil
  fileprivate var _onsetTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_ServiceFault.Severity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ServiceFault.Severity] = [
    .unknown,
    .info,
    .warn,
    .critical,
  ]
}

#endif  // swift(>=4.2)

/// Trigger a new service fault that will be reported in the robot ServiceFaultState.
/// These faults will be displayed in the tablet. Developers should be careful to
/// avoid overwhelming operators with dozens of minor messages.
public struct Bosdyn_Api_TriggerServiceFaultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The fault to report in ServiceFaultState.
  public var fault: Bosdyn_Api_ServiceFault {
    get {return _fault ?? Bosdyn_Api_ServiceFault()}
    set {_fault = newValue}
  }
  /// Returns true if `fault` has been explicitly set.
  public var hasFault: Bool {return self._fault != nil}
  /// Clears the value of `fault`. Subsequent reads from it will return its default value.
  public mutating func clearFault() {self._fault = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _fault: Bosdyn_Api_ServiceFault? = nil
}

/// The TriggerServiceFault response message contains a header indicating success.
public struct Bosdyn_Api_TriggerServiceFaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_TriggerServiceFaultResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used.
    case unknown // = 0

    /// Success. The fault has been triggerd.
    case ok // = 1

    /// ServiceFaultId already in active faults.
    case faultAlreadyActive // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .faultAlreadyActive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .faultAlreadyActive: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_TriggerServiceFaultResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_TriggerServiceFaultResponse.Status] = [
    .unknown,
    .ok,
    .faultAlreadyActive,
  ]
}

#endif  // swift(>=4.2)

/// Clear a service fault from the robot's ServiceFaultState (in robot_state.proto).
/// The active ServiceFault to clear will be determined by matching fault_name and
/// service_name/payload_guid, specified in the ServiceFaultId message.
public struct Bosdyn_Api_ClearServiceFaultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Identifying information of the fault to clear.
  public var faultID: Bosdyn_Api_ServiceFaultId {
    get {return _faultID ?? Bosdyn_Api_ServiceFaultId()}
    set {_faultID = newValue}
  }
  /// Returns true if `faultID` has been explicitly set.
  public var hasFaultID: Bool {return self._faultID != nil}
  /// Clears the value of `faultID`. Subsequent reads from it will return its default value.
  public mutating func clearFaultID() {self._faultID = nil}

  /// Clear all faults that are associated with the same service_name. Use carefully.
  public var clearAllServiceFaults_p: Bool = false

  /// Clear all faults that are associated with the same payload_guid. Use carefully.
  public var clearAllPayloadFaults_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _faultID: Bosdyn_Api_ServiceFaultId? = nil
}

/// The ClearServiceFault response message contains a header indicating success.
public struct Bosdyn_Api_ClearServiceFaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_ClearServiceFaultResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used.
    case unknown // = 0

    /// Success. The fault has been cleared.
    case ok // = 1

    /// ServiceFaultId not found in active faults.
    case faultNotActive // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .faultNotActive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .faultNotActive: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_ClearServiceFaultResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ClearServiceFaultResponse.Status] = [
    .unknown,
    .ok,
    .faultNotActive,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_ServiceFaultId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceFaultId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fault_name"),
    2: .standard(proto: "service_name"),
    3: .standard(proto: "payload_guid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.faultName)
      case 2: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 3: try decoder.decodeSingularStringField(value: &self.payloadGuid)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.faultName.isEmpty {
      try visitor.visitSingularStringField(value: self.faultName, fieldNumber: 1)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 2)
    }
    if !self.payloadGuid.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadGuid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ServiceFaultId, rhs: Bosdyn_Api_ServiceFaultId) -> Bool {
    if lhs.faultName != rhs.faultName {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.payloadGuid != rhs.payloadGuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ServiceFault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceFault"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fault_id"),
    2: .standard(proto: "error_message"),
    3: .same(proto: "attributes"),
    4: .same(proto: "severity"),
    5: .standard(proto: "onset_timestamp"),
    6: .same(proto: "duration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._faultID)
      case 2: try decoder.decodeSingularStringField(value: &self.errorMessage)
      case 3: try decoder.decodeRepeatedStringField(value: &self.attributes)
      case 4: try decoder.decodeSingularEnumField(value: &self.severity)
      case 5: try decoder.decodeSingularMessageField(value: &self._onsetTimestamp)
      case 6: try decoder.decodeSingularMessageField(value: &self._duration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._faultID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.attributes, fieldNumber: 3)
    }
    if self.severity != .unknown {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 4)
    }
    if let v = self._onsetTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ServiceFault, rhs: Bosdyn_Api_ServiceFault) -> Bool {
    if lhs._faultID != rhs._faultID {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs._onsetTimestamp != rhs._onsetTimestamp {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ServiceFault.Severity: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEVERITY_UNKNOWN"),
    1: .same(proto: "SEVERITY_INFO"),
    2: .same(proto: "SEVERITY_WARN"),
    3: .same(proto: "SEVERITY_CRITICAL"),
  ]
}

extension Bosdyn_Api_TriggerServiceFaultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerServiceFaultRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "fault"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._fault)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fault {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TriggerServiceFaultRequest, rhs: Bosdyn_Api_TriggerServiceFaultRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._fault != rhs._fault {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TriggerServiceFaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerServiceFaultResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TriggerServiceFaultResponse, rhs: Bosdyn_Api_TriggerServiceFaultResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TriggerServiceFaultResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_FAULT_ALREADY_ACTIVE"),
  ]
}

extension Bosdyn_Api_ClearServiceFaultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClearServiceFaultRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "fault_id"),
    3: .standard(proto: "clear_all_service_faults"),
    4: .standard(proto: "clear_all_payload_faults"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._faultID)
      case 3: try decoder.decodeSingularBoolField(value: &self.clearAllServiceFaults_p)
      case 4: try decoder.decodeSingularBoolField(value: &self.clearAllPayloadFaults_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._faultID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.clearAllServiceFaults_p != false {
      try visitor.visitSingularBoolField(value: self.clearAllServiceFaults_p, fieldNumber: 3)
    }
    if self.clearAllPayloadFaults_p != false {
      try visitor.visitSingularBoolField(value: self.clearAllPayloadFaults_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClearServiceFaultRequest, rhs: Bosdyn_Api_ClearServiceFaultRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._faultID != rhs._faultID {return false}
    if lhs.clearAllServiceFaults_p != rhs.clearAllServiceFaults_p {return false}
    if lhs.clearAllPayloadFaults_p != rhs.clearAllPayloadFaults_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClearServiceFaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClearServiceFaultResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClearServiceFaultResponse, rhs: Bosdyn_Api_ClearServiceFaultResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClearServiceFaultResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_FAULT_NOT_ACTIVE"),
  ]
}
