//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/directory_registration_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// DirectoryRegistrationService is a private class that lets services be
/// discovered by clients by adding them to a discovery database.  Services
/// can live on robot, payload, or other accessible cloud-based locations.
/// Each service is responsible for registering itself with this service.
///
/// Usage: instantiate `Bosdyn_Api_DirectoryRegistrationServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_DirectoryRegistrationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_DirectoryRegistrationServiceClientInterceptorFactoryProtocol? { get }

  func registerService(
    _ request: Bosdyn_Api_RegisterServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RegisterServiceRequest, Bosdyn_Api_RegisterServiceResponse>

  func unregisterService(
    _ request: Bosdyn_Api_UnregisterServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_UnregisterServiceRequest, Bosdyn_Api_UnregisterServiceResponse>

  func updateService(
    _ request: Bosdyn_Api_UpdateServiceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_UpdateServiceRequest, Bosdyn_Api_UpdateServiceResponse>
}

extension Bosdyn_Api_DirectoryRegistrationServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.DirectoryRegistrationService"
  }

  /// Called by a producer to register as a provider with the application.  Returns the
  /// record for that provider.  Requires unique name and correctly filled out service
  /// record in request.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerService(
    _ request: Bosdyn_Api_RegisterServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RegisterServiceRequest, Bosdyn_Api_RegisterServiceResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DirectoryRegistrationService/RegisterService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterServiceInterceptors() ?? []
    )
  }

  /// Called by a producer to remove its registration from the DirectoryManager.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnregisterService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unregisterService(
    _ request: Bosdyn_Api_UnregisterServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_UnregisterServiceRequest, Bosdyn_Api_UnregisterServiceResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DirectoryRegistrationService/UnregisterService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnregisterServiceInterceptors() ?? []
    )
  }

  /// Update the ServiceEntry for a producer on the server.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateService.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateService(
    _ request: Bosdyn_Api_UpdateServiceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_UpdateServiceRequest, Bosdyn_Api_UpdateServiceResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DirectoryRegistrationService/UpdateService",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateServiceInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_DirectoryRegistrationServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerService'.
  func makeRegisterServiceInterceptors() -> [ClientInterceptor<Bosdyn_Api_RegisterServiceRequest, Bosdyn_Api_RegisterServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'unregisterService'.
  func makeUnregisterServiceInterceptors() -> [ClientInterceptor<Bosdyn_Api_UnregisterServiceRequest, Bosdyn_Api_UnregisterServiceResponse>]

  /// - Returns: Interceptors to use when invoking 'updateService'.
  func makeUpdateServiceInterceptors() -> [ClientInterceptor<Bosdyn_Api_UpdateServiceRequest, Bosdyn_Api_UpdateServiceResponse>]
}

public final class Bosdyn_Api_DirectoryRegistrationServiceClient: Bosdyn_Api_DirectoryRegistrationServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_DirectoryRegistrationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.DirectoryRegistrationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_DirectoryRegistrationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// DirectoryRegistrationService is a private class that lets services be
/// discovered by clients by adding them to a discovery database.  Services
/// can live on robot, payload, or other accessible cloud-based locations.
/// Each service is responsible for registering itself with this service.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_DirectoryRegistrationServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_DirectoryRegistrationServiceServerInterceptorFactoryProtocol? { get }

  /// Called by a producer to register as a provider with the application.  Returns the
  /// record for that provider.  Requires unique name and correctly filled out service
  /// record in request.
  func registerService(request: Bosdyn_Api_RegisterServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RegisterServiceResponse>

  /// Called by a producer to remove its registration from the DirectoryManager.
  func unregisterService(request: Bosdyn_Api_UnregisterServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_UnregisterServiceResponse>

  /// Update the ServiceEntry for a producer on the server.
  func updateService(request: Bosdyn_Api_UpdateServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_UpdateServiceResponse>
}

extension Bosdyn_Api_DirectoryRegistrationServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.DirectoryRegistrationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RegisterServiceRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RegisterServiceResponse>(),
        interceptors: self.interceptors?.makeRegisterServiceInterceptors() ?? [],
        userFunction: self.registerService(request:context:)
      )

    case "UnregisterService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_UnregisterServiceRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_UnregisterServiceResponse>(),
        interceptors: self.interceptors?.makeUnregisterServiceInterceptors() ?? [],
        userFunction: self.unregisterService(request:context:)
      )

    case "UpdateService":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_UpdateServiceRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_UpdateServiceResponse>(),
        interceptors: self.interceptors?.makeUpdateServiceInterceptors() ?? [],
        userFunction: self.updateService(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_DirectoryRegistrationServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterServiceInterceptors() -> [ServerInterceptor<Bosdyn_Api_RegisterServiceRequest, Bosdyn_Api_RegisterServiceResponse>]

  /// - Returns: Interceptors to use when handling 'unregisterService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnregisterServiceInterceptors() -> [ServerInterceptor<Bosdyn_Api_UnregisterServiceRequest, Bosdyn_Api_UnregisterServiceResponse>]

  /// - Returns: Interceptors to use when handling 'updateService'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateServiceInterceptors() -> [ServerInterceptor<Bosdyn_Api_UpdateServiceRequest, Bosdyn_Api_UpdateServiceResponse>]
}
