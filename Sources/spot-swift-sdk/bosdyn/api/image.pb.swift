// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/image.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Rectangular color/greyscale/depth images.
public struct Bosdyn_Api_Image {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Number of columns in the image (in pixels).
  public var cols: Int32 = 0

  /// Number of rows in the image (in pixels).
  public var rows: Int32 = 0

  /// Raw image data.
  public var data: Data = SwiftProtobuf.Internal.emptyData

  /// How the image is encoded.
  public var format: Bosdyn_Api_Image.Format = .unknown

  /// If Format does not imply PixelFormat, this will be set.
  public var pixelFormat: Bosdyn_Api_Image.PixelFormat = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Format: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown image format.
    case unknown // = 0

    /// Color/greyscale formats.
    /// JPEG format.
    case jpeg // = 1

    /// Uncompressed.  Requires pixel_format.
    case raw // = 2

    /// 1 byte run-length before each pixel value.
    case rle // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .jpeg
      case 2: self = .raw
      case 3: self = .rle
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .jpeg: return 1
      case .raw: return 2
      case .rle: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum PixelFormat: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified value -- should not be used.
    case unknown // = 0

    /// One byte per pixel.
    case greyscaleU8 // = 1

    /// Three bytes per pixel.
    case rgbU8 // = 3

    /// Four bytes per pixel.
    case rgbaU8 // = 4

    /// Little-endian uint16 z-distance from camera (mm).
    case depthU16 // = 5

    /// Two bytes per pixel.
    case greyscaleU16 // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .greyscaleU8
      case 3: self = .rgbU8
      case 4: self = .rgbaU8
      case 5: self = .depthU16
      case 6: self = .greyscaleU16
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .greyscaleU8: return 1
      case .rgbU8: return 3
      case .rgbaU8: return 4
      case .depthU16: return 5
      case .greyscaleU16: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_Image.Format: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Image.Format] = [
    .unknown,
    .jpeg,
    .raw,
    .rle,
  ]
}

extension Bosdyn_Api_Image.PixelFormat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_Image.PixelFormat] = [
    .unknown,
    .greyscaleU8,
    .rgbU8,
    .rgbaU8,
    .depthU16,
    .greyscaleU16,
  ]
}

#endif  // swift(>=4.2)

/// Sensor parameters associated with an image capture.
public struct Bosdyn_Api_CaptureParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The duration of exposure in microseconds.
  public var exposureDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _exposureDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_exposureDuration = newValue}
  }
  /// Returns true if `exposureDuration` has been explicitly set.
  public var hasExposureDuration: Bool {return self._exposureDuration != nil}
  /// Clears the value of `exposureDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExposureDuration() {self._exposureDuration = nil}

  /// Sensor gain in dB.
  public var gain: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _exposureDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// Rectangular color/greyscale images.
public struct Bosdyn_Api_ImageCapture {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The time at which the image data was acquired in the robot's time basis.
  public var acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _acquisitionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_acquisitionTime = newValue}
  }
  /// Returns true if `acquisitionTime` has been explicitly set.
  public var hasAcquisitionTime: Bool {return self._acquisitionTime != nil}
  /// Clears the value of `acquisitionTime`. Subsequent reads from it will return its default value.
  public mutating func clearAcquisitionTime() {self._acquisitionTime = nil}

  /// A tree-based collection of transformations, which will include the transformations to each image's
  /// sensor in addition to transformations to the common frames ("vision", "body", "odom").
  /// All transforms within the snapshot are at the acquistion time of the image.
  public var transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot {
    get {return _transformsSnapshot ?? Bosdyn_Api_FrameTreeSnapshot()}
    set {_transformsSnapshot = newValue}
  }
  /// Returns true if `transformsSnapshot` has been explicitly set.
  public var hasTransformsSnapshot: Bool {return self._transformsSnapshot != nil}
  /// Clears the value of `transformsSnapshot`. Subsequent reads from it will return its default value.
  public mutating func clearTransformsSnapshot() {self._transformsSnapshot = nil}

  /// The frame name for the image's sensor source. This will be included in the transform snapshot.
  public var frameNameImageSensor: String = String()

  /// Image data.
  public var image: Bosdyn_Api_Image {
    get {return _image ?? Bosdyn_Api_Image()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  public var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  public mutating func clearImage() {self._image = nil}

  /// Sensor parameters associated with this image capture.
  public var captureParams: Bosdyn_Api_CaptureParameters {
    get {return _captureParams ?? Bosdyn_Api_CaptureParameters()}
    set {_captureParams = newValue}
  }
  /// Returns true if `captureParams` has been explicitly set.
  public var hasCaptureParams: Bool {return self._captureParams != nil}
  /// Clears the value of `captureParams`. Subsequent reads from it will return its default value.
  public mutating func clearCaptureParams() {self._captureParams = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _acquisitionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _transformsSnapshot: Bosdyn_Api_FrameTreeSnapshot? = nil
  fileprivate var _image: Bosdyn_Api_Image? = nil
  fileprivate var _captureParams: Bosdyn_Api_CaptureParameters? = nil
}

/// Proto for a description of an image source on the robot.
public struct Bosdyn_Api_ImageSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of this image source used to get images.
  public var name: String = String()

  /// Number of columns in the image (in pixels).
  public var cols: Int32 = 0

  /// Number of rows in the image (in pixels).
  public var rows: Int32 = 0

  /// The depth scale for the image data. Typically 1000, which converts it from mm to m.
  public var depthScale: Double = 0

  public var cameraModels: Bosdyn_Api_ImageSource.OneOf_CameraModels? = nil

  /// Rectilinear camera model.
  public var pinhole: Bosdyn_Api_ImageSource.PinholeModel {
    get {
      if case .pinhole(let v)? = cameraModels {return v}
      return Bosdyn_Api_ImageSource.PinholeModel()
    }
    set {cameraModels = .pinhole(newValue)}
  }

  /// The kind of images returned by this image source.
  public var imageType: Bosdyn_Api_ImageSource.ImageType = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_CameraModels: Equatable {
    /// Rectilinear camera model.
    case pinhole(Bosdyn_Api_ImageSource.PinholeModel)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_ImageSource.OneOf_CameraModels, rhs: Bosdyn_Api_ImageSource.OneOf_CameraModels) -> Bool {
      switch (lhs, rhs) {
      case (.pinhole(let l), .pinhole(let r)): return l == r
      }
    }
  #endif
  }

  public enum ImageType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified image type.
    case unknown // = 0

    /// Color or greyscale intensity image.
    case visual // = 1

    /// Pixel values represent distances to objects/surfaces.
    case depth // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .visual
      case 2: self = .depth
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .visual: return 1
      case .depth: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The camera can be modeled as a pinhole camera described with a matrix.
  /// Camera Matrix can be constructed by the camera intrinsics:
  /// [[focal_length.x,         skew.x, principal_point.x],
  /// [[        skew.y, focal_length.y, principal_point.y],
  /// [[             0,              0,                 1]]
  public struct PinholeModel {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The camera intrinsics are necessary for descrbing the pinhole camera matrix.
    public var intrinsics: Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics {
      get {return _intrinsics ?? Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics()}
      set {_intrinsics = newValue}
    }
    /// Returns true if `intrinsics` has been explicitly set.
    public var hasIntrinsics: Bool {return self._intrinsics != nil}
    /// Clears the value of `intrinsics`. Subsequent reads from it will return its default value.
    public mutating func clearIntrinsics() {self._intrinsics = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Intrinsic parameters are in pixel space.
    public struct CameraIntrinsics {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The focal length of the camera.
      public var focalLength: Bosdyn_Api_Vec2 {
        get {return _focalLength ?? Bosdyn_Api_Vec2()}
        set {_focalLength = newValue}
      }
      /// Returns true if `focalLength` has been explicitly set.
      public var hasFocalLength: Bool {return self._focalLength != nil}
      /// Clears the value of `focalLength`. Subsequent reads from it will return its default value.
      public mutating func clearFocalLength() {self._focalLength = nil}

      /// The optical center in sensor coordinates.
      public var principalPoint: Bosdyn_Api_Vec2 {
        get {return _principalPoint ?? Bosdyn_Api_Vec2()}
        set {_principalPoint = newValue}
      }
      /// Returns true if `principalPoint` has been explicitly set.
      public var hasPrincipalPoint: Bool {return self._principalPoint != nil}
      /// Clears the value of `principalPoint`. Subsequent reads from it will return its default value.
      public mutating func clearPrincipalPoint() {self._principalPoint = nil}

      /// The skew for the intrinsic matrix.
      public var skew: Bosdyn_Api_Vec2 {
        get {return _skew ?? Bosdyn_Api_Vec2()}
        set {_skew = newValue}
      }
      /// Returns true if `skew` has been explicitly set.
      public var hasSkew: Bool {return self._skew != nil}
      /// Clears the value of `skew`. Subsequent reads from it will return its default value.
      public mutating func clearSkew() {self._skew = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _focalLength: Bosdyn_Api_Vec2? = nil
      fileprivate var _principalPoint: Bosdyn_Api_Vec2? = nil
      fileprivate var _skew: Bosdyn_Api_Vec2? = nil
    }

    public init() {}

    fileprivate var _intrinsics: Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_ImageSource.ImageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ImageSource.ImageType] = [
    .unknown,
    .visual,
    .depth,
  ]
}

#endif  // swift(>=4.2)

/// The ListImageSources request message for the robot image service.
public struct Bosdyn_Api_ListImageSourcesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The ListImageSources response message which contains all known image sources for the robot.
public struct Bosdyn_Api_ListImageSourcesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response Header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The set of ImageSources available from this service.
  /// May be empty if the service serves no cameras (e.g., if no cameras were found on startup).
  public var imageSources: [Bosdyn_Api_ImageSource] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// The image request specifying the image source and data format desired.
public struct Bosdyn_Api_ImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The string name of the image source to get image data from.
  public var imageSourceName: String = String()

  /// Image quality: a number from 0 (worst) to 100 (highest).
  /// Note that jpeg quality 100 is still lossy.
  public var qualityPercent: Double = 0

  /// Specify the desired image encoding (e.g. JPEG, RAW). If no format is specified (e.g. FORMAT_UNKNOWN), the image
  /// service will choose the best format for the data.
  public var imageFormat: Bosdyn_Api_Image.Format = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The GetImage request message which can send multiple different image source requests at once.
public struct Bosdyn_Api_GetImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The different image requests for this rpc call.
  public var imageRequests: [Bosdyn_Api_ImageRequest] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The image response for each request, that includes image data and image source information.
public struct Bosdyn_Api_ImageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The image capture contains the image data and information about the state of the camera and robot
  /// at the time the image was collected.
  public var shot: Bosdyn_Api_ImageCapture {
    get {return _shot ?? Bosdyn_Api_ImageCapture()}
    set {_shot = newValue}
  }
  /// Returns true if `shot` has been explicitly set.
  public var hasShot: Bool {return self._shot != nil}
  /// Clears the value of `shot`. Subsequent reads from it will return its default value.
  public mutating func clearShot() {self._shot = nil}

  /// The source describes general information about the camera source the image data was collected from.
  public var source: Bosdyn_Api_ImageSource {
    get {return _source ?? Bosdyn_Api_ImageSource()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {self._source = nil}

  /// Return status of the request.
  public var status: Bosdyn_Api_ImageResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used.
    /// An internal ImageService issue has happened if UNKNOWN is set.
    /// None of the other fields are filled out.
    case unknown // = 0

    /// Call succeeded at filling out all the fields.
    case ok // = 1

    /// Image source name in request is unknown.  Other fields are not filled out.
    case unknownCamera // = 2

    /// Failed to fill out ImageSource.  All the other fields are not filled out.
    case sourceDataError // = 3

    /// There was a problem with the image data.  Only the ImageSource is filled out.
    case imageDataError // = 4

    /// The requested image format is unsupported for the image-source named. The image data will
    /// not be filled out. Note, if an image request has "FORMAT_UNKNOWN", the service should choose the
    /// best format to provide the data in.
    case unsupportedImageFormatRequested // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .unknownCamera
      case 3: self = .sourceDataError
      case 4: self = .imageDataError
      case 5: self = .unsupportedImageFormatRequested
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .unknownCamera: return 2
      case .sourceDataError: return 3
      case .imageDataError: return 4
      case .unsupportedImageFormatRequested: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _shot: Bosdyn_Api_ImageCapture? = nil
  fileprivate var _source: Bosdyn_Api_ImageSource? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_ImageResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ImageResponse.Status] = [
    .unknown,
    .ok,
    .unknownCamera,
    .sourceDataError,
    .imageDataError,
    .unsupportedImageFormatRequested,
  ]
}

#endif  // swift(>=4.2)

/// The GetImage response message which includes image data for all requested sources.
public struct Bosdyn_Api_GetImageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The ordering of these image responses is defined by the order of the ImageRequests.
  public var imageResponses: [Bosdyn_Api_ImageResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "cols"),
    3: .same(proto: "rows"),
    4: .same(proto: "data"),
    5: .same(proto: "format"),
    6: .standard(proto: "pixel_format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self.cols)
      case 3: try decoder.decodeSingularInt32Field(value: &self.rows)
      case 4: try decoder.decodeSingularBytesField(value: &self.data)
      case 5: try decoder.decodeSingularEnumField(value: &self.format)
      case 6: try decoder.decodeSingularEnumField(value: &self.pixelFormat)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cols != 0 {
      try visitor.visitSingularInt32Field(value: self.cols, fieldNumber: 2)
    }
    if self.rows != 0 {
      try visitor.visitSingularInt32Field(value: self.rows, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    if self.format != .unknown {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 5)
    }
    if self.pixelFormat != .unknown {
      try visitor.visitSingularEnumField(value: self.pixelFormat, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Image, rhs: Bosdyn_Api_Image) -> Bool {
    if lhs.cols != rhs.cols {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.data != rhs.data {return false}
    if lhs.format != rhs.format {return false}
    if lhs.pixelFormat != rhs.pixelFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Image.Format: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FORMAT_UNKNOWN"),
    1: .same(proto: "FORMAT_JPEG"),
    2: .same(proto: "FORMAT_RAW"),
    3: .same(proto: "FORMAT_RLE"),
  ]
}

extension Bosdyn_Api_Image.PixelFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PIXEL_FORMAT_UNKNOWN"),
    1: .same(proto: "PIXEL_FORMAT_GREYSCALE_U8"),
    3: .same(proto: "PIXEL_FORMAT_RGB_U8"),
    4: .same(proto: "PIXEL_FORMAT_RGBA_U8"),
    5: .same(proto: "PIXEL_FORMAT_DEPTH_U16"),
    6: .same(proto: "PIXEL_FORMAT_GREYSCALE_U16"),
  ]
}

extension Bosdyn_Api_CaptureParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CaptureParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exposure_duration"),
    2: .same(proto: "gain"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._exposureDuration)
      case 2: try decoder.decodeSingularDoubleField(value: &self.gain)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._exposureDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.gain != 0 {
      try visitor.visitSingularDoubleField(value: self.gain, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_CaptureParameters, rhs: Bosdyn_Api_CaptureParameters) -> Bool {
    if lhs._exposureDuration != rhs._exposureDuration {return false}
    if lhs.gain != rhs.gain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageCapture: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageCapture"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    30: .standard(proto: "acquisition_time"),
    31: .standard(proto: "transforms_snapshot"),
    5: .standard(proto: "frame_name_image_sensor"),
    3: .same(proto: "image"),
    4: .standard(proto: "capture_params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularMessageField(value: &self._image)
      case 4: try decoder.decodeSingularMessageField(value: &self._captureParams)
      case 5: try decoder.decodeSingularStringField(value: &self.frameNameImageSensor)
      case 30: try decoder.decodeSingularMessageField(value: &self._acquisitionTime)
      case 31: try decoder.decodeSingularMessageField(value: &self._transformsSnapshot)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._captureParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.frameNameImageSensor.isEmpty {
      try visitor.visitSingularStringField(value: self.frameNameImageSensor, fieldNumber: 5)
    }
    if let v = self._acquisitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
    }
    if let v = self._transformsSnapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageCapture, rhs: Bosdyn_Api_ImageCapture) -> Bool {
    if lhs._acquisitionTime != rhs._acquisitionTime {return false}
    if lhs._transformsSnapshot != rhs._transformsSnapshot {return false}
    if lhs.frameNameImageSensor != rhs.frameNameImageSensor {return false}
    if lhs._image != rhs._image {return false}
    if lhs._captureParams != rhs._captureParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "name"),
    4: .same(proto: "cols"),
    5: .same(proto: "rows"),
    6: .standard(proto: "depth_scale"),
    8: .same(proto: "pinhole"),
    9: .standard(proto: "image_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularInt32Field(value: &self.cols)
      case 5: try decoder.decodeSingularInt32Field(value: &self.rows)
      case 6: try decoder.decodeSingularDoubleField(value: &self.depthScale)
      case 8:
        var v: Bosdyn_Api_ImageSource.PinholeModel?
        if let current = self.cameraModels {
          try decoder.handleConflictingOneOf()
          if case .pinhole(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.cameraModels = .pinhole(v)}
      case 9: try decoder.decodeSingularEnumField(value: &self.imageType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.cols != 0 {
      try visitor.visitSingularInt32Field(value: self.cols, fieldNumber: 4)
    }
    if self.rows != 0 {
      try visitor.visitSingularInt32Field(value: self.rows, fieldNumber: 5)
    }
    if self.depthScale != 0 {
      try visitor.visitSingularDoubleField(value: self.depthScale, fieldNumber: 6)
    }
    if case .pinhole(let v)? = self.cameraModels {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.imageType != .unknown {
      try visitor.visitSingularEnumField(value: self.imageType, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageSource, rhs: Bosdyn_Api_ImageSource) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.cols != rhs.cols {return false}
    if lhs.rows != rhs.rows {return false}
    if lhs.depthScale != rhs.depthScale {return false}
    if lhs.cameraModels != rhs.cameraModels {return false}
    if lhs.imageType != rhs.imageType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageSource.ImageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMAGE_TYPE_UNKNOWN"),
    1: .same(proto: "IMAGE_TYPE_VISUAL"),
    2: .same(proto: "IMAGE_TYPE_DEPTH"),
  ]
}

extension Bosdyn_Api_ImageSource.PinholeModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_ImageSource.protoMessageName + ".PinholeModel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "intrinsics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._intrinsics)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._intrinsics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageSource.PinholeModel, rhs: Bosdyn_Api_ImageSource.PinholeModel) -> Bool {
    if lhs._intrinsics != rhs._intrinsics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_ImageSource.PinholeModel.protoMessageName + ".CameraIntrinsics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "focal_length"),
    2: .standard(proto: "principal_point"),
    3: .same(proto: "skew"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._focalLength)
      case 2: try decoder.decodeSingularMessageField(value: &self._principalPoint)
      case 3: try decoder.decodeSingularMessageField(value: &self._skew)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._focalLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._principalPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._skew {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics, rhs: Bosdyn_Api_ImageSource.PinholeModel.CameraIntrinsics) -> Bool {
    if lhs._focalLength != rhs._focalLength {return false}
    if lhs._principalPoint != rhs._principalPoint {return false}
    if lhs._skew != rhs._skew {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListImageSourcesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListImageSourcesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListImageSourcesRequest, rhs: Bosdyn_Api_ListImageSourcesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListImageSourcesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListImageSourcesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "image_sources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.imageSources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.imageSources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageSources, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListImageSourcesResponse, rhs: Bosdyn_Api_ListImageSourcesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.imageSources != rhs.imageSources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_source_name"),
    2: .standard(proto: "quality_percent"),
    3: .standard(proto: "image_format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.imageSourceName)
      case 2: try decoder.decodeSingularDoubleField(value: &self.qualityPercent)
      case 3: try decoder.decodeSingularEnumField(value: &self.imageFormat)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageSourceName.isEmpty {
      try visitor.visitSingularStringField(value: self.imageSourceName, fieldNumber: 1)
    }
    if self.qualityPercent != 0 {
      try visitor.visitSingularDoubleField(value: self.qualityPercent, fieldNumber: 2)
    }
    if self.imageFormat != .unknown {
      try visitor.visitSingularEnumField(value: self.imageFormat, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageRequest, rhs: Bosdyn_Api_ImageRequest) -> Bool {
    if lhs.imageSourceName != rhs.imageSourceName {return false}
    if lhs.qualityPercent != rhs.qualityPercent {return false}
    if lhs.imageFormat != rhs.imageFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetImageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "image_requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.imageRequests)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.imageRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageRequests, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetImageRequest, rhs: Bosdyn_Api_GetImageRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.imageRequests != rhs.imageRequests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shot"),
    2: .same(proto: "source"),
    4: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._shot)
      case 2: try decoder.decodeSingularMessageField(value: &self._source)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._shot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageResponse, rhs: Bosdyn_Api_ImageResponse) -> Bool {
    if lhs._shot != rhs._shot {return false}
    if lhs._source != rhs._source {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_UNKNOWN_CAMERA"),
    3: .same(proto: "STATUS_SOURCE_DATA_ERROR"),
    4: .same(proto: "STATUS_IMAGE_DATA_ERROR"),
    5: .same(proto: "STATUS_UNSUPPORTED_IMAGE_FORMAT_REQUESTED"),
  ]
}

extension Bosdyn_Api_GetImageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetImageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "image_responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.imageResponses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.imageResponses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageResponses, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetImageResponse, rhs: Bosdyn_Api_GetImageResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.imageResponses != rhs.imageResponses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
