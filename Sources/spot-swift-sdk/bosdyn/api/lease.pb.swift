// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/lease.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Leases are used to verify that a client has exclusive access to a shared
/// resources. Examples of shared resources are the motors for a robot, or
/// indicator lights on a robot.
/// Leases are initially obtained by clients from the LeaseService. Clients
/// then attach Leases to Commands which require them. Clients may also
/// generate sub-Leases to delegate out control of the resource to other
/// services.
public struct Bosdyn_Api_Lease {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource that the Lease is for.
  public var resource: String = String()

  /// The epoch for the Lease. The sequences field are scoped to a particular epoch.
  /// One example of where this can be used is to generate a random epoch
  /// at LeaseService startup.
  public var epoch: String = String()

  /// Logical vector clock indicating when the Lease was generated.
  public var sequence: [UInt32] = []

  /// The set of different clients which have sent/receieved the lease.
  public var clientNames: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Details about who currently owns the Lease for a resource.
public struct Bosdyn_Api_LeaseOwner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the client application.
  public var clientName: String = String()

  /// The name of the user.
  public var userName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Result for when a Lease is used - for example, in a LeaseRetainer, or
/// associated with a command.
public struct Bosdyn_Api_LeaseUseResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Bosdyn_Api_LeaseUseResult.Status = .unknown

  /// The current lease owner.
  public var owner: Bosdyn_Api_LeaseOwner {
    get {return _owner ?? Bosdyn_Api_LeaseOwner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  /// The lease which was attempted for use.
  public var attemptedLease: Bosdyn_Api_Lease {
    get {return _attemptedLease ?? Bosdyn_Api_Lease()}
    set {_attemptedLease = newValue}
  }
  /// Returns true if `attemptedLease` has been explicitly set.
  public var hasAttemptedLease: Bool {return self._attemptedLease != nil}
  /// Clears the value of `attemptedLease`. Subsequent reads from it will return its default value.
  public mutating func clearAttemptedLease() {self._attemptedLease = nil}

  /// The previous lease, if any, which was used.
  public var previousLease: Bosdyn_Api_Lease {
    get {return _previousLease ?? Bosdyn_Api_Lease()}
    set {_previousLease = newValue}
  }
  /// Returns true if `previousLease` has been explicitly set.
  public var hasPreviousLease: Bool {return self._previousLease != nil}
  /// Clears the value of `previousLease`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousLease() {self._previousLease = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An internal issue occurred.
    case unknown // = 0

    /// The Lease was accepted.
    case ok // = 1

    /// The Lease is invalid.
    case invalidLease // = 2

    /// The Lease is older than the current lease, and rejected.
    case older // = 3

    /// The Lease holder did not check in regularly enough, and the Lease is stale.
    case revoked // = 4

    /// The Lease was for an unmanaged resource.
    case unmanaged // = 5

    /// The Lease was for the wrong epoch.
    case wrongEpoch // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidLease
      case 3: self = .older
      case 4: self = .revoked
      case 5: self = .unmanaged
      case 6: self = .wrongEpoch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidLease: return 2
      case .older: return 3
      case .revoked: return 4
      case .unmanaged: return 5
      case .wrongEpoch: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _owner: Bosdyn_Api_LeaseOwner? = nil
  fileprivate var _attemptedLease: Bosdyn_Api_Lease? = nil
  fileprivate var _previousLease: Bosdyn_Api_Lease? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_LeaseUseResult.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_LeaseUseResult.Status] = [
    .unknown,
    .ok,
    .invalidLease,
    .older,
    .revoked,
    .unmanaged,
    .wrongEpoch,
  ]
}

#endif  // swift(>=4.2)

/// The AcquireLease request message which sends which resource the lease should be for.
public struct Bosdyn_Api_AcquireLeaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The resource to obtain a Lease for.
  public var resource: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The AcquireLease response returns the lease for the desired resource if it could be obtained.
/// If a client is returned a new lease, the client should initiate a
/// RetainLease bidirectional streaming request immediately after completion
/// of AcquireLease.
public struct Bosdyn_Api_AcquireLeaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response Header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_AcquireLeaseResponse.Status = .unknown

  /// The lease for the resource. Only set if status field == STATUS_OK.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// The owner for the lease. Set if status field == OK or status field == RESOURCE_ALREADY_CLAIMED.
  public var leaseOwner: Bosdyn_Api_LeaseOwner {
    get {return _leaseOwner ?? Bosdyn_Api_LeaseOwner()}
    set {_leaseOwner = newValue}
  }
  /// Returns true if `leaseOwner` has been explicitly set.
  public var hasLeaseOwner: Bool {return self._leaseOwner != nil}
  /// Clears the value of `leaseOwner`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseOwner() {self._leaseOwner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used. An internal LeaseService issue has happened
    /// if UNKNOWN is set.
    case unknown // = 0

    /// AcquireLease was successful.The lease field will be populated with the new
    /// lease for the resource. The client is expected to call the RetainLease method
    /// immediately after.
    case ok // = 1

    /// AcquireLease failed since the resource has already been claimed.
    /// The TakeLease method may be used to forcefully grab the lease.
    case resourceAlreadyClaimed // = 2

    /// AcquireLease failed since the resource is not known to LeaseService.
    /// The ListLeaseResources method may be used to list all known
    /// resources.
    case invalidResource // = 3

    /// The LeaseService is not authoritative - so Acquire should not work.
    case notAuthoritativeService // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .resourceAlreadyClaimed
      case 3: self = .invalidResource
      case 4: self = .notAuthoritativeService
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .resourceAlreadyClaimed: return 2
      case .invalidResource: return 3
      case .notAuthoritativeService: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
  fileprivate var _leaseOwner: Bosdyn_Api_LeaseOwner? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_AcquireLeaseResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_AcquireLeaseResponse.Status] = [
    .unknown,
    .ok,
    .resourceAlreadyClaimed,
    .invalidResource,
    .notAuthoritativeService,
  ]
}

#endif  // swift(>=4.2)

/// The TakeLease request message which sends which resource the lease should be for.
public struct Bosdyn_Api_TakeLeaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The resource to obtain a Lease for.
  public var resource: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The TakeLease response returns the lease for the desired resource if it could be obtained.
/// In most cases if the resource is managed by the LeaseService, TakeLease
/// will succeed. However, in the future policies may be introduced which will prevent
/// TakeLease from succeeding and clients should be prepared to handle that
/// case.
/// If a client obtains a new lease, the client should initiate a
/// RetainLease bidirectional streaming request immediately after completion
/// of TakeLease.
public struct Bosdyn_Api_TakeLeaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_TakeLeaseResponse.Status = .unknown

  /// The lease for the resource. Only set if status field == STATUS_OK.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// The owner for the lease. Set if status field == STATUS_OK.
  public var leaseOwner: Bosdyn_Api_LeaseOwner {
    get {return _leaseOwner ?? Bosdyn_Api_LeaseOwner()}
    set {_leaseOwner = newValue}
  }
  /// Returns true if `leaseOwner` has been explicitly set.
  public var hasLeaseOwner: Bool {return self._leaseOwner != nil}
  /// Clears the value of `leaseOwner`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseOwner() {self._leaseOwner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
    case unknown // = 0

    /// TakeLease was successful. The lease field will be populated with the
    /// new lease for the resource. The client is expected to call the RetainLease
    /// method immediately after.
    case ok // = 1

    /// TakeLease failed since the resource is not known to LeaseService.
    /// The ListLeaseResources method may be used to list all known
    /// resources.
    case invalidResource // = 2

    /// The LeaseService is not authoritative - so Acquire should not work.
    case notAuthoritativeService // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidResource
      case 3: self = .notAuthoritativeService
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidResource: return 2
      case .notAuthoritativeService: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
  fileprivate var _leaseOwner: Bosdyn_Api_LeaseOwner? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_TakeLeaseResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_TakeLeaseResponse.Status] = [
    .unknown,
    .ok,
    .invalidResource,
    .notAuthoritativeService,
  ]
}

#endif  // swift(>=4.2)

/// The ReturnLease request message will be sent to the LeaseService. If the lease
/// is currently active for the resource, the LeaseService will invalidate the lease.
/// Future calls to AcquireLease by any client will now succeed.
public struct Bosdyn_Api_ReturnLeaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The Lease to return back to the LeaseService.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
}

/// The ReturnLease response message
public struct Bosdyn_Api_ReturnLeaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Return status for the request.
  public var status: Bosdyn_Api_ReturnLeaseResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
    case unknown // = 0

    /// ReturnLease was successful.
    case ok // = 1

    /// ReturnLease failed because the resource covered by the lease
    /// is not being managed by the LeaseService.
    case invalidResource // = 2

    /// ReturnLease failed because the lease was not the active lease.
    case notActiveLease // = 3

    /// The LeaseService is not authoritative - so Acquire should not work.
    case notAuthoritativeService // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidResource
      case 3: self = .notActiveLease
      case 4: self = .notAuthoritativeService
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidResource: return 2
      case .notActiveLease: return 3
      case .notAuthoritativeService: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_ReturnLeaseResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ReturnLeaseResponse.Status] = [
    .unknown,
    .ok,
    .invalidResource,
    .notActiveLease,
    .notAuthoritativeService,
  ]
}

#endif  // swift(>=4.2)

/// The ListLease request message asks for information about any known lease resources.
public struct Bosdyn_Api_ListLeasesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Include the full data of leases in use, if available.
  /// Defaults to false to receive basic information.
  public var includeFullLeaseInfo: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Describes all information about a sepcific lease: including the resource it covers, the
/// active lease, and which application is the owner of a lease.
public struct Bosdyn_Api_LeaseResource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The resource name.
  public var resource: String = String()

  /// The active lease, if any.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// The Lease Owner, if there is a Lease.
  public var leaseOwner: Bosdyn_Api_LeaseOwner {
    get {return _leaseOwner ?? Bosdyn_Api_LeaseOwner()}
    set {_leaseOwner = newValue}
  }
  /// Returns true if `leaseOwner` has been explicitly set.
  public var hasLeaseOwner: Bool {return self._leaseOwner != nil}
  /// Clears the value of `leaseOwner`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseOwner() {self._leaseOwner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lease: Bosdyn_Api_Lease? = nil
  fileprivate var _leaseOwner: Bosdyn_Api_LeaseOwner? = nil
}

/// The ListLease response message returns all known lease resources from the LeaseService.
public struct Bosdyn_Api_ListLeasesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The resources managed by the LeaseService.
  public var resources: [Bosdyn_Api_LeaseResource] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// The RetainLease request will inform the LeaseService that the application contains to hold
/// ownership of this lease. Lease holders are expected to be reachable and alive. If enough time
/// has passed since the last RetainLeaseRequest, the LeaseService will revoke the lease.
public struct Bosdyn_Api_RetainLeaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The Lease to retain ownership over. May also be a "super" lease of the lease to retain
  /// ownership over.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
}

/// The RetainLease response message sends the result of the attempted RetainLease request, which
/// contains whether or not the lease is still owned by the application sending the request.
public struct Bosdyn_Api_RetainLeaseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Result of using the lease.
  public var leaseUseResult: Bosdyn_Api_LeaseUseResult {
    get {return _leaseUseResult ?? Bosdyn_Api_LeaseUseResult()}
    set {_leaseUseResult = newValue}
  }
  /// Returns true if `leaseUseResult` has been explicitly set.
  public var hasLeaseUseResult: Bool {return self._leaseUseResult != nil}
  /// Clears the value of `leaseUseResult`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseUseResult() {self._leaseUseResult = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _leaseUseResult: Bosdyn_Api_LeaseUseResult? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_Lease: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Lease"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resource"),
    2: .same(proto: "epoch"),
    3: .same(proto: "sequence"),
    4: .standard(proto: "client_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.resource)
      case 2: try decoder.decodeSingularStringField(value: &self.epoch)
      case 3: try decoder.decodeRepeatedUInt32Field(value: &self.sequence)
      case 4: try decoder.decodeRepeatedStringField(value: &self.clientNames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 1)
    }
    if !self.epoch.isEmpty {
      try visitor.visitSingularStringField(value: self.epoch, fieldNumber: 2)
    }
    if !self.sequence.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.sequence, fieldNumber: 3)
    }
    if !self.clientNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clientNames, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Lease, rhs: Bosdyn_Api_Lease) -> Bool {
    if lhs.resource != rhs.resource {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.clientNames != rhs.clientNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_LeaseOwner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeaseOwner"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_name"),
    2: .standard(proto: "user_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clientName)
      case 2: try decoder.decodeSingularStringField(value: &self.userName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientName.isEmpty {
      try visitor.visitSingularStringField(value: self.clientName, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_LeaseOwner, rhs: Bosdyn_Api_LeaseOwner) -> Bool {
    if lhs.clientName != rhs.clientName {return false}
    if lhs.userName != rhs.userName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_LeaseUseResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeaseUseResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "owner"),
    3: .standard(proto: "attempted_lease"),
    4: .standard(proto: "previous_lease"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularMessageField(value: &self._owner)
      case 3: try decoder.decodeSingularMessageField(value: &self._attemptedLease)
      case 4: try decoder.decodeSingularMessageField(value: &self._previousLease)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._attemptedLease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._previousLease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_LeaseUseResult, rhs: Bosdyn_Api_LeaseUseResult) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._attemptedLease != rhs._attemptedLease {return false}
    if lhs._previousLease != rhs._previousLease {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_LeaseUseResult.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_LEASE"),
    3: .same(proto: "STATUS_OLDER"),
    4: .same(proto: "STATUS_REVOKED"),
    5: .same(proto: "STATUS_UNMANAGED"),
    6: .same(proto: "STATUS_WRONG_EPOCH"),
  ]
}

extension Bosdyn_Api_AcquireLeaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireLeaseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularStringField(value: &self.resource)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquireLeaseRequest, rhs: Bosdyn_Api_AcquireLeaseRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquireLeaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireLeaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .same(proto: "lease"),
    4: .standard(proto: "lease_owner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._lease)
      case 4: try decoder.decodeSingularMessageField(value: &self._leaseOwner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._leaseOwner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquireLeaseResponse, rhs: Bosdyn_Api_AcquireLeaseResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs._leaseOwner != rhs._leaseOwner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquireLeaseResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_RESOURCE_ALREADY_CLAIMED"),
    3: .same(proto: "STATUS_INVALID_RESOURCE"),
    4: .same(proto: "STATUS_NOT_AUTHORITATIVE_SERVICE"),
  ]
}

extension Bosdyn_Api_TakeLeaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TakeLeaseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularStringField(value: &self.resource)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TakeLeaseRequest, rhs: Bosdyn_Api_TakeLeaseRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TakeLeaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TakeLeaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .same(proto: "lease"),
    4: .standard(proto: "lease_owner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._lease)
      case 4: try decoder.decodeSingularMessageField(value: &self._leaseOwner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._leaseOwner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TakeLeaseResponse, rhs: Bosdyn_Api_TakeLeaseResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs._leaseOwner != rhs._leaseOwner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TakeLeaseResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_RESOURCE"),
    3: .same(proto: "STATUS_NOT_AUTHORITATIVE_SERVICE"),
  ]
}

extension Bosdyn_Api_ReturnLeaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReturnLeaseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ReturnLeaseRequest, rhs: Bosdyn_Api_ReturnLeaseRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ReturnLeaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReturnLeaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ReturnLeaseResponse, rhs: Bosdyn_Api_ReturnLeaseResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ReturnLeaseResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_RESOURCE"),
    3: .same(proto: "STATUS_NOT_ACTIVE_LEASE"),
    4: .same(proto: "STATUS_NOT_AUTHORITATIVE_SERVICE"),
  ]
}

extension Bosdyn_Api_ListLeasesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLeasesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "include_full_lease_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularBoolField(value: &self.includeFullLeaseInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.includeFullLeaseInfo != false {
      try visitor.visitSingularBoolField(value: self.includeFullLeaseInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListLeasesRequest, rhs: Bosdyn_Api_ListLeasesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.includeFullLeaseInfo != rhs.includeFullLeaseInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_LeaseResource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeaseResource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resource"),
    2: .same(proto: "lease"),
    3: .standard(proto: "lease_owner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.resource)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      case 3: try decoder.decodeSingularMessageField(value: &self._leaseOwner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._leaseOwner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_LeaseResource, rhs: Bosdyn_Api_LeaseResource) -> Bool {
    if lhs.resource != rhs.resource {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs._leaseOwner != rhs._leaseOwner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ListLeasesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLeasesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "resources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.resources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.resources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resources, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ListLeasesResponse, rhs: Bosdyn_Api_ListLeasesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.resources != rhs.resources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RetainLeaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetainLeaseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RetainLeaseRequest, rhs: Bosdyn_Api_RetainLeaseRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RetainLeaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetainLeaseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "lease_use_result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._leaseUseResult)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._leaseUseResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RetainLeaseResponse, rhs: Bosdyn_Api_RetainLeaseResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._leaseUseResult != rhs._leaseUseResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
