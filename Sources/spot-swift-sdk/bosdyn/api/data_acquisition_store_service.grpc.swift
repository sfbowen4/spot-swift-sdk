//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/data_acquisition_store_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
/// in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
/// requests can be made to the DataAcquisitionStoreService to identify different pieces of data or entire
/// capture actions which match query parameters, such as time ranges or action/group names.
///
/// Usage: instantiate `Bosdyn_Api_DataAcquisitionStoreServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_DataAcquisitionStoreServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_DataAcquisitionStoreServiceClientInterceptorFactoryProtocol? { get }

  func listCaptureActions(
    _ request: Bosdyn_Api_ListCaptureActionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListCaptureActionsRequest, Bosdyn_Api_ListCaptureActionsResponse>

  func listStoredData(
    _ request: Bosdyn_Api_ListStoredDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListStoredDataRequest, Bosdyn_Api_ListStoredDataResponse>

  func storeData(
    _ request: Bosdyn_Api_StoreDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_StoreDataRequest, Bosdyn_Api_StoreDataResponse>

  func listStoredImages(
    _ request: Bosdyn_Api_ListStoredImagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListStoredImagesRequest, Bosdyn_Api_ListStoredImagesResponse>

  func storeImage(
    _ request: Bosdyn_Api_StoreImageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_StoreImageRequest, Bosdyn_Api_StoreImageResponse>

  func listStoredMetadata(
    _ request: Bosdyn_Api_ListStoredMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ListStoredMetadataRequest, Bosdyn_Api_ListStoredMetadataResponse>

  func storeMetadata(
    _ request: Bosdyn_Api_StoreMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_StoreMetadataRequest, Bosdyn_Api_StoreMetadataResponse>
}

extension Bosdyn_Api_DataAcquisitionStoreServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.DataAcquisitionStoreService"
  }

  /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
  /// that match the query parameters provided in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCaptureActions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCaptureActions(
    _ request: Bosdyn_Api_ListCaptureActionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListCaptureActionsRequest, Bosdyn_Api_ListCaptureActionsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/ListCaptureActions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCaptureActionsInterceptors() ?? []
    )
  }

  /// List data identifiers (which identify specific pieces of data from
  /// an action) for stored data that satisfy the query parameters in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStoredData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listStoredData(
    _ request: Bosdyn_Api_ListStoredDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListStoredDataRequest, Bosdyn_Api_ListStoredDataResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/ListStoredData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStoredDataInterceptors() ?? []
    )
  }

  /// Store arbitrary data associated with a DataIdentifier.
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func storeData(
    _ request: Bosdyn_Api_StoreDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_StoreDataRequest, Bosdyn_Api_StoreDataResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/StoreData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreDataInterceptors() ?? []
    )
  }

  /// Type-safe to images: list data identifiers (which identify specific images
  /// from an action) for stored images that satisfy the
  /// query parameters in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStoredImages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listStoredImages(
    _ request: Bosdyn_Api_ListStoredImagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListStoredImagesRequest, Bosdyn_Api_ListStoredImagesResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/ListStoredImages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStoredImagesInterceptors() ?? []
    )
  }

  /// Type-safe to images: store image data associated with a DataIdentifier.
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreImage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func storeImage(
    _ request: Bosdyn_Api_StoreImageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_StoreImageRequest, Bosdyn_Api_StoreImageResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/StoreImage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreImageInterceptors() ?? []
    )
  }

  /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
  /// an action) for stored metadata that satisfy the query parameters in the request.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStoredMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listStoredMetadata(
    _ request: Bosdyn_Api_ListStoredMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ListStoredMetadataRequest, Bosdyn_Api_ListStoredMetadataResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/ListStoredMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListStoredMetadataInterceptors() ?? []
    )
  }

  /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func storeMetadata(
    _ request: Bosdyn_Api_StoreMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_StoreMetadataRequest, Bosdyn_Api_StoreMetadataResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionStoreService/StoreMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreMetadataInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_DataAcquisitionStoreServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listCaptureActions'.
  func makeListCaptureActionsInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListCaptureActionsRequest, Bosdyn_Api_ListCaptureActionsResponse>]

  /// - Returns: Interceptors to use when invoking 'listStoredData'.
  func makeListStoredDataInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListStoredDataRequest, Bosdyn_Api_ListStoredDataResponse>]

  /// - Returns: Interceptors to use when invoking 'storeData'.
  func makeStoreDataInterceptors() -> [ClientInterceptor<Bosdyn_Api_StoreDataRequest, Bosdyn_Api_StoreDataResponse>]

  /// - Returns: Interceptors to use when invoking 'listStoredImages'.
  func makeListStoredImagesInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListStoredImagesRequest, Bosdyn_Api_ListStoredImagesResponse>]

  /// - Returns: Interceptors to use when invoking 'storeImage'.
  func makeStoreImageInterceptors() -> [ClientInterceptor<Bosdyn_Api_StoreImageRequest, Bosdyn_Api_StoreImageResponse>]

  /// - Returns: Interceptors to use when invoking 'listStoredMetadata'.
  func makeListStoredMetadataInterceptors() -> [ClientInterceptor<Bosdyn_Api_ListStoredMetadataRequest, Bosdyn_Api_ListStoredMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'storeMetadata'.
  func makeStoreMetadataInterceptors() -> [ClientInterceptor<Bosdyn_Api_StoreMetadataRequest, Bosdyn_Api_StoreMetadataResponse>]
}

public final class Bosdyn_Api_DataAcquisitionStoreServiceClient: Bosdyn_Api_DataAcquisitionStoreServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_DataAcquisitionStoreServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.DataAcquisitionStoreService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_DataAcquisitionStoreServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
/// in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
/// requests can be made to the DataAcquisitionStoreService to identify different pieces of data or entire
/// capture actions which match query parameters, such as time ranges or action/group names.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_DataAcquisitionStoreServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_DataAcquisitionStoreServiceServerInterceptorFactoryProtocol? { get }

  /// List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
  /// that match the query parameters provided in the request.
  func listCaptureActions(request: Bosdyn_Api_ListCaptureActionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListCaptureActionsResponse>

  /// List data identifiers (which identify specific pieces of data from
  /// an action) for stored data that satisfy the query parameters in the request.
  func listStoredData(request: Bosdyn_Api_ListStoredDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListStoredDataResponse>

  /// Store arbitrary data associated with a DataIdentifier.
  func storeData(request: Bosdyn_Api_StoreDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_StoreDataResponse>

  /// Type-safe to images: list data identifiers (which identify specific images
  /// from an action) for stored images that satisfy the
  /// query parameters in the request.
  func listStoredImages(request: Bosdyn_Api_ListStoredImagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListStoredImagesResponse>

  /// Type-safe to images: store image data associated with a DataIdentifier.
  func storeImage(request: Bosdyn_Api_StoreImageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_StoreImageResponse>

  /// Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
  /// an action) for stored metadata that satisfy the query parameters in the request.
  func listStoredMetadata(request: Bosdyn_Api_ListStoredMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ListStoredMetadataResponse>

  /// Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
  func storeMetadata(request: Bosdyn_Api_StoreMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_StoreMetadataResponse>
}

extension Bosdyn_Api_DataAcquisitionStoreServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.DataAcquisitionStoreService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListCaptureActions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListCaptureActionsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListCaptureActionsResponse>(),
        interceptors: self.interceptors?.makeListCaptureActionsInterceptors() ?? [],
        userFunction: self.listCaptureActions(request:context:)
      )

    case "ListStoredData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListStoredDataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListStoredDataResponse>(),
        interceptors: self.interceptors?.makeListStoredDataInterceptors() ?? [],
        userFunction: self.listStoredData(request:context:)
      )

    case "StoreData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_StoreDataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_StoreDataResponse>(),
        interceptors: self.interceptors?.makeStoreDataInterceptors() ?? [],
        userFunction: self.storeData(request:context:)
      )

    case "ListStoredImages":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListStoredImagesRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListStoredImagesResponse>(),
        interceptors: self.interceptors?.makeListStoredImagesInterceptors() ?? [],
        userFunction: self.listStoredImages(request:context:)
      )

    case "StoreImage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_StoreImageRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_StoreImageResponse>(),
        interceptors: self.interceptors?.makeStoreImageInterceptors() ?? [],
        userFunction: self.storeImage(request:context:)
      )

    case "ListStoredMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ListStoredMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ListStoredMetadataResponse>(),
        interceptors: self.interceptors?.makeListStoredMetadataInterceptors() ?? [],
        userFunction: self.listStoredMetadata(request:context:)
      )

    case "StoreMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_StoreMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_StoreMetadataResponse>(),
        interceptors: self.interceptors?.makeStoreMetadataInterceptors() ?? [],
        userFunction: self.storeMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_DataAcquisitionStoreServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listCaptureActions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListCaptureActionsInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListCaptureActionsRequest, Bosdyn_Api_ListCaptureActionsResponse>]

  /// - Returns: Interceptors to use when handling 'listStoredData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListStoredDataInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListStoredDataRequest, Bosdyn_Api_ListStoredDataResponse>]

  /// - Returns: Interceptors to use when handling 'storeData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreDataInterceptors() -> [ServerInterceptor<Bosdyn_Api_StoreDataRequest, Bosdyn_Api_StoreDataResponse>]

  /// - Returns: Interceptors to use when handling 'listStoredImages'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListStoredImagesInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListStoredImagesRequest, Bosdyn_Api_ListStoredImagesResponse>]

  /// - Returns: Interceptors to use when handling 'storeImage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreImageInterceptors() -> [ServerInterceptor<Bosdyn_Api_StoreImageRequest, Bosdyn_Api_StoreImageResponse>]

  /// - Returns: Interceptors to use when handling 'listStoredMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListStoredMetadataInterceptors() -> [ServerInterceptor<Bosdyn_Api_ListStoredMetadataRequest, Bosdyn_Api_ListStoredMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'storeMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreMetadataInterceptors() -> [ServerInterceptor<Bosdyn_Api_StoreMetadataRequest, Bosdyn_Api_StoreMetadataResponse>]
}
