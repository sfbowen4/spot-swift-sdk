// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot_cam/logging.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A representation of a stored data acquisition.
public struct Bosdyn_Api_SpotCam_Logpoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier for a data acquisition event.
  public var name: String = String()

  /// Type of data held in this log point.
  public var type: Bosdyn_Api_SpotCam_Logpoint.RecordType = .stillimage

  /// Current stage of acquisition.
  public var status: Bosdyn_Api_SpotCam_Logpoint.LogStatus = .failed

  /// Only filled out when status == QUEUED
  public var queueStatus: Bosdyn_Api_SpotCam_Logpoint.QueueStatus = .queuedUnknown

  /// An arbitrary string to be stored with the log data.
  public var tag: String = String()

  /// Time of acquisition.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// Image format of the stored data.
  public var imageParams: Bosdyn_Api_SpotCam_Logpoint.ImageParams {
    get {return _imageParams ?? Bosdyn_Api_SpotCam_Logpoint.ImageParams()}
    set {_imageParams = newValue}
  }
  /// Returns true if `imageParams` has been explicitly set.
  public var hasImageParams: Bool {return self._imageParams != nil}
  /// Clears the value of `imageParams`. Subsequent reads from it will return its default value.
  public mutating func clearImageParams() {self._imageParams = nil}

  /// Camera data for all sub-images contained within the image data.
  public var calibration: [Bosdyn_Api_SpotCam_Logpoint.Calibration] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible types of media that can be stored.
  public enum RecordType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case stillimage // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .stillimage
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .stillimage
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .stillimage: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Possible stages of data acquisition.
  public enum LogStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case failed // = 0

    ///the logpoint has been queued to be downloaded from the renderer
    case queued // = 1

    /// the logpoint is written to the disk
    case complete // = 2
    case unknown // = -1
    case UNRECOGNIZED(Int)

    public init() {
      self = .failed
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case -1: self = .unknown
      case 0: self = .failed
      case 1: self = .queued
      case 2: self = .complete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return -1
      case .failed: return 0
      case .queued: return 1
      case .complete: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum QueueStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case queuedUnknown // = 0

    /// The logpoint has been queued to be downloaded from the renderer
    case queuedRender // = 1

    /// The logpoint is in general ram, and will be written to the disk when resources allow
    case queuedDisk // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .queuedUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .queuedUnknown
      case 1: self = .queuedRender
      case 2: self = .queuedDisk
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .queuedUnknown: return 0
      case .queuedRender: return 1
      case .queuedDisk: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Description of image format.
  public struct ImageParams {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var width: Int32 = 0

    public var height: Int32 = 0

    public var format: Bosdyn_Api_Image.PixelFormat = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Data describing the camera intrinsics and extrinsics for a window of the image.
  public struct Calibration {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var xoffset: Int32 = 0

    public var yoffset: Int32 = 0

    public var width: Int32 = 0

    public var height: Int32 = 0

    public var baseFrameName: String = String()

    public var baseTfromSensor: Bosdyn_Api_SE3Pose {
      get {return _baseTfromSensor ?? Bosdyn_Api_SE3Pose()}
      set {_baseTfromSensor = newValue}
    }
    /// Returns true if `baseTfromSensor` has been explicitly set.
    public var hasBaseTfromSensor: Bool {return self._baseTfromSensor != nil}
    /// Clears the value of `baseTfromSensor`. Subsequent reads from it will return its default value.
    public mutating func clearBaseTfromSensor() {self._baseTfromSensor = nil}

    public var intrinsics: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics {
      get {return _intrinsics ?? Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics()}
      set {_intrinsics = newValue}
    }
    /// Returns true if `intrinsics` has been explicitly set.
    public var hasIntrinsics: Bool {return self._intrinsics != nil}
    /// Clears the value of `intrinsics`. Subsequent reads from it will return its default value.
    public mutating func clearIntrinsics() {self._intrinsics = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _baseTfromSensor: Bosdyn_Api_SE3Pose? = nil
    fileprivate var _intrinsics: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics? = nil
  }

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _imageParams: Bosdyn_Api_SpotCam_Logpoint.ImageParams? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_SpotCam_Logpoint.RecordType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_SpotCam_Logpoint.RecordType] = [
    .stillimage,
  ]
}

extension Bosdyn_Api_SpotCam_Logpoint.LogStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_SpotCam_Logpoint.LogStatus] = [
    .failed,
    .queued,
    .complete,
    .unknown,
  ]
}

extension Bosdyn_Api_SpotCam_Logpoint.QueueStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_SpotCam_Logpoint.QueueStatus] = [
    .queuedUnknown,
    .queuedRender,
    .queuedDisk,
  ]
}

#endif  // swift(>=4.2)

/// Delete a log point from the store.
public struct Bosdyn_Api_SpotCam_DeleteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point to delete.  Only the name is used.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Response to a deletion with any errors that occurred.
public struct Bosdyn_Api_SpotCam_DeleteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// Request for status about the current stage of data acquisition.
public struct Bosdyn_Api_SpotCam_GetStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point to query.  Only the name is used.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Provide an update on the stage of data acquisition.
public struct Bosdyn_Api_SpotCam_GetStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The logpoint returned here can be used to add a tag to the Logpoint later
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Retrieve the binary data associated with a log point.
public struct Bosdyn_Api_SpotCam_RetrieveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point to retrieve.  Only the name is used.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Provide the data stored at a log point.
/// Store() dictates what processing happens in this response.
/// c0 -> c4 will return the raw (rgb24) fisheye image of the camera at that index.
/// Storing a panorama will process the data into a stitched image.
public struct Bosdyn_Api_SpotCam_RetrieveResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point retrieved.
  public var logpoint: Bosdyn_Api_SpotCam_Logpoint {
    get {return _logpoint ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_logpoint = newValue}
  }
  /// Returns true if `logpoint` has been explicitly set.
  public var hasLogpoint: Bool {return self._logpoint != nil}
  /// Clears the value of `logpoint`. Subsequent reads from it will return its default value.
  public mutating func clearLogpoint() {self._logpoint = nil}

  /// Data chunk bytes field should be concatenated together to recover the binary data.
  public var data: Bosdyn_Api_DataChunk {
    get {return _data ?? Bosdyn_Api_DataChunk()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _logpoint: Bosdyn_Api_SpotCam_Logpoint? = nil
  fileprivate var _data: Bosdyn_Api_DataChunk? = nil
}

/// Retrieve the binary data associated with a log point, with no processing applied.
/// Storing a panorama will retrieve tiled individual images.
public struct Bosdyn_Api_SpotCam_RetrieveRawDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point to retrieve.  Only the name is used.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

public struct Bosdyn_Api_SpotCam_RetrieveRawDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Log point retrieved.
  public var logpoint: Bosdyn_Api_SpotCam_Logpoint {
    get {return _logpoint ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_logpoint = newValue}
  }
  /// Returns true if `logpoint` has been explicitly set.
  public var hasLogpoint: Bool {return self._logpoint != nil}
  /// Clears the value of `logpoint`. Subsequent reads from it will return its default value.
  public mutating func clearLogpoint() {self._logpoint = nil}

  /// Data chunk bytes field should be concatenated together to recover the binary data.
  public var data: Bosdyn_Api_DataChunk {
    get {return _data ?? Bosdyn_Api_DataChunk()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _logpoint: Bosdyn_Api_SpotCam_Logpoint? = nil
  fileprivate var _data: Bosdyn_Api_DataChunk? = nil
}

/// Trigger a data acquisition.
public struct Bosdyn_Api_SpotCam_StoreRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Which camera to capture.
  public var camera: Bosdyn_Api_SpotCam_Camera {
    get {return _camera ?? Bosdyn_Api_SpotCam_Camera()}
    set {_camera = newValue}
  }
  /// Returns true if `camera` has been explicitly set.
  public var hasCamera: Bool {return self._camera != nil}
  /// Clears the value of `camera`. Subsequent reads from it will return its default value.
  public mutating func clearCamera() {self._camera = nil}

  /// Type of data capture to perform.
  public var type: Bosdyn_Api_SpotCam_Logpoint.RecordType = .stillimage

  /// Metadata to associate with the store.
  public var tag: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _camera: Bosdyn_Api_SpotCam_Camera? = nil
}

/// Result of data acquisition trigger.
public struct Bosdyn_Api_SpotCam_StoreResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The log point returned here can be used to add a tag to the Logpoint later
  /// It will very likely be in th 'QUEUED' state.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Add tag metadata to an existing log point.
public struct Bosdyn_Api_SpotCam_TagRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Logpoint to add metadata to. Name and tag are used.
  public var point: Bosdyn_Api_SpotCam_Logpoint {
    get {return _point ?? Bosdyn_Api_SpotCam_Logpoint()}
    set {_point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return self._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {self._point = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _point: Bosdyn_Api_SpotCam_Logpoint? = nil
}

/// Result of adding tag metadata to a log point.
public struct Bosdyn_Api_SpotCam_TagResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// Request the available cameras.
public struct Bosdyn_Api_SpotCam_ListCamerasRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Provide the list of available cameras.
public struct Bosdyn_Api_SpotCam_ListCamerasResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// List of all cameras which can be used in a StoreRequest.
  public var cameras: [Bosdyn_Api_SpotCam_Camera] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// List all available log points, whether they have completed or not.
public struct Bosdyn_Api_SpotCam_ListLogpointsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Provide all log points in the system.
public struct Bosdyn_Api_SpotCam_ListLogpointsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// List of all the individual log points concatenated into a list.
  /// This stream may take a long time to complete if there are a lot of stored images.
  public var logpoints: [Bosdyn_Api_SpotCam_Logpoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// Set encryption for the disk.
public struct Bosdyn_Api_SpotCam_SetPassphraseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// After setting the passphrase, please reboot the system to
  /// remount the encrypted filesystem layer.
  public var passphrase: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Response from setting the disk encryption.
/// After setting the passphrase, please reboot the system to
/// remount the encrypted filesystem layer.
public struct Bosdyn_Api_SpotCam_SetPassphraseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// Change debug logging settings on the SpotCam.
public struct Bosdyn_Api_SpotCam_DebugRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Set true to enable logging of temperature data;
  public var enableTemperature: Bool = false

  /// Set true to enable logging of humidity data;
  public var enableHumidity: Bool = false

  /// Set true to enable logging of BIT events;
  /// BIT events are always recorded to volatile memory
  /// and can be viewed (and cleared) with the Health service,
  /// but this enables writing them to disk.
  public var enableBit: Bool = false

  /// Set true to enable logging of Shock data;
  /// this is on by default.
  public var enableShock: Bool = false

  /// Set to true to enable logging of system load stats
  /// cpu, gpu, memory, and network utilization
  public var enableSystemStat: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Response with any errors for debug setting changes.
public struct Bosdyn_Api_SpotCam_DebugResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot_cam"

extension Bosdyn_Api_SpotCam_Logpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Logpoint"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "status"),
    8: .standard(proto: "queue_status"),
    4: .same(proto: "tag"),
    5: .same(proto: "timestamp"),
    6: .standard(proto: "image_params"),
    7: .same(proto: "calibration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularStringField(value: &self.tag)
      case 5: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 6: try decoder.decodeSingularMessageField(value: &self._imageParams)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.calibration)
      case 8: try decoder.decodeSingularEnumField(value: &self.queueStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .stillimage {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.status != .failed {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 4)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._imageParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.calibration.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calibration, fieldNumber: 7)
    }
    if self.queueStatus != .queuedUnknown {
      try visitor.visitSingularEnumField(value: self.queueStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Logpoint, rhs: Bosdyn_Api_SpotCam_Logpoint) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.queueStatus != rhs.queueStatus {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._imageParams != rhs._imageParams {return false}
    if lhs.calibration != rhs.calibration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_Logpoint.RecordType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STILLIMAGE"),
  ]
}

extension Bosdyn_Api_SpotCam_Logpoint.LogStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "UNKNOWN"),
    0: .same(proto: "FAILED"),
    1: .same(proto: "QUEUED"),
    2: .same(proto: "COMPLETE"),
  ]
}

extension Bosdyn_Api_SpotCam_Logpoint.QueueStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "QUEUED_UNKNOWN"),
    1: .same(proto: "QUEUED_RENDER"),
    2: .same(proto: "QUEUED_DISK"),
  ]
}

extension Bosdyn_Api_SpotCam_Logpoint.ImageParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_Logpoint.protoMessageName + ".ImageParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
    3: .same(proto: "format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.width)
      case 2: try decoder.decodeSingularInt32Field(value: &self.height)
      case 3: try decoder.decodeSingularEnumField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 2)
    }
    if self.format != .unknown {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Logpoint.ImageParams, rhs: Bosdyn_Api_SpotCam_Logpoint.ImageParams) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.format != rhs.format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_Logpoint.Calibration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_Logpoint.protoMessageName + ".Calibration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "xoffset"),
    2: .same(proto: "yoffset"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    7: .standard(proto: "base_frame_name"),
    5: .standard(proto: "base_tfrom_sensor"),
    6: .same(proto: "intrinsics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.xoffset)
      case 2: try decoder.decodeSingularInt32Field(value: &self.yoffset)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularMessageField(value: &self._baseTfromSensor)
      case 6: try decoder.decodeSingularMessageField(value: &self._intrinsics)
      case 7: try decoder.decodeSingularStringField(value: &self.baseFrameName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.xoffset != 0 {
      try visitor.visitSingularInt32Field(value: self.xoffset, fieldNumber: 1)
    }
    if self.yoffset != 0 {
      try visitor.visitSingularInt32Field(value: self.yoffset, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if let v = self._baseTfromSensor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._intrinsics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.baseFrameName.isEmpty {
      try visitor.visitSingularStringField(value: self.baseFrameName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Logpoint.Calibration, rhs: Bosdyn_Api_SpotCam_Logpoint.Calibration) -> Bool {
    if lhs.xoffset != rhs.xoffset {return false}
    if lhs.yoffset != rhs.yoffset {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.baseFrameName != rhs.baseFrameName {return false}
    if lhs._baseTfromSensor != rhs._baseTfromSensor {return false}
    if lhs._intrinsics != rhs._intrinsics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_DeleteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_DeleteRequest, rhs: Bosdyn_Api_SpotCam_DeleteRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_DeleteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_DeleteResponse, rhs: Bosdyn_Api_SpotCam_DeleteResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetStatusRequest, rhs: Bosdyn_Api_SpotCam_GetStatusRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetStatusResponse, rhs: Bosdyn_Api_SpotCam_GetStatusResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_RetrieveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_RetrieveRequest, rhs: Bosdyn_Api_SpotCam_RetrieveRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_RetrieveResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "logpoint"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._logpoint)
      case 3: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._logpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_RetrieveResponse, rhs: Bosdyn_Api_SpotCam_RetrieveResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._logpoint != rhs._logpoint {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_RetrieveRawDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveRawDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_RetrieveRawDataRequest, rhs: Bosdyn_Api_SpotCam_RetrieveRawDataRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_RetrieveRawDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveRawDataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "logpoint"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._logpoint)
      case 3: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._logpoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_RetrieveRawDataResponse, rhs: Bosdyn_Api_SpotCam_RetrieveRawDataResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._logpoint != rhs._logpoint {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_StoreRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "camera"),
    3: .same(proto: "type"),
    4: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._camera)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._camera {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.type != .stillimage {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularStringField(value: self.tag, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_StoreRequest, rhs: Bosdyn_Api_SpotCam_StoreRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._camera != rhs._camera {return false}
    if lhs.type != rhs.type {return false}
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_StoreResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_StoreResponse, rhs: Bosdyn_Api_SpotCam_StoreResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_TagRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "point"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._point)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._point {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_TagRequest, rhs: Bosdyn_Api_SpotCam_TagRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._point != rhs._point {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_TagResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TagResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_TagResponse, rhs: Bosdyn_Api_SpotCam_TagResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListCamerasRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCamerasRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListCamerasRequest, rhs: Bosdyn_Api_SpotCam_ListCamerasRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListCamerasResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCamerasResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "cameras"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.cameras)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.cameras.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cameras, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListCamerasResponse, rhs: Bosdyn_Api_SpotCam_ListCamerasResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.cameras != rhs.cameras {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListLogpointsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLogpointsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListLogpointsRequest, rhs: Bosdyn_Api_SpotCam_ListLogpointsRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListLogpointsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLogpointsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "logpoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.logpoints)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.logpoints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logpoints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListLogpointsResponse, rhs: Bosdyn_Api_SpotCam_ListLogpointsResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.logpoints != rhs.logpoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPassphraseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPassphraseRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "passphrase"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularStringField(value: &self.passphrase)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.passphrase.isEmpty {
      try visitor.visitSingularStringField(value: self.passphrase, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPassphraseRequest, rhs: Bosdyn_Api_SpotCam_SetPassphraseRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.passphrase != rhs.passphrase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPassphraseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPassphraseResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPassphraseResponse, rhs: Bosdyn_Api_SpotCam_SetPassphraseResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_DebugRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DebugRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "enable_temperature"),
    3: .standard(proto: "enable_humidity"),
    4: .standard(proto: "enable_BIT"),
    5: .standard(proto: "enable_shock"),
    6: .standard(proto: "enable_system_stat"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularBoolField(value: &self.enableTemperature)
      case 3: try decoder.decodeSingularBoolField(value: &self.enableHumidity)
      case 4: try decoder.decodeSingularBoolField(value: &self.enableBit)
      case 5: try decoder.decodeSingularBoolField(value: &self.enableShock)
      case 6: try decoder.decodeSingularBoolField(value: &self.enableSystemStat)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.enableTemperature != false {
      try visitor.visitSingularBoolField(value: self.enableTemperature, fieldNumber: 2)
    }
    if self.enableHumidity != false {
      try visitor.visitSingularBoolField(value: self.enableHumidity, fieldNumber: 3)
    }
    if self.enableBit != false {
      try visitor.visitSingularBoolField(value: self.enableBit, fieldNumber: 4)
    }
    if self.enableShock != false {
      try visitor.visitSingularBoolField(value: self.enableShock, fieldNumber: 5)
    }
    if self.enableSystemStat != false {
      try visitor.visitSingularBoolField(value: self.enableSystemStat, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_DebugRequest, rhs: Bosdyn_Api_SpotCam_DebugRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.enableTemperature != rhs.enableTemperature {return false}
    if lhs.enableHumidity != rhs.enableHumidity {return false}
    if lhs.enableBit != rhs.enableBit {return false}
    if lhs.enableShock != rhs.enableShock {return false}
    if lhs.enableSystemStat != rhs.enableSystemStat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_DebugResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DebugResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_DebugResponse, rhs: Bosdyn_Api_SpotCam_DebugResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
