// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot_cam/streamquality.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Parameters for how the video stream should be processed and compressed.
public struct Bosdyn_Api_SpotCam_StreamParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The compression level in target BPS
  public var targetbitrate: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _targetbitrate ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_targetbitrate = newValue}
  }
  /// Returns true if `targetbitrate` has been explicitly set.
  public var hasTargetbitrate: Bool {return self._targetbitrate != nil}
  /// Clears the value of `targetbitrate`. Subsequent reads from it will return its default value.
  public mutating func clearTargetbitrate() {self._targetbitrate = nil}

  /// How often should the entire feed be refreshed? (in frames)
  /// Note: the feed is refreshed on a macroblock level; there are no full I-frames
  public var refreshinterval: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _refreshinterval ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_refreshinterval = newValue}
  }
  /// Returns true if `refreshinterval` has been explicitly set.
  public var hasRefreshinterval: Bool {return self._refreshinterval != nil}
  /// Clears the value of `refreshinterval`. Subsequent reads from it will return its default value.
  public mutating func clearRefreshinterval() {self._refreshinterval = nil}

  /// How often should an IDR message get sent? (in frames)
  public var idrinterval: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _idrinterval ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_idrinterval = newValue}
  }
  /// Returns true if `idrinterval` has been explicitly set.
  public var hasIdrinterval: Bool {return self._idrinterval != nil}
  /// Clears the value of `idrinterval`. Subsequent reads from it will return its default value.
  public mutating func clearIdrinterval() {self._idrinterval = nil}

  /// Optional setting of automatic white balancing mode.
  public var awb: Bosdyn_Api_SpotCam_StreamParams.AwbMode {
    get {return _awb ?? Bosdyn_Api_SpotCam_StreamParams.AwbMode()}
    set {_awb = newValue}
  }
  /// Returns true if `awb` has been explicitly set.
  public var hasAwb: Bool {return self._awb != nil}
  /// Clears the value of `awb`. Subsequent reads from it will return its default value.
  public mutating func clearAwb() {self._awb = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Options for automatic white balancing mode.
  public enum AwbModeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case off // = 0
    case auto // = 1
    case incandescent // = 2
    case fluorescent // = 3
    case warmFluorescent // = 4
    case daylight // = 5
    case cloudy // = 6
    case twilight // = 7
    case shade // = 8
    case dark // = 9
    case UNRECOGNIZED(Int)

    public init() {
      self = .off
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .off
      case 1: self = .auto
      case 2: self = .incandescent
      case 3: self = .fluorescent
      case 4: self = .warmFluorescent
      case 5: self = .daylight
      case 6: self = .cloudy
      case 7: self = .twilight
      case 8: self = .shade
      case 9: self = .dark
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .off: return 0
      case .auto: return 1
      case .incandescent: return 2
      case .fluorescent: return 3
      case .warmFluorescent: return 4
      case .daylight: return 5
      case .cloudy: return 6
      case .twilight: return 7
      case .shade: return 8
      case .dark: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Wrapper for AwbModeEnum to allow it to be optionally set.
  public struct AwbMode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var awb: Bosdyn_Api_SpotCam_StreamParams.AwbModeEnum = .off

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _targetbitrate: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _refreshinterval: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _idrinterval: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
  fileprivate var _awb: Bosdyn_Api_SpotCam_StreamParams.AwbMode? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_SpotCam_StreamParams.AwbModeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_SpotCam_StreamParams.AwbModeEnum] = [
    .off,
    .auto,
    .incandescent,
    .fluorescent,
    .warmFluorescent,
    .daylight,
    .cloudy,
    .twilight,
    .shade,
    .dark,
  ]
}

#endif  // swift(>=4.2)

/// Request the current video stream parameters.
public struct Bosdyn_Api_SpotCam_GetStreamParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Provides the current video stream parameters.
public struct Bosdyn_Api_SpotCam_GetStreamParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Current video stream parameters.
  public var params: Bosdyn_Api_SpotCam_StreamParams {
    get {return _params ?? Bosdyn_Api_SpotCam_StreamParams()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _params: Bosdyn_Api_SpotCam_StreamParams? = nil
}

/// Modify the video stream parameters.
public struct Bosdyn_Api_SpotCam_SetStreamParamsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Set only the fields that should be modified.
  public var params: Bosdyn_Api_SpotCam_StreamParams {
    get {return _params ?? Bosdyn_Api_SpotCam_StreamParams()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _params: Bosdyn_Api_SpotCam_StreamParams? = nil
}

/// Result of setting video stream parameters.
public struct Bosdyn_Api_SpotCam_SetStreamParamsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Applied video stream parameters.
  public var params: Bosdyn_Api_SpotCam_StreamParams {
    get {return _params ?? Bosdyn_Api_SpotCam_StreamParams()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _params: Bosdyn_Api_SpotCam_StreamParams? = nil
}

public struct Bosdyn_Api_SpotCam_EnableCongestionControlRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// A boolean 'true' enables receiver congestion control while 'false' disables it
  public var enableCongestionControl: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_SpotCam_EnableCongestionControlResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot_cam"

extension Bosdyn_Api_SpotCam_StreamParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetbitrate"),
    2: .same(proto: "refreshinterval"),
    3: .same(proto: "idrinterval"),
    4: .same(proto: "awb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._targetbitrate)
      case 2: try decoder.decodeSingularMessageField(value: &self._refreshinterval)
      case 3: try decoder.decodeSingularMessageField(value: &self._idrinterval)
      case 4: try decoder.decodeSingularMessageField(value: &self._awb)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._targetbitrate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._refreshinterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._idrinterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._awb {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_StreamParams, rhs: Bosdyn_Api_SpotCam_StreamParams) -> Bool {
    if lhs._targetbitrate != rhs._targetbitrate {return false}
    if lhs._refreshinterval != rhs._refreshinterval {return false}
    if lhs._idrinterval != rhs._idrinterval {return false}
    if lhs._awb != rhs._awb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_StreamParams.AwbModeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "AUTO"),
    2: .same(proto: "INCANDESCENT"),
    3: .same(proto: "FLUORESCENT"),
    4: .same(proto: "WARM_FLUORESCENT"),
    5: .same(proto: "DAYLIGHT"),
    6: .same(proto: "CLOUDY"),
    7: .same(proto: "TWILIGHT"),
    8: .same(proto: "SHADE"),
    9: .same(proto: "DARK"),
  ]
}

extension Bosdyn_Api_SpotCam_StreamParams.AwbMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_StreamParams.protoMessageName + ".AwbMode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "awb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.awb)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.awb != .off {
      try visitor.visitSingularEnumField(value: self.awb, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_StreamParams.AwbMode, rhs: Bosdyn_Api_SpotCam_StreamParams.AwbMode) -> Bool {
    if lhs.awb != rhs.awb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetStreamParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStreamParamsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetStreamParamsRequest, rhs: Bosdyn_Api_SpotCam_GetStreamParamsRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetStreamParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStreamParamsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetStreamParamsResponse, rhs: Bosdyn_Api_SpotCam_GetStreamParamsResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetStreamParamsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetStreamParamsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetStreamParamsRequest, rhs: Bosdyn_Api_SpotCam_SetStreamParamsRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetStreamParamsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetStreamParamsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetStreamParamsResponse, rhs: Bosdyn_Api_SpotCam_SetStreamParamsResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_EnableCongestionControlRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnableCongestionControlRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "enable_congestion_control"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularBoolField(value: &self.enableCongestionControl)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.enableCongestionControl != false {
      try visitor.visitSingularBoolField(value: self.enableCongestionControl, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_EnableCongestionControlRequest, rhs: Bosdyn_Api_SpotCam_EnableCongestionControlRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.enableCongestionControl != rhs.enableCongestionControl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_EnableCongestionControlResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnableCongestionControlResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_EnableCongestionControlResponse, rhs: Bosdyn_Api_SpotCam_EnableCongestionControlResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
