// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot_cam/camera.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Description of the details of a particular camera.
public struct Bosdyn_Api_SpotCam_Camera {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier for the camera.
  public var name: String = String()

  /// Resolution of the sensor, where x = width and y = height.
  public var resolution: Bosdyn_Api_Vec2 {
    get {return _resolution ?? Bosdyn_Api_Vec2()}
    set {_resolution = newValue}
  }
  /// Returns true if `resolution` has been explicitly set.
  public var hasResolution: Bool {return self._resolution != nil}
  /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
  public mutating func clearResolution() {self._resolution = nil}

  /// The frame name for the image sensor source. This frame will show up in the FrameTreeSnapshot
  /// grabbed from the payload registration service.
  public var baseFrameName: String = String()

  /// The transform from the base of spot cam to this specific camera.
  public var baseTfromSensor: Bosdyn_Api_SE3Pose {
    get {return _baseTfromSensor ?? Bosdyn_Api_SE3Pose()}
    set {_baseTfromSensor = newValue}
  }
  /// Returns true if `baseTfromSensor` has been explicitly set.
  public var hasBaseTfromSensor: Bool {return self._baseTfromSensor != nil}
  /// Clears the value of `baseTfromSensor`. Subsequent reads from it will return its default value.
  public mutating func clearBaseTfromSensor() {self._baseTfromSensor = nil}

  public var intrinsics: Bosdyn_Api_SpotCam_Camera.OneOf_Intrinsics? = nil

  /// Physical cameras
  public var pinhole: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics {
    get {
      if case .pinhole(let v)? = intrinsics {return v}
      return Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics()
    }
    set {intrinsics = .pinhole(newValue)}
  }

  /// Only synthetic spherical panoramas
  public var spherical: Bosdyn_Api_SpotCam_Camera.SphericalLimits {
    get {
      if case .spherical(let v)? = intrinsics {return v}
      return Bosdyn_Api_SpotCam_Camera.SphericalLimits()
    }
    set {intrinsics = .spherical(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Intrinsics: Equatable {
    /// Physical cameras
    case pinhole(Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics)
    /// Only synthetic spherical panoramas
    case spherical(Bosdyn_Api_SpotCam_Camera.SphericalLimits)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_SpotCam_Camera.OneOf_Intrinsics, rhs: Bosdyn_Api_SpotCam_Camera.OneOf_Intrinsics) -> Bool {
      switch (lhs, rhs) {
      case (.pinhole(let l), .pinhole(let r)): return l == r
      case (.spherical(let l), .spherical(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Parameters for a pinhole model of distortion.
  public struct PinholeIntrinsics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Focal_length in pixels
    public var focalLength: Bosdyn_Api_Vec2 {
      get {return _focalLength ?? Bosdyn_Api_Vec2()}
      set {_focalLength = newValue}
    }
    /// Returns true if `focalLength` has been explicitly set.
    public var hasFocalLength: Bool {return self._focalLength != nil}
    /// Clears the value of `focalLength`. Subsequent reads from it will return its default value.
    public mutating func clearFocalLength() {self._focalLength = nil}

    /// Center point in pixels
    public var centerPoint: Bosdyn_Api_Vec2 {
      get {return _centerPoint ?? Bosdyn_Api_Vec2()}
      set {_centerPoint = newValue}
    }
    /// Returns true if `centerPoint` has been explicitly set.
    public var hasCenterPoint: Bool {return self._centerPoint != nil}
    /// Clears the value of `centerPoint`. Subsequent reads from it will return its default value.
    public mutating func clearCenterPoint() {self._centerPoint = nil}

    /// The following 4 parameters are radial distortion coefficeints to 4 orders.
    /// See https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
    /// If all 4 of these values are 0, do not apply any correction.
    public var k1: Float = 0

    public var k2: Float = 0

    public var k3: Float = 0

    public var k4: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _focalLength: Bosdyn_Api_Vec2? = nil
    fileprivate var _centerPoint: Bosdyn_Api_Vec2? = nil
  }

  /// Spherical limits are the minimum and maximum angle of the image;
  /// IE the upper left pixel is at min_angle.x, min_angle.y
  /// and the lower right pixel is at max_angle.x, max_angle.y
  /// for a full-FOV image this will be (-180, 90) and (180, -90)
  public struct SphericalLimits {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Upper left pixel location in degrees.
    public var minAngle: Bosdyn_Api_Vec2 {
      get {return _minAngle ?? Bosdyn_Api_Vec2()}
      set {_minAngle = newValue}
    }
    /// Returns true if `minAngle` has been explicitly set.
    public var hasMinAngle: Bool {return self._minAngle != nil}
    /// Clears the value of `minAngle`. Subsequent reads from it will return its default value.
    public mutating func clearMinAngle() {self._minAngle = nil}

    /// Lower right pixel location in degrees.
    public var maxAngle: Bosdyn_Api_Vec2 {
      get {return _maxAngle ?? Bosdyn_Api_Vec2()}
      set {_maxAngle = newValue}
    }
    /// Returns true if `maxAngle` has been explicitly set.
    public var hasMaxAngle: Bool {return self._maxAngle != nil}
    /// Clears the value of `maxAngle`. Subsequent reads from it will return its default value.
    public mutating func clearMaxAngle() {self._maxAngle = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _minAngle: Bosdyn_Api_Vec2? = nil
    fileprivate var _maxAngle: Bosdyn_Api_Vec2? = nil
  }

  public init() {}

  fileprivate var _resolution: Bosdyn_Api_Vec2? = nil
  fileprivate var _baseTfromSensor: Bosdyn_Api_SE3Pose? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot_cam"

extension Bosdyn_Api_SpotCam_Camera: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Camera"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "resolution"),
    3: .standard(proto: "base_frame_name"),
    4: .standard(proto: "base_tfrom_sensor"),
    5: .same(proto: "pinhole"),
    6: .same(proto: "spherical"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._resolution)
      case 3: try decoder.decodeSingularStringField(value: &self.baseFrameName)
      case 4: try decoder.decodeSingularMessageField(value: &self._baseTfromSensor)
      case 5:
        var v: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics?
        if let current = self.intrinsics {
          try decoder.handleConflictingOneOf()
          if case .pinhole(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.intrinsics = .pinhole(v)}
      case 6:
        var v: Bosdyn_Api_SpotCam_Camera.SphericalLimits?
        if let current = self.intrinsics {
          try decoder.handleConflictingOneOf()
          if case .spherical(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.intrinsics = .spherical(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._resolution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.baseFrameName.isEmpty {
      try visitor.visitSingularStringField(value: self.baseFrameName, fieldNumber: 3)
    }
    if let v = self._baseTfromSensor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    switch self.intrinsics {
    case .pinhole(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .spherical(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Camera, rhs: Bosdyn_Api_SpotCam_Camera) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._resolution != rhs._resolution {return false}
    if lhs.baseFrameName != rhs.baseFrameName {return false}
    if lhs._baseTfromSensor != rhs._baseTfromSensor {return false}
    if lhs.intrinsics != rhs.intrinsics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_Camera.protoMessageName + ".PinholeIntrinsics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "focal_length"),
    2: .standard(proto: "center_point"),
    3: .same(proto: "k1"),
    4: .same(proto: "k2"),
    5: .same(proto: "k3"),
    6: .same(proto: "k4"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._focalLength)
      case 2: try decoder.decodeSingularMessageField(value: &self._centerPoint)
      case 3: try decoder.decodeSingularFloatField(value: &self.k1)
      case 4: try decoder.decodeSingularFloatField(value: &self.k2)
      case 5: try decoder.decodeSingularFloatField(value: &self.k3)
      case 6: try decoder.decodeSingularFloatField(value: &self.k4)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._focalLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._centerPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.k1 != 0 {
      try visitor.visitSingularFloatField(value: self.k1, fieldNumber: 3)
    }
    if self.k2 != 0 {
      try visitor.visitSingularFloatField(value: self.k2, fieldNumber: 4)
    }
    if self.k3 != 0 {
      try visitor.visitSingularFloatField(value: self.k3, fieldNumber: 5)
    }
    if self.k4 != 0 {
      try visitor.visitSingularFloatField(value: self.k4, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics, rhs: Bosdyn_Api_SpotCam_Camera.PinholeIntrinsics) -> Bool {
    if lhs._focalLength != rhs._focalLength {return false}
    if lhs._centerPoint != rhs._centerPoint {return false}
    if lhs.k1 != rhs.k1 {return false}
    if lhs.k2 != rhs.k2 {return false}
    if lhs.k3 != rhs.k3 {return false}
    if lhs.k4 != rhs.k4 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_Camera.SphericalLimits: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_Camera.protoMessageName + ".SphericalLimits"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_angle"),
    2: .standard(proto: "max_angle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._minAngle)
      case 2: try decoder.decodeSingularMessageField(value: &self._maxAngle)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._minAngle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._maxAngle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_Camera.SphericalLimits, rhs: Bosdyn_Api_SpotCam_Camera.SphericalLimits) -> Bool {
    if lhs._minAngle != rhs._minAngle {return false}
    if lhs._maxAngle != rhs._maxAngle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
