// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/spot_cam/ptz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///PtzDescription provides information about a given PTZ. The name is usually all that's required to
///describe a PTZ, but ListPtzResponse will include more information.
public struct Bosdyn_Api_SpotCam_PtzDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier of a particular controllable PTZ mechanism (real or virtual).
  public var name: String = String()

  /// Limits in degrees.
  public var panLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits {
    get {return _panLimit ?? Bosdyn_Api_SpotCam_PtzDescription.Limits()}
    set {_panLimit = newValue}
  }
  /// Returns true if `panLimit` has been explicitly set.
  public var hasPanLimit: Bool {return self._panLimit != nil}
  /// Clears the value of `panLimit`. Subsequent reads from it will return its default value.
  public mutating func clearPanLimit() {self._panLimit = nil}

  /// Limits in degrees.
  public var tiltLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits {
    get {return _tiltLimit ?? Bosdyn_Api_SpotCam_PtzDescription.Limits()}
    set {_tiltLimit = newValue}
  }
  /// Returns true if `tiltLimit` has been explicitly set.
  public var hasTiltLimit: Bool {return self._tiltLimit != nil}
  /// Clears the value of `tiltLimit`. Subsequent reads from it will return its default value.
  public mutating func clearTiltLimit() {self._tiltLimit = nil}

  /// Limits in zoom level.
  public var zoomLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits {
    get {return _zoomLimit ?? Bosdyn_Api_SpotCam_PtzDescription.Limits()}
    set {_zoomLimit = newValue}
  }
  /// Returns true if `zoomLimit` has been explicitly set.
  public var hasZoomLimit: Bool {return self._zoomLimit != nil}
  /// Clears the value of `zoomLimit`. Subsequent reads from it will return its default value.
  public mutating func clearZoomLimit() {self._zoomLimit = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Limits for a single axis.
  public struct Limits {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Units depend on the axis being controlled.
    public var min: SwiftProtobuf.Google_Protobuf_FloatValue {
      get {return _min ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
      set {_min = newValue}
    }
    /// Returns true if `min` has been explicitly set.
    public var hasMin: Bool {return self._min != nil}
    /// Clears the value of `min`. Subsequent reads from it will return its default value.
    public mutating func clearMin() {self._min = nil}

    /// Units depend on the axis being controlled.
    public var max: SwiftProtobuf.Google_Protobuf_FloatValue {
      get {return _max ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
      set {_max = newValue}
    }
    /// Returns true if `max` has been explicitly set.
    public var hasMax: Bool {return self._max != nil}
    /// Clears the value of `max`. Subsequent reads from it will return its default value.
    public mutating func clearMax() {self._max = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _min: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    fileprivate var _max: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  }

  public init() {}

  fileprivate var _panLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits? = nil
  fileprivate var _tiltLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits? = nil
  fileprivate var _zoomLimit: Bosdyn_Api_SpotCam_PtzDescription.Limits? = nil
}

/// Doubles as a description of current state, or a command for a new position.
public struct Bosdyn_Api_SpotCam_PtzPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The "mech" ptz can pan [0, 360] degrees,
  /// tilt [-20, 217] degrees where 0 is the horizon,
  /// and zoom between 1x and 30x.
  public var ptz: Bosdyn_Api_SpotCam_PtzDescription {
    get {return _ptz ?? Bosdyn_Api_SpotCam_PtzDescription()}
    set {_ptz = newValue}
  }
  /// Returns true if `ptz` has been explicitly set.
  public var hasPtz: Bool {return self._ptz != nil}
  /// Clears the value of `ptz`. Subsequent reads from it will return its default value.
  public mutating func clearPtz() {self._ptz = nil}

  /// degrees
  public var pan: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _pan ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_pan = newValue}
  }
  /// Returns true if `pan` has been explicitly set.
  public var hasPan: Bool {return self._pan != nil}
  /// Clears the value of `pan`. Subsequent reads from it will return its default value.
  public mutating func clearPan() {self._pan = nil}

  /// degrees
  public var tilt: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _tilt ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_tilt = newValue}
  }
  /// Returns true if `tilt` has been explicitly set.
  public var hasTilt: Bool {return self._tilt != nil}
  /// Clears the value of `tilt`. Subsequent reads from it will return its default value.
  public mutating func clearTilt() {self._tilt = nil}

  /// zoom level
  public var zoom: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _zoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_zoom = newValue}
  }
  /// Returns true if `zoom` has been explicitly set.
  public var hasZoom: Bool {return self._zoom != nil}
  /// Clears the value of `zoom`. Subsequent reads from it will return its default value.
  public mutating func clearZoom() {self._zoom = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ptz: Bosdyn_Api_SpotCam_PtzDescription? = nil
  fileprivate var _pan: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  fileprivate var _tilt: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  fileprivate var _zoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
}

/// Doubles as a description of current state, or a command for a new velocity.
public struct Bosdyn_Api_SpotCam_PtzVelocity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The "mech" ptz cannot be used with Velocity.
  public var ptz: Bosdyn_Api_SpotCam_PtzDescription {
    get {return _ptz ?? Bosdyn_Api_SpotCam_PtzDescription()}
    set {_ptz = newValue}
  }
  /// Returns true if `ptz` has been explicitly set.
  public var hasPtz: Bool {return self._ptz != nil}
  /// Clears the value of `ptz`. Subsequent reads from it will return its default value.
  public mutating func clearPtz() {self._ptz = nil}

  /// degrees/second
  public var pan: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _pan ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_pan = newValue}
  }
  /// Returns true if `pan` has been explicitly set.
  public var hasPan: Bool {return self._pan != nil}
  /// Clears the value of `pan`. Subsequent reads from it will return its default value.
  public mutating func clearPan() {self._pan = nil}

  /// degrees/second
  public var tilt: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _tilt ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_tilt = newValue}
  }
  /// Returns true if `tilt` has been explicitly set.
  public var hasTilt: Bool {return self._tilt != nil}
  /// Clears the value of `tilt`. Subsequent reads from it will return its default value.
  public mutating func clearTilt() {self._tilt = nil}

  /// zoom level/second
  public var zoom: SwiftProtobuf.Google_Protobuf_FloatValue {
    get {return _zoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
    set {_zoom = newValue}
  }
  /// Returns true if `zoom` has been explicitly set.
  public var hasZoom: Bool {return self._zoom != nil}
  /// Clears the value of `zoom`. Subsequent reads from it will return its default value.
  public mutating func clearZoom() {self._zoom = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ptz: Bosdyn_Api_SpotCam_PtzDescription? = nil
  fileprivate var _pan: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  fileprivate var _tilt: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
  fileprivate var _zoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
}

/// Request the current position of a ptz.
public struct Bosdyn_Api_SpotCam_GetPtzPositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Only the name is used.
  public var ptz: Bosdyn_Api_SpotCam_PtzDescription {
    get {return _ptz ?? Bosdyn_Api_SpotCam_PtzDescription()}
    set {_ptz = newValue}
  }
  /// Returns true if `ptz` has been explicitly set.
  public var hasPtz: Bool {return self._ptz != nil}
  /// Clears the value of `ptz`. Subsequent reads from it will return its default value.
  public mutating func clearPtz() {self._ptz = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _ptz: Bosdyn_Api_SpotCam_PtzDescription? = nil
}

/// Provides the current measured position.
public struct Bosdyn_Api_SpotCam_GetPtzPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Current position of the mechanism.
  public var position: Bosdyn_Api_SpotCam_PtzPosition {
    get {return _position ?? Bosdyn_Api_SpotCam_PtzPosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _position: Bosdyn_Api_SpotCam_PtzPosition? = nil
}

/// Request the velocity of a ptz
public struct Bosdyn_Api_SpotCam_GetPtzVelocityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Only the name is used.
  public var ptz: Bosdyn_Api_SpotCam_PtzDescription {
    get {return _ptz ?? Bosdyn_Api_SpotCam_PtzDescription()}
    set {_ptz = newValue}
  }
  /// Returns true if `ptz` has been explicitly set.
  public var hasPtz: Bool {return self._ptz != nil}
  /// Clears the value of `ptz`. Subsequent reads from it will return its default value.
  public mutating func clearPtz() {self._ptz = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _ptz: Bosdyn_Api_SpotCam_PtzDescription? = nil
}

/// Provides the current measured velocity.
public struct Bosdyn_Api_SpotCam_GetPtzVelocityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Current velocity of the mechanism.
  public var velocity: Bosdyn_Api_SpotCam_PtzVelocity {
    get {return _velocity ?? Bosdyn_Api_SpotCam_PtzVelocity()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _velocity: Bosdyn_Api_SpotCam_PtzVelocity? = nil
}

/// Request all available ptzs on the SpotCam.
public struct Bosdyn_Api_SpotCam_ListPtzRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Provide all available ptz on the SpotCam.
public struct Bosdyn_Api_SpotCam_ListPtzResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// List of ptzs, real and virtual.
  public var ptzs: [Bosdyn_Api_SpotCam_PtzDescription] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// Command the ptz to move to a position.
public struct Bosdyn_Api_SpotCam_SetPtzPositionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Desired position to achieve.
  public var position: Bosdyn_Api_SpotCam_PtzPosition {
    get {return _position ?? Bosdyn_Api_SpotCam_PtzPosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _position: Bosdyn_Api_SpotCam_PtzPosition? = nil
}

/// Result of a SetPtzPositionRequest.
public struct Bosdyn_Api_SpotCam_SetPtzPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Applied desired position.
  public var position: Bosdyn_Api_SpotCam_PtzPosition {
    get {return _position ?? Bosdyn_Api_SpotCam_PtzPosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _position: Bosdyn_Api_SpotCam_PtzPosition? = nil
}

/// Command a velocity for a ptz.
public struct Bosdyn_Api_SpotCam_SetPtzVelocityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Desired velocity to achieve.
  public var velocity: Bosdyn_Api_SpotCam_PtzVelocity {
    get {return _velocity ?? Bosdyn_Api_SpotCam_PtzVelocity()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _velocity: Bosdyn_Api_SpotCam_PtzVelocity? = nil
}

/// Result of a SetPtzVelocityRequest.
public struct Bosdyn_Api_SpotCam_SetPtzVelocityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Applied desired position.
  public var velocity: Bosdyn_Api_SpotCam_PtzVelocity {
    get {return _velocity ?? Bosdyn_Api_SpotCam_PtzVelocity()}
    set {_velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  public var hasVelocity: Bool {return self._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  public mutating func clearVelocity() {self._velocity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _velocity: Bosdyn_Api_SpotCam_PtzVelocity? = nil
}

/// Command to reset PTZ autofocus
public struct Bosdyn_Api_SpotCam_InitializeLensRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// Result of a InitializeLensRequest.
public struct Bosdyn_Api_SpotCam_InitializeLensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.spot_cam"

extension Bosdyn_Api_SpotCam_PtzDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PtzDescription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "pan_limit"),
    3: .standard(proto: "tilt_limit"),
    4: .standard(proto: "zoom_limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularMessageField(value: &self._panLimit)
      case 3: try decoder.decodeSingularMessageField(value: &self._tiltLimit)
      case 4: try decoder.decodeSingularMessageField(value: &self._zoomLimit)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._panLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tiltLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._zoomLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_PtzDescription, rhs: Bosdyn_Api_SpotCam_PtzDescription) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._panLimit != rhs._panLimit {return false}
    if lhs._tiltLimit != rhs._tiltLimit {return false}
    if lhs._zoomLimit != rhs._zoomLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_PtzDescription.Limits: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_SpotCam_PtzDescription.protoMessageName + ".Limits"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._min)
      case 2: try decoder.decodeSingularMessageField(value: &self._max)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._min {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._max {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_PtzDescription.Limits, rhs: Bosdyn_Api_SpotCam_PtzDescription.Limits) -> Bool {
    if lhs._min != rhs._min {return false}
    if lhs._max != rhs._max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_PtzPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PtzPosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "ptz"),
    3: .same(proto: "pan"),
    4: .same(proto: "tilt"),
    5: .same(proto: "zoom"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._ptz)
      case 3: try decoder.decodeSingularMessageField(value: &self._pan)
      case 4: try decoder.decodeSingularMessageField(value: &self._tilt)
      case 5: try decoder.decodeSingularMessageField(value: &self._zoom)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ptz {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._tilt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._zoom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_PtzPosition, rhs: Bosdyn_Api_SpotCam_PtzPosition) -> Bool {
    if lhs._ptz != rhs._ptz {return false}
    if lhs._pan != rhs._pan {return false}
    if lhs._tilt != rhs._tilt {return false}
    if lhs._zoom != rhs._zoom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_PtzVelocity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PtzVelocity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "ptz"),
    3: .same(proto: "pan"),
    4: .same(proto: "tilt"),
    5: .same(proto: "zoom"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularMessageField(value: &self._ptz)
      case 3: try decoder.decodeSingularMessageField(value: &self._pan)
      case 4: try decoder.decodeSingularMessageField(value: &self._tilt)
      case 5: try decoder.decodeSingularMessageField(value: &self._zoom)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ptz {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pan {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._tilt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._zoom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_PtzVelocity, rhs: Bosdyn_Api_SpotCam_PtzVelocity) -> Bool {
    if lhs._ptz != rhs._ptz {return false}
    if lhs._pan != rhs._pan {return false}
    if lhs._tilt != rhs._tilt {return false}
    if lhs._zoom != rhs._zoom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetPtzPositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPtzPositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "ptz"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._ptz)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._ptz {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetPtzPositionRequest, rhs: Bosdyn_Api_SpotCam_GetPtzPositionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._ptz != rhs._ptz {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetPtzPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPtzPositionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._position)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetPtzPositionResponse, rhs: Bosdyn_Api_SpotCam_GetPtzPositionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetPtzVelocityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPtzVelocityRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "ptz"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._ptz)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._ptz {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetPtzVelocityRequest, rhs: Bosdyn_Api_SpotCam_GetPtzVelocityRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._ptz != rhs._ptz {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_GetPtzVelocityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPtzVelocityResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "velocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._velocity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_GetPtzVelocityResponse, rhs: Bosdyn_Api_SpotCam_GetPtzVelocityResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListPtzRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPtzRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListPtzRequest, rhs: Bosdyn_Api_SpotCam_ListPtzRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_ListPtzResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListPtzResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "ptzs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.ptzs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ptzs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ptzs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_ListPtzResponse, rhs: Bosdyn_Api_SpotCam_ListPtzResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.ptzs != rhs.ptzs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPtzPositionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPtzPositionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._position)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPtzPositionRequest, rhs: Bosdyn_Api_SpotCam_SetPtzPositionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPtzPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPtzPositionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._position)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPtzPositionResponse, rhs: Bosdyn_Api_SpotCam_SetPtzPositionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPtzVelocityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPtzVelocityRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "velocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._velocity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPtzVelocityRequest, rhs: Bosdyn_Api_SpotCam_SetPtzVelocityRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_SetPtzVelocityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPtzVelocityResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "velocity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._velocity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_SetPtzVelocityResponse, rhs: Bosdyn_Api_SpotCam_SetPtzVelocityResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_InitializeLensRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitializeLensRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_InitializeLensRequest, rhs: Bosdyn_Api_SpotCam_InitializeLensRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_SpotCam_InitializeLensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InitializeLensResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_SpotCam_InitializeLensResponse, rhs: Bosdyn_Api_SpotCam_InitializeLensResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
