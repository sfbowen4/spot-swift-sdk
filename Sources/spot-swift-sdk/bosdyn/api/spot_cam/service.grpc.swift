//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/spot_cam/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Change the layout of of the video stream between available presets.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_CompositorServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_CompositorServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_CompositorServiceClientInterceptorFactoryProtocol? { get }

  func setScreen(
    _ request: Bosdyn_Api_SpotCam_SetScreenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetScreenRequest, Bosdyn_Api_SpotCam_SetScreenResponse>

  func getScreen(
    _ request: Bosdyn_Api_SpotCam_GetScreenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetScreenRequest, Bosdyn_Api_SpotCam_GetScreenResponse>

  func listScreens(
    _ request: Bosdyn_Api_SpotCam_ListScreensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListScreensRequest, Bosdyn_Api_SpotCam_ListScreensResponse>

  func getVisibleCameras(
    _ request: Bosdyn_Api_SpotCam_GetVisibleCamerasRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetVisibleCamerasRequest, Bosdyn_Api_SpotCam_GetVisibleCamerasResponse>

  func setIrColormap(
    _ request: Bosdyn_Api_SpotCam_SetIrColormapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetIrColormapRequest, Bosdyn_Api_SpotCam_SetIrColormapResponse>

  func getIrColormap(
    _ request: Bosdyn_Api_SpotCam_GetIrColormapRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetIrColormapRequest, Bosdyn_Api_SpotCam_GetIrColormapResponse>

  func setIrMeterOverlay(
    _ request: Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest, Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse>
}

extension Bosdyn_Api_SpotCam_CompositorServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.CompositorService"
  }

  ///SetScreen changes the current view that is streamed over the network
  ///
  /// - Parameters:
  ///   - request: Request to send to SetScreen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setScreen(
    _ request: Bosdyn_Api_SpotCam_SetScreenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetScreenRequest, Bosdyn_Api_SpotCam_SetScreenResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/SetScreen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetScreenInterceptors() ?? []
    )
  }

  ///GetScreen returns the currently-selected screen
  ///
  /// - Parameters:
  ///   - request: Request to send to GetScreen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getScreen(
    _ request: Bosdyn_Api_SpotCam_GetScreenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetScreenRequest, Bosdyn_Api_SpotCam_GetScreenResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/GetScreen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetScreenInterceptors() ?? []
    )
  }

  ///ListScreens returns a list of available screens
  ///
  /// - Parameters:
  ///   - request: Request to send to ListScreens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listScreens(
    _ request: Bosdyn_Api_SpotCam_ListScreensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListScreensRequest, Bosdyn_Api_SpotCam_ListScreensResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/ListScreens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListScreensInterceptors() ?? []
    )
  }

  ///GetVisibleCameras returns a list of currently visible windows, with any available metadata
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVisibleCameras.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVisibleCameras(
    _ request: Bosdyn_Api_SpotCam_GetVisibleCamerasRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetVisibleCamerasRequest, Bosdyn_Api_SpotCam_GetVisibleCamerasResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/GetVisibleCameras",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVisibleCamerasInterceptors() ?? []
    )
  }

  ///set the mapping between radiometric IR samples to color, for video
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIrColormap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIrColormap(
    _ request: Bosdyn_Api_SpotCam_SetIrColormapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetIrColormapRequest, Bosdyn_Api_SpotCam_SetIrColormapResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/SetIrColormap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetIrColormapInterceptors() ?? []
    )
  }

  ///get the mapping between radiometric IR samples to color, for video
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIrColormap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIrColormap(
    _ request: Bosdyn_Api_SpotCam_GetIrColormapRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetIrColormapRequest, Bosdyn_Api_SpotCam_GetIrColormapResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/GetIrColormap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIrColormapInterceptors() ?? []
    )
  }

  ///apply settings for the 'ir meter overlay'
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIrMeterOverlay.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIrMeterOverlay(
    _ request: Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest, Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.CompositorService/SetIrMeterOverlay",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetIrMeterOverlayInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_CompositorServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setScreen'.
  func makeSetScreenInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetScreenRequest, Bosdyn_Api_SpotCam_SetScreenResponse>]

  /// - Returns: Interceptors to use when invoking 'getScreen'.
  func makeGetScreenInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetScreenRequest, Bosdyn_Api_SpotCam_GetScreenResponse>]

  /// - Returns: Interceptors to use when invoking 'listScreens'.
  func makeListScreensInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ListScreensRequest, Bosdyn_Api_SpotCam_ListScreensResponse>]

  /// - Returns: Interceptors to use when invoking 'getVisibleCameras'.
  func makeGetVisibleCamerasInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetVisibleCamerasRequest, Bosdyn_Api_SpotCam_GetVisibleCamerasResponse>]

  /// - Returns: Interceptors to use when invoking 'setIrColormap'.
  func makeSetIrColormapInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetIrColormapRequest, Bosdyn_Api_SpotCam_SetIrColormapResponse>]

  /// - Returns: Interceptors to use when invoking 'getIrColormap'.
  func makeGetIrColormapInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetIrColormapRequest, Bosdyn_Api_SpotCam_GetIrColormapResponse>]

  /// - Returns: Interceptors to use when invoking 'setIrMeterOverlay'.
  func makeSetIrMeterOverlayInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest, Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse>]
}

public final class Bosdyn_Api_SpotCam_CompositorServiceClient: Bosdyn_Api_SpotCam_CompositorServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_CompositorServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.CompositorService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_CompositorServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Set quality parameters for the stream, such as compression and image postprocessing settings.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_StreamQualityServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_StreamQualityServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_StreamQualityServiceClientInterceptorFactoryProtocol? { get }

  func setStreamParams(
    _ request: Bosdyn_Api_SpotCam_SetStreamParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetStreamParamsRequest, Bosdyn_Api_SpotCam_SetStreamParamsResponse>

  func getStreamParams(
    _ request: Bosdyn_Api_SpotCam_GetStreamParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetStreamParamsRequest, Bosdyn_Api_SpotCam_GetStreamParamsResponse>

  func enableCongestionControl(
    _ request: Bosdyn_Api_SpotCam_EnableCongestionControlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_EnableCongestionControlRequest, Bosdyn_Api_SpotCam_EnableCongestionControlResponse>
}

extension Bosdyn_Api_SpotCam_StreamQualityServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.StreamQualityService"
  }

  /// Unary call to SetStreamParams
  ///
  /// - Parameters:
  ///   - request: Request to send to SetStreamParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setStreamParams(
    _ request: Bosdyn_Api_SpotCam_SetStreamParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetStreamParamsRequest, Bosdyn_Api_SpotCam_SetStreamParamsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.StreamQualityService/SetStreamParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetStreamParamsInterceptors() ?? []
    )
  }

  /// Unary call to GetStreamParams
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStreamParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStreamParams(
    _ request: Bosdyn_Api_SpotCam_GetStreamParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetStreamParamsRequest, Bosdyn_Api_SpotCam_GetStreamParamsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.StreamQualityService/GetStreamParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStreamParamsInterceptors() ?? []
    )
  }

  /// Unary call to EnableCongestionControl
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableCongestionControl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func enableCongestionControl(
    _ request: Bosdyn_Api_SpotCam_EnableCongestionControlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_EnableCongestionControlRequest, Bosdyn_Api_SpotCam_EnableCongestionControlResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.StreamQualityService/EnableCongestionControl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableCongestionControlInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_StreamQualityServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setStreamParams'.
  func makeSetStreamParamsInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetStreamParamsRequest, Bosdyn_Api_SpotCam_SetStreamParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'getStreamParams'.
  func makeGetStreamParamsInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetStreamParamsRequest, Bosdyn_Api_SpotCam_GetStreamParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'enableCongestionControl'.
  func makeEnableCongestionControlInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_EnableCongestionControlRequest, Bosdyn_Api_SpotCam_EnableCongestionControlResponse>]
}

public final class Bosdyn_Api_SpotCam_StreamQualityServiceClient: Bosdyn_Api_SpotCam_StreamQualityServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_StreamQualityServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.StreamQualityService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_StreamQualityServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Turn hardware components' power on or off.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_PowerServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_PowerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_PowerServiceClientInterceptorFactoryProtocol? { get }

  func setPowerStatus(
    _ request: Bosdyn_Api_SpotCam_SetPowerStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPowerStatusRequest, Bosdyn_Api_SpotCam_SetPowerStatusResponse>

  func getPowerStatus(
    _ request: Bosdyn_Api_SpotCam_GetPowerStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPowerStatusRequest, Bosdyn_Api_SpotCam_GetPowerStatusResponse>

  func cyclePower(
    _ request: Bosdyn_Api_SpotCam_CyclePowerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_CyclePowerRequest, Bosdyn_Api_SpotCam_CyclePowerResponse>
}

extension Bosdyn_Api_SpotCam_PowerServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.PowerService"
  }

  /// Turn components' power on or off. This should not be used to power cycle a component
  /// Turning PTZ power off for too long will cause the video stream to fail
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPowerStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPowerStatus(
    _ request: Bosdyn_Api_SpotCam_SetPowerStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPowerStatusRequest, Bosdyn_Api_SpotCam_SetPowerStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PowerService/SetPowerStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPowerStatusInterceptors() ?? []
    )
  }

  /// Get current status of a component
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPowerStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPowerStatus(
    _ request: Bosdyn_Api_SpotCam_GetPowerStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPowerStatusRequest, Bosdyn_Api_SpotCam_GetPowerStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PowerService/GetPowerStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPowerStatusInterceptors() ?? []
    )
  }

  /// Cycle power for a component
  ///
  /// - Parameters:
  ///   - request: Request to send to CyclePower.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cyclePower(
    _ request: Bosdyn_Api_SpotCam_CyclePowerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_CyclePowerRequest, Bosdyn_Api_SpotCam_CyclePowerResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PowerService/CyclePower",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCyclePowerInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_PowerServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setPowerStatus'.
  func makeSetPowerStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetPowerStatusRequest, Bosdyn_Api_SpotCam_SetPowerStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getPowerStatus'.
  func makeGetPowerStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetPowerStatusRequest, Bosdyn_Api_SpotCam_GetPowerStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'cyclePower'.
  func makeCyclePowerInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_CyclePowerRequest, Bosdyn_Api_SpotCam_CyclePowerResponse>]
}

public final class Bosdyn_Api_SpotCam_PowerServiceClient: Bosdyn_Api_SpotCam_PowerServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_PowerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.PowerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_PowerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Change the brightness level of individual LEDs.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_LightingServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_LightingServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_LightingServiceClientInterceptorFactoryProtocol? { get }

  func setLEDBrightness(
    _ request: Bosdyn_Api_SpotCam_SetLEDBrightnessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetLEDBrightnessRequest, Bosdyn_Api_SpotCam_SetLEDBrightnessResponse>

  func getLEDBrightness(
    _ request: Bosdyn_Api_SpotCam_GetLEDBrightnessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetLEDBrightnessRequest, Bosdyn_Api_SpotCam_GetLEDBrightnessResponse>
}

extension Bosdyn_Api_SpotCam_LightingServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.LightingService"
  }

  /// Unary call to SetLEDBrightness
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLEDBrightness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLEDBrightness(
    _ request: Bosdyn_Api_SpotCam_SetLEDBrightnessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetLEDBrightnessRequest, Bosdyn_Api_SpotCam_SetLEDBrightnessResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.LightingService/SetLEDBrightness",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLEDBrightnessInterceptors() ?? []
    )
  }

  /// Unary call to GetLEDBrightness
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLEDBrightness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLEDBrightness(
    _ request: Bosdyn_Api_SpotCam_GetLEDBrightnessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetLEDBrightnessRequest, Bosdyn_Api_SpotCam_GetLEDBrightnessResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.LightingService/GetLEDBrightness",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLEDBrightnessInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_LightingServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setLEDBrightness'.
  func makeSetLEDBrightnessInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetLEDBrightnessRequest, Bosdyn_Api_SpotCam_SetLEDBrightnessResponse>]

  /// - Returns: Interceptors to use when invoking 'getLEDBrightness'.
  func makeGetLEDBrightnessInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetLEDBrightnessRequest, Bosdyn_Api_SpotCam_GetLEDBrightnessResponse>]
}

public final class Bosdyn_Api_SpotCam_LightingServiceClient: Bosdyn_Api_SpotCam_LightingServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_LightingServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.LightingService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_LightingServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Trigger data acquisitions, and retrieve resulting data.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_MediaLogServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_MediaLogServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_MediaLogServiceClientInterceptorFactoryProtocol? { get }

  func store(
    _ request: Bosdyn_Api_SpotCam_StoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_StoreRequest, Bosdyn_Api_SpotCam_StoreResponse>

  func getStatus(
    _ request: Bosdyn_Api_SpotCam_GetStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetStatusRequest, Bosdyn_Api_SpotCam_GetStatusResponse>

  func tag(
    _ request: Bosdyn_Api_SpotCam_TagRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_TagRequest, Bosdyn_Api_SpotCam_TagResponse>

  func enableDebug(
    _ request: Bosdyn_Api_SpotCam_DebugRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DebugRequest, Bosdyn_Api_SpotCam_DebugResponse>

  func listCameras(
    _ request: Bosdyn_Api_SpotCam_ListCamerasRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListCamerasRequest, Bosdyn_Api_SpotCam_ListCamerasResponse>

  func retrieveRawData(
    _ request: Bosdyn_Api_SpotCam_RetrieveRawDataRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bosdyn_Api_SpotCam_RetrieveRawDataResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_RetrieveRawDataRequest, Bosdyn_Api_SpotCam_RetrieveRawDataResponse>

  func retrieve(
    _ request: Bosdyn_Api_SpotCam_RetrieveRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bosdyn_Api_SpotCam_RetrieveResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_RetrieveRequest, Bosdyn_Api_SpotCam_RetrieveResponse>

  func delete(
    _ request: Bosdyn_Api_SpotCam_DeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DeleteRequest, Bosdyn_Api_SpotCam_DeleteResponse>

  func listLogpoints(
    _ request: Bosdyn_Api_SpotCam_ListLogpointsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bosdyn_Api_SpotCam_ListLogpointsResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_ListLogpointsRequest, Bosdyn_Api_SpotCam_ListLogpointsResponse>

  func setPassphrase(
    _ request: Bosdyn_Api_SpotCam_SetPassphraseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPassphraseRequest, Bosdyn_Api_SpotCam_SetPassphraseResponse>
}

extension Bosdyn_Api_SpotCam_MediaLogServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.MediaLogService"
  }

  ///Store queues up a Logpoint, which is a bit of media that the user wishes to store to disk
  ///(still images are supported for now, more media types will be supported in the future)
  ///
  /// - Parameters:
  ///   - request: Request to send to Store.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func store(
    _ request: Bosdyn_Api_SpotCam_StoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_StoreRequest, Bosdyn_Api_SpotCam_StoreResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/Store",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreInterceptors() ?? []
    )
  }

  ///GetStatus reads the 'name' field of the Logpoint contained in GetStatusRequest, and fills in
  ///the rest of the fields. Mainly useful for getting the 'state' of the logpoint.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStatus(
    _ request: Bosdyn_Api_SpotCam_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetStatusRequest, Bosdyn_Api_SpotCam_GetStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/GetStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  ///Tag updates the 'tag' field of the Logpoint that's passed, which must exist.
  ///
  /// - Parameters:
  ///   - request: Request to send to Tag.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tag(
    _ request: Bosdyn_Api_SpotCam_TagRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_TagRequest, Bosdyn_Api_SpotCam_TagResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/Tag",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTagInterceptors() ?? []
    )
  }

  ///EnableDebug starts the periodic logging of health data to the database; this increases disk utilization, but will record data that is useful post-mortum
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableDebug.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func enableDebug(
    _ request: Bosdyn_Api_SpotCam_DebugRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DebugRequest, Bosdyn_Api_SpotCam_DebugResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/EnableDebug",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEnableDebugInterceptors() ?? []
    )
  }

  ///ListCameras returns a list of strings that identify valid cameras for logging
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCameras.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCameras(
    _ request: Bosdyn_Api_SpotCam_ListCamerasRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListCamerasRequest, Bosdyn_Api_SpotCam_ListCamerasResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/ListCameras",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCamerasInterceptors() ?? []
    )
  }

  ///Retrieve returns all raw data associated with a given logpoint
  ///
  /// - Parameters:
  ///   - request: Request to send to RetrieveRawData.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func retrieveRawData(
    _ request: Bosdyn_Api_SpotCam_RetrieveRawDataRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bosdyn_Api_SpotCam_RetrieveRawDataResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_RetrieveRawDataRequest, Bosdyn_Api_SpotCam_RetrieveRawDataResponse> {
    return self.makeServerStreamingCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/RetrieveRawData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetrieveRawDataInterceptors() ?? [],
      handler: handler
    )
  }

  ///Retrieve returns all data associated with a given logpoint
  ///
  /// - Parameters:
  ///   - request: Request to send to Retrieve.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func retrieve(
    _ request: Bosdyn_Api_SpotCam_RetrieveRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bosdyn_Api_SpotCam_RetrieveResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_RetrieveRequest, Bosdyn_Api_SpotCam_RetrieveResponse> {
    return self.makeServerStreamingCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/Retrieve",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetrieveInterceptors() ?? [],
      handler: handler
    )
  }

  ///Delete removes a Logpoint from the system
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delete(
    _ request: Bosdyn_Api_SpotCam_DeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DeleteRequest, Bosdyn_Api_SpotCam_DeleteResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/Delete",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  ///ListLogpoints returns a list of all logpoints in the database.
  ///Warning: this may be a lot of data.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLogpoints.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listLogpoints(
    _ request: Bosdyn_Api_SpotCam_ListLogpointsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bosdyn_Api_SpotCam_ListLogpointsResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_SpotCam_ListLogpointsRequest, Bosdyn_Api_SpotCam_ListLogpointsResponse> {
    return self.makeServerStreamingCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/ListLogpoints",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLogpointsInterceptors() ?? [],
      handler: handler
    )
  }

  ///SetPassphrase sets the eCryptFS passphrase used by the filesystem.
  ///there is no symmetry here, because key material is write-only
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPassphrase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPassphrase(
    _ request: Bosdyn_Api_SpotCam_SetPassphraseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPassphraseRequest, Bosdyn_Api_SpotCam_SetPassphraseResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.MediaLogService/SetPassphrase",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPassphraseInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_MediaLogServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'store'.
  func makeStoreInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_StoreRequest, Bosdyn_Api_SpotCam_StoreResponse>]

  /// - Returns: Interceptors to use when invoking 'getStatus'.
  func makeGetStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetStatusRequest, Bosdyn_Api_SpotCam_GetStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'tag'.
  func makeTagInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_TagRequest, Bosdyn_Api_SpotCam_TagResponse>]

  /// - Returns: Interceptors to use when invoking 'enableDebug'.
  func makeEnableDebugInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_DebugRequest, Bosdyn_Api_SpotCam_DebugResponse>]

  /// - Returns: Interceptors to use when invoking 'listCameras'.
  func makeListCamerasInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ListCamerasRequest, Bosdyn_Api_SpotCam_ListCamerasResponse>]

  /// - Returns: Interceptors to use when invoking 'retrieveRawData'.
  func makeRetrieveRawDataInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_RetrieveRawDataRequest, Bosdyn_Api_SpotCam_RetrieveRawDataResponse>]

  /// - Returns: Interceptors to use when invoking 'retrieve'.
  func makeRetrieveInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_RetrieveRequest, Bosdyn_Api_SpotCam_RetrieveResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_DeleteRequest, Bosdyn_Api_SpotCam_DeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'listLogpoints'.
  func makeListLogpointsInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ListLogpointsRequest, Bosdyn_Api_SpotCam_ListLogpointsResponse>]

  /// - Returns: Interceptors to use when invoking 'setPassphrase'.
  func makeSetPassphraseInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetPassphraseRequest, Bosdyn_Api_SpotCam_SetPassphraseResponse>]
}

public final class Bosdyn_Api_SpotCam_MediaLogServiceClient: Bosdyn_Api_SpotCam_MediaLogServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_MediaLogServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.MediaLogService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_MediaLogServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Control real and virtual ptz mechanisms.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_PtzServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_PtzServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_PtzServiceClientInterceptorFactoryProtocol? { get }

  func setPtzPosition(
    _ request: Bosdyn_Api_SpotCam_SetPtzPositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPtzPositionRequest, Bosdyn_Api_SpotCam_SetPtzPositionResponse>

  func getPtzPosition(
    _ request: Bosdyn_Api_SpotCam_GetPtzPositionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPtzPositionRequest, Bosdyn_Api_SpotCam_GetPtzPositionResponse>

  func setPtzVelocity(
    _ request: Bosdyn_Api_SpotCam_SetPtzVelocityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPtzVelocityRequest, Bosdyn_Api_SpotCam_SetPtzVelocityResponse>

  func getPtzVelocity(
    _ request: Bosdyn_Api_SpotCam_GetPtzVelocityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPtzVelocityRequest, Bosdyn_Api_SpotCam_GetPtzVelocityResponse>

  func listPtz(
    _ request: Bosdyn_Api_SpotCam_ListPtzRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListPtzRequest, Bosdyn_Api_SpotCam_ListPtzResponse>

  func initializeLens(
    _ request: Bosdyn_Api_SpotCam_InitializeLensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_InitializeLensRequest, Bosdyn_Api_SpotCam_InitializeLensResponse>
}

extension Bosdyn_Api_SpotCam_PtzServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.PtzService"
  }

  ///SetPosition points the referenced camera to a given vector (in PTZ-space)
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPtzPosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPtzPosition(
    _ request: Bosdyn_Api_SpotCam_SetPtzPositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPtzPositionRequest, Bosdyn_Api_SpotCam_SetPtzPositionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/SetPtzPosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPtzPositionInterceptors() ?? []
    )
  }

  ///GetPosition returns the current settings of the referenced camera
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPtzPosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPtzPosition(
    _ request: Bosdyn_Api_SpotCam_GetPtzPositionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPtzPositionRequest, Bosdyn_Api_SpotCam_GetPtzPositionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/GetPtzPosition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPtzPositionInterceptors() ?? []
    )
  }

  /// Unary call to SetPtzVelocity
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPtzVelocity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPtzVelocity(
    _ request: Bosdyn_Api_SpotCam_SetPtzVelocityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetPtzVelocityRequest, Bosdyn_Api_SpotCam_SetPtzVelocityResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/SetPtzVelocity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPtzVelocityInterceptors() ?? []
    )
  }

  /// Unary call to GetPtzVelocity
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPtzVelocity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPtzVelocity(
    _ request: Bosdyn_Api_SpotCam_GetPtzVelocityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetPtzVelocityRequest, Bosdyn_Api_SpotCam_GetPtzVelocityResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/GetPtzVelocity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPtzVelocityInterceptors() ?? []
    )
  }

  /// Unary call to ListPtz
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPtz.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPtz(
    _ request: Bosdyn_Api_SpotCam_ListPtzRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListPtzRequest, Bosdyn_Api_SpotCam_ListPtzResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/ListPtz",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPtzInterceptors() ?? []
    )
  }

  /// Reinitializes PTZ autofocus
  ///
  /// - Parameters:
  ///   - request: Request to send to InitializeLens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func initializeLens(
    _ request: Bosdyn_Api_SpotCam_InitializeLensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_InitializeLensRequest, Bosdyn_Api_SpotCam_InitializeLensResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.PtzService/InitializeLens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitializeLensInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_PtzServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setPtzPosition'.
  func makeSetPtzPositionInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetPtzPositionRequest, Bosdyn_Api_SpotCam_SetPtzPositionResponse>]

  /// - Returns: Interceptors to use when invoking 'getPtzPosition'.
  func makeGetPtzPositionInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetPtzPositionRequest, Bosdyn_Api_SpotCam_GetPtzPositionResponse>]

  /// - Returns: Interceptors to use when invoking 'setPtzVelocity'.
  func makeSetPtzVelocityInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetPtzVelocityRequest, Bosdyn_Api_SpotCam_SetPtzVelocityResponse>]

  /// - Returns: Interceptors to use when invoking 'getPtzVelocity'.
  func makeGetPtzVelocityInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetPtzVelocityRequest, Bosdyn_Api_SpotCam_GetPtzVelocityResponse>]

  /// - Returns: Interceptors to use when invoking 'listPtz'.
  func makeListPtzInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ListPtzRequest, Bosdyn_Api_SpotCam_ListPtzResponse>]

  /// - Returns: Interceptors to use when invoking 'initializeLens'.
  func makeInitializeLensInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_InitializeLensRequest, Bosdyn_Api_SpotCam_InitializeLensResponse>]
}

public final class Bosdyn_Api_SpotCam_PtzServiceClient: Bosdyn_Api_SpotCam_PtzServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_PtzServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.PtzService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_PtzServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Upload and play sounds over the SpotCam's speakers.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_AudioServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_AudioServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_AudioServiceClientInterceptorFactoryProtocol? { get }

  func playSound(
    _ request: Bosdyn_Api_SpotCam_PlaySoundRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_PlaySoundRequest, Bosdyn_Api_SpotCam_PlaySoundResponse>

  func loadSound(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Bosdyn_Api_SpotCam_LoadSoundRequest, Bosdyn_Api_SpotCam_LoadSoundResponse>

  func deleteSound(
    _ request: Bosdyn_Api_SpotCam_DeleteSoundRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DeleteSoundRequest, Bosdyn_Api_SpotCam_DeleteSoundResponse>

  func listSounds(
    _ request: Bosdyn_Api_SpotCam_ListSoundsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListSoundsRequest, Bosdyn_Api_SpotCam_ListSoundsResponse>

  func setVolume(
    _ request: Bosdyn_Api_SpotCam_SetVolumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetVolumeRequest, Bosdyn_Api_SpotCam_SetVolumeResponse>

  func getVolume(
    _ request: Bosdyn_Api_SpotCam_GetVolumeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetVolumeRequest, Bosdyn_Api_SpotCam_GetVolumeResponse>

  func setAudioCaptureChannel(
    _ request: Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse>

  func getAudioCaptureChannel(
    _ request: Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse>

  func setAudioCaptureGain(
    _ request: Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse>

  func getAudioCaptureGain(
    _ request: Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse>
}

extension Bosdyn_Api_SpotCam_AudioServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.AudioService"
  }

  ///Given a soundRequest that identifies a single sound present in the system's sound effects table, PlaySound executes the sound effect.
  ///
  /// - Parameters:
  ///   - request: Request to send to PlaySound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func playSound(
    _ request: Bosdyn_Api_SpotCam_PlaySoundRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_PlaySoundRequest, Bosdyn_Api_SpotCam_PlaySoundResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/PlaySound",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePlaySoundInterceptors() ?? []
    )
  }

  ///LoadSound loads a sound effect into the system's sound table. The stream must contain a wav file, with a RIFF header describing it.
  ///The arguement is a stream, to allow for sounds that are bigger then the MTU of the network; in this case, the complete stream must
  ///contain the entire sound. If the stream ends early, an error will be returned. The header and sound fields of the entire stream must
  ///be the same.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func loadSound(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Bosdyn_Api_SpotCam_LoadSoundRequest, Bosdyn_Api_SpotCam_LoadSoundResponse> {
    return self.makeClientStreamingCall(
      path: "/bosdyn.api.spot_cam.AudioService/LoadSound",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadSoundInterceptors() ?? []
    )
  }

  ///Delete the sound identified in the argument from the system's sound table.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSound.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSound(
    _ request: Bosdyn_Api_SpotCam_DeleteSoundRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_DeleteSoundRequest, Bosdyn_Api_SpotCam_DeleteSoundResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/DeleteSound",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSoundInterceptors() ?? []
    )
  }

  ///ListSounds returns a list of all of the sound effects that the system knows about.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSounds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSounds(
    _ request: Bosdyn_Api_SpotCam_ListSoundsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ListSoundsRequest, Bosdyn_Api_SpotCam_ListSoundsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/ListSounds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSoundsInterceptors() ?? []
    )
  }

  /// Set the overall volume level for playing sounds.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetVolume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setVolume(
    _ request: Bosdyn_Api_SpotCam_SetVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetVolumeRequest, Bosdyn_Api_SpotCam_SetVolumeResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/SetVolume",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetVolumeInterceptors() ?? []
    )
  }

  /// Set the overall volume level for playing sounds.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVolume.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVolume(
    _ request: Bosdyn_Api_SpotCam_GetVolumeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetVolumeRequest, Bosdyn_Api_SpotCam_GetVolumeResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/GetVolume",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVolumeInterceptors() ?? []
    )
  }

  /// Unary call to SetAudioCaptureChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAudioCaptureChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setAudioCaptureChannel(
    _ request: Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/SetAudioCaptureChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAudioCaptureChannelInterceptors() ?? []
    )
  }

  /// Unary call to GetAudioCaptureChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAudioCaptureChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAudioCaptureChannel(
    _ request: Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/GetAudioCaptureChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAudioCaptureChannelInterceptors() ?? []
    )
  }

  /// Unary call to SetAudioCaptureGain
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAudioCaptureGain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setAudioCaptureGain(
    _ request: Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/SetAudioCaptureGain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAudioCaptureGainInterceptors() ?? []
    )
  }

  /// Unary call to GetAudioCaptureGain
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAudioCaptureGain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAudioCaptureGain(
    _ request: Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.AudioService/GetAudioCaptureGain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAudioCaptureGainInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_AudioServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'playSound'.
  func makePlaySoundInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_PlaySoundRequest, Bosdyn_Api_SpotCam_PlaySoundResponse>]

  /// - Returns: Interceptors to use when invoking 'loadSound'.
  func makeLoadSoundInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_LoadSoundRequest, Bosdyn_Api_SpotCam_LoadSoundResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSound'.
  func makeDeleteSoundInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_DeleteSoundRequest, Bosdyn_Api_SpotCam_DeleteSoundResponse>]

  /// - Returns: Interceptors to use when invoking 'listSounds'.
  func makeListSoundsInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ListSoundsRequest, Bosdyn_Api_SpotCam_ListSoundsResponse>]

  /// - Returns: Interceptors to use when invoking 'setVolume'.
  func makeSetVolumeInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetVolumeRequest, Bosdyn_Api_SpotCam_SetVolumeResponse>]

  /// - Returns: Interceptors to use when invoking 'getVolume'.
  func makeGetVolumeInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetVolumeRequest, Bosdyn_Api_SpotCam_GetVolumeResponse>]

  /// - Returns: Interceptors to use when invoking 'setAudioCaptureChannel'.
  func makeSetAudioCaptureChannelInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'getAudioCaptureChannel'.
  func makeGetAudioCaptureChannelInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'setAudioCaptureGain'.
  func makeSetAudioCaptureGainInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse>]

  /// - Returns: Interceptors to use when invoking 'getAudioCaptureGain'.
  func makeGetAudioCaptureGainInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse>]
}

public final class Bosdyn_Api_SpotCam_AudioServiceClient: Bosdyn_Api_SpotCam_AudioServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_AudioServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.AudioService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_AudioServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query temperature and built-in test results.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_HealthServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_HealthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_HealthServiceClientInterceptorFactoryProtocol? { get }

  func getTemperature(
    _ request: Bosdyn_Api_SpotCam_GetTemperatureRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetTemperatureRequest, Bosdyn_Api_SpotCam_GetTemperatureResponse>

  func getBITStatus(
    _ request: Bosdyn_Api_SpotCam_GetBITStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetBITStatusRequest, Bosdyn_Api_SpotCam_GetBITStatusResponse>

  func clearBITEvents(
    _ request: Bosdyn_Api_SpotCam_ClearBITEventsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ClearBITEventsRequest, Bosdyn_Api_SpotCam_ClearBITEventsResponse>
}

extension Bosdyn_Api_SpotCam_HealthServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.HealthService"
  }

  ///GetTemperature returns a list of thermometers in the system, and the temperature that they measure.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTemperature.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTemperature(
    _ request: Bosdyn_Api_SpotCam_GetTemperatureRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetTemperatureRequest, Bosdyn_Api_SpotCam_GetTemperatureResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.HealthService/GetTemperature",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTemperatureInterceptors() ?? []
    )
  }

  ///GetBitStatus returns two lists; a list of system events, and a list of ways that the system is degraded;
  ///for instance, a degredation may include a missing PTZ unit, or a missing USB storage device.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBITStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBITStatus(
    _ request: Bosdyn_Api_SpotCam_GetBITStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetBITStatusRequest, Bosdyn_Api_SpotCam_GetBITStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.HealthService/GetBITStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBITStatusInterceptors() ?? []
    )
  }

  ///ClearBitEvents clears out the events list of the BITStatus structure.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearBITEvents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clearBITEvents(
    _ request: Bosdyn_Api_SpotCam_ClearBITEventsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_ClearBITEventsRequest, Bosdyn_Api_SpotCam_ClearBITEventsResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.HealthService/ClearBITEvents",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearBITEventsInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_HealthServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getTemperature'.
  func makeGetTemperatureInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetTemperatureRequest, Bosdyn_Api_SpotCam_GetTemperatureResponse>]

  /// - Returns: Interceptors to use when invoking 'getBITStatus'.
  func makeGetBITStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetBITStatusRequest, Bosdyn_Api_SpotCam_GetBITStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'clearBITEvents'.
  func makeClearBITEventsInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_ClearBITEventsRequest, Bosdyn_Api_SpotCam_ClearBITEventsResponse>]
}

public final class Bosdyn_Api_SpotCam_HealthServiceClient: Bosdyn_Api_SpotCam_HealthServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_HealthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.HealthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_HealthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Modify or query network settings of the SpotCam and ICE resolution servers.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_NetworkServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_NetworkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func setICEConfiguration(
    _ request: Bosdyn_Api_SpotCam_SetICEConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetICEConfigurationRequest, Bosdyn_Api_SpotCam_SetICEConfigurationResponse>

  func getICEConfiguration(
    _ request: Bosdyn_Api_SpotCam_GetICEConfigurationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetICEConfigurationRequest, Bosdyn_Api_SpotCam_GetICEConfigurationResponse>
}

extension Bosdyn_Api_SpotCam_NetworkServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.NetworkService"
  }

  ///SetICEConfiguration sets up parameters for ICE, including addresses for STUN and TURN services
  ///
  /// - Parameters:
  ///   - request: Request to send to SetICEConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setICEConfiguration(
    _ request: Bosdyn_Api_SpotCam_SetICEConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_SetICEConfigurationRequest, Bosdyn_Api_SpotCam_SetICEConfigurationResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.NetworkService/SetICEConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetICEConfigurationInterceptors() ?? []
    )
  }

  ///GetICEConfiguration retrieves currently set parameters for ICE, including addresses for STUN and TURN services
  ///
  /// - Parameters:
  ///   - request: Request to send to GetICEConfiguration.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getICEConfiguration(
    _ request: Bosdyn_Api_SpotCam_GetICEConfigurationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetICEConfigurationRequest, Bosdyn_Api_SpotCam_GetICEConfigurationResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.NetworkService/GetICEConfiguration",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetICEConfigurationInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_NetworkServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setICEConfiguration'.
  func makeSetICEConfigurationInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_SetICEConfigurationRequest, Bosdyn_Api_SpotCam_SetICEConfigurationResponse>]

  /// - Returns: Interceptors to use when invoking 'getICEConfiguration'.
  func makeGetICEConfigurationInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetICEConfigurationRequest, Bosdyn_Api_SpotCam_GetICEConfigurationResponse>]
}

public final class Bosdyn_Api_SpotCam_NetworkServiceClient: Bosdyn_Api_SpotCam_NetworkServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_NetworkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query the version of the software release running on the SpotCam.
///
/// Usage: instantiate `Bosdyn_Api_SpotCam_VersionServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_SpotCam_VersionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_SpotCam_VersionServiceClientInterceptorFactoryProtocol? { get }

  func getSoftwareVersion(
    _ request: Bosdyn_Api_SpotCam_GetSoftwareVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetSoftwareVersionRequest, Bosdyn_Api_SpotCam_GetSoftwareVersionResponse>
}

extension Bosdyn_Api_SpotCam_VersionServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.spot_cam.VersionService"
  }

  /// Unary call to GetSoftwareVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSoftwareVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSoftwareVersion(
    _ request: Bosdyn_Api_SpotCam_GetSoftwareVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_SpotCam_GetSoftwareVersionRequest, Bosdyn_Api_SpotCam_GetSoftwareVersionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.spot_cam.VersionService/GetSoftwareVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSoftwareVersionInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_SpotCam_VersionServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getSoftwareVersion'.
  func makeGetSoftwareVersionInterceptors() -> [ClientInterceptor<Bosdyn_Api_SpotCam_GetSoftwareVersionRequest, Bosdyn_Api_SpotCam_GetSoftwareVersionResponse>]
}

public final class Bosdyn_Api_SpotCam_VersionServiceClient: Bosdyn_Api_SpotCam_VersionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_SpotCam_VersionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.spot_cam.VersionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_SpotCam_VersionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Change the layout of of the video stream between available presets.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_CompositorServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_CompositorServiceServerInterceptorFactoryProtocol? { get }

  ///SetScreen changes the current view that is streamed over the network
  func setScreen(request: Bosdyn_Api_SpotCam_SetScreenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetScreenResponse>

  ///GetScreen returns the currently-selected screen
  func getScreen(request: Bosdyn_Api_SpotCam_GetScreenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetScreenResponse>

  ///ListScreens returns a list of available screens
  func listScreens(request: Bosdyn_Api_SpotCam_ListScreensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_ListScreensResponse>

  ///GetVisibleCameras returns a list of currently visible windows, with any available metadata
  func getVisibleCameras(request: Bosdyn_Api_SpotCam_GetVisibleCamerasRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetVisibleCamerasResponse>

  ///set the mapping between radiometric IR samples to color, for video
  func setIrColormap(request: Bosdyn_Api_SpotCam_SetIrColormapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetIrColormapResponse>

  ///get the mapping between radiometric IR samples to color, for video
  func getIrColormap(request: Bosdyn_Api_SpotCam_GetIrColormapRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetIrColormapResponse>

  ///apply settings for the 'ir meter overlay'
  func setIrMeterOverlay(request: Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse>
}

extension Bosdyn_Api_SpotCam_CompositorServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.CompositorService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetScreen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetScreenRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetScreenResponse>(),
        interceptors: self.interceptors?.makeSetScreenInterceptors() ?? [],
        userFunction: self.setScreen(request:context:)
      )

    case "GetScreen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetScreenRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetScreenResponse>(),
        interceptors: self.interceptors?.makeGetScreenInterceptors() ?? [],
        userFunction: self.getScreen(request:context:)
      )

    case "ListScreens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ListScreensRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ListScreensResponse>(),
        interceptors: self.interceptors?.makeListScreensInterceptors() ?? [],
        userFunction: self.listScreens(request:context:)
      )

    case "GetVisibleCameras":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetVisibleCamerasRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetVisibleCamerasResponse>(),
        interceptors: self.interceptors?.makeGetVisibleCamerasInterceptors() ?? [],
        userFunction: self.getVisibleCameras(request:context:)
      )

    case "SetIrColormap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetIrColormapRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetIrColormapResponse>(),
        interceptors: self.interceptors?.makeSetIrColormapInterceptors() ?? [],
        userFunction: self.setIrColormap(request:context:)
      )

    case "GetIrColormap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetIrColormapRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetIrColormapResponse>(),
        interceptors: self.interceptors?.makeGetIrColormapInterceptors() ?? [],
        userFunction: self.getIrColormap(request:context:)
      )

    case "SetIrMeterOverlay":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse>(),
        interceptors: self.interceptors?.makeSetIrMeterOverlayInterceptors() ?? [],
        userFunction: self.setIrMeterOverlay(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_CompositorServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setScreen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetScreenInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetScreenRequest, Bosdyn_Api_SpotCam_SetScreenResponse>]

  /// - Returns: Interceptors to use when handling 'getScreen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetScreenInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetScreenRequest, Bosdyn_Api_SpotCam_GetScreenResponse>]

  /// - Returns: Interceptors to use when handling 'listScreens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListScreensInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ListScreensRequest, Bosdyn_Api_SpotCam_ListScreensResponse>]

  /// - Returns: Interceptors to use when handling 'getVisibleCameras'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetVisibleCamerasInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetVisibleCamerasRequest, Bosdyn_Api_SpotCam_GetVisibleCamerasResponse>]

  /// - Returns: Interceptors to use when handling 'setIrColormap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetIrColormapInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetIrColormapRequest, Bosdyn_Api_SpotCam_SetIrColormapResponse>]

  /// - Returns: Interceptors to use when handling 'getIrColormap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetIrColormapInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetIrColormapRequest, Bosdyn_Api_SpotCam_GetIrColormapResponse>]

  /// - Returns: Interceptors to use when handling 'setIrMeterOverlay'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetIrMeterOverlayInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetIrMeterOverlayRequest, Bosdyn_Api_SpotCam_SetIrMeterOverlayResponse>]
}
/// Set quality parameters for the stream, such as compression and image postprocessing settings.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_StreamQualityServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_StreamQualityServiceServerInterceptorFactoryProtocol? { get }

  func setStreamParams(request: Bosdyn_Api_SpotCam_SetStreamParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetStreamParamsResponse>

  func getStreamParams(request: Bosdyn_Api_SpotCam_GetStreamParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetStreamParamsResponse>

  func enableCongestionControl(request: Bosdyn_Api_SpotCam_EnableCongestionControlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_EnableCongestionControlResponse>
}

extension Bosdyn_Api_SpotCam_StreamQualityServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.StreamQualityService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetStreamParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetStreamParamsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetStreamParamsResponse>(),
        interceptors: self.interceptors?.makeSetStreamParamsInterceptors() ?? [],
        userFunction: self.setStreamParams(request:context:)
      )

    case "GetStreamParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetStreamParamsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetStreamParamsResponse>(),
        interceptors: self.interceptors?.makeGetStreamParamsInterceptors() ?? [],
        userFunction: self.getStreamParams(request:context:)
      )

    case "EnableCongestionControl":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_EnableCongestionControlRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_EnableCongestionControlResponse>(),
        interceptors: self.interceptors?.makeEnableCongestionControlInterceptors() ?? [],
        userFunction: self.enableCongestionControl(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_StreamQualityServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setStreamParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetStreamParamsInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetStreamParamsRequest, Bosdyn_Api_SpotCam_SetStreamParamsResponse>]

  /// - Returns: Interceptors to use when handling 'getStreamParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStreamParamsInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetStreamParamsRequest, Bosdyn_Api_SpotCam_GetStreamParamsResponse>]

  /// - Returns: Interceptors to use when handling 'enableCongestionControl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableCongestionControlInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_EnableCongestionControlRequest, Bosdyn_Api_SpotCam_EnableCongestionControlResponse>]
}
/// Turn hardware components' power on or off.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_PowerServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_PowerServiceServerInterceptorFactoryProtocol? { get }

  /// Turn components' power on or off. This should not be used to power cycle a component
  /// Turning PTZ power off for too long will cause the video stream to fail
  func setPowerStatus(request: Bosdyn_Api_SpotCam_SetPowerStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetPowerStatusResponse>

  /// Get current status of a component
  func getPowerStatus(request: Bosdyn_Api_SpotCam_GetPowerStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetPowerStatusResponse>

  /// Cycle power for a component
  func cyclePower(request: Bosdyn_Api_SpotCam_CyclePowerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_CyclePowerResponse>
}

extension Bosdyn_Api_SpotCam_PowerServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.PowerService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetPowerStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetPowerStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetPowerStatusResponse>(),
        interceptors: self.interceptors?.makeSetPowerStatusInterceptors() ?? [],
        userFunction: self.setPowerStatus(request:context:)
      )

    case "GetPowerStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetPowerStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetPowerStatusResponse>(),
        interceptors: self.interceptors?.makeGetPowerStatusInterceptors() ?? [],
        userFunction: self.getPowerStatus(request:context:)
      )

    case "CyclePower":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_CyclePowerRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_CyclePowerResponse>(),
        interceptors: self.interceptors?.makeCyclePowerInterceptors() ?? [],
        userFunction: self.cyclePower(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_PowerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setPowerStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPowerStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetPowerStatusRequest, Bosdyn_Api_SpotCam_SetPowerStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getPowerStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPowerStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetPowerStatusRequest, Bosdyn_Api_SpotCam_GetPowerStatusResponse>]

  /// - Returns: Interceptors to use when handling 'cyclePower'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCyclePowerInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_CyclePowerRequest, Bosdyn_Api_SpotCam_CyclePowerResponse>]
}
/// Change the brightness level of individual LEDs.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_LightingServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_LightingServiceServerInterceptorFactoryProtocol? { get }

  func setLEDBrightness(request: Bosdyn_Api_SpotCam_SetLEDBrightnessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetLEDBrightnessResponse>

  func getLEDBrightness(request: Bosdyn_Api_SpotCam_GetLEDBrightnessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetLEDBrightnessResponse>
}

extension Bosdyn_Api_SpotCam_LightingServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.LightingService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetLEDBrightness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetLEDBrightnessRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetLEDBrightnessResponse>(),
        interceptors: self.interceptors?.makeSetLEDBrightnessInterceptors() ?? [],
        userFunction: self.setLEDBrightness(request:context:)
      )

    case "GetLEDBrightness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetLEDBrightnessRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetLEDBrightnessResponse>(),
        interceptors: self.interceptors?.makeGetLEDBrightnessInterceptors() ?? [],
        userFunction: self.getLEDBrightness(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_LightingServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setLEDBrightness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetLEDBrightnessInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetLEDBrightnessRequest, Bosdyn_Api_SpotCam_SetLEDBrightnessResponse>]

  /// - Returns: Interceptors to use when handling 'getLEDBrightness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLEDBrightnessInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetLEDBrightnessRequest, Bosdyn_Api_SpotCam_GetLEDBrightnessResponse>]
}
/// Trigger data acquisitions, and retrieve resulting data.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_MediaLogServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_MediaLogServiceServerInterceptorFactoryProtocol? { get }

  ///Store queues up a Logpoint, which is a bit of media that the user wishes to store to disk
  ///(still images are supported for now, more media types will be supported in the future)
  func store(request: Bosdyn_Api_SpotCam_StoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_StoreResponse>

  ///GetStatus reads the 'name' field of the Logpoint contained in GetStatusRequest, and fills in
  ///the rest of the fields. Mainly useful for getting the 'state' of the logpoint.
  func getStatus(request: Bosdyn_Api_SpotCam_GetStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetStatusResponse>

  ///Tag updates the 'tag' field of the Logpoint that's passed, which must exist.
  func tag(request: Bosdyn_Api_SpotCam_TagRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_TagResponse>

  ///EnableDebug starts the periodic logging of health data to the database; this increases disk utilization, but will record data that is useful post-mortum
  func enableDebug(request: Bosdyn_Api_SpotCam_DebugRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_DebugResponse>

  ///ListCameras returns a list of strings that identify valid cameras for logging
  func listCameras(request: Bosdyn_Api_SpotCam_ListCamerasRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_ListCamerasResponse>

  ///Retrieve returns all raw data associated with a given logpoint
  func retrieveRawData(request: Bosdyn_Api_SpotCam_RetrieveRawDataRequest, context: StreamingResponseCallContext<Bosdyn_Api_SpotCam_RetrieveRawDataResponse>) -> EventLoopFuture<GRPCStatus>

  ///Retrieve returns all data associated with a given logpoint
  func retrieve(request: Bosdyn_Api_SpotCam_RetrieveRequest, context: StreamingResponseCallContext<Bosdyn_Api_SpotCam_RetrieveResponse>) -> EventLoopFuture<GRPCStatus>

  ///Delete removes a Logpoint from the system
  func delete(request: Bosdyn_Api_SpotCam_DeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_DeleteResponse>

  ///ListLogpoints returns a list of all logpoints in the database.
  ///Warning: this may be a lot of data.
  func listLogpoints(request: Bosdyn_Api_SpotCam_ListLogpointsRequest, context: StreamingResponseCallContext<Bosdyn_Api_SpotCam_ListLogpointsResponse>) -> EventLoopFuture<GRPCStatus>

  ///SetPassphrase sets the eCryptFS passphrase used by the filesystem.
  ///there is no symmetry here, because key material is write-only
  func setPassphrase(request: Bosdyn_Api_SpotCam_SetPassphraseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetPassphraseResponse>
}

extension Bosdyn_Api_SpotCam_MediaLogServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.MediaLogService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Store":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_StoreRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_StoreResponse>(),
        interceptors: self.interceptors?.makeStoreInterceptors() ?? [],
        userFunction: self.store(request:context:)
      )

    case "GetStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        userFunction: self.getStatus(request:context:)
      )

    case "Tag":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_TagRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_TagResponse>(),
        interceptors: self.interceptors?.makeTagInterceptors() ?? [],
        userFunction: self.tag(request:context:)
      )

    case "EnableDebug":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_DebugRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_DebugResponse>(),
        interceptors: self.interceptors?.makeEnableDebugInterceptors() ?? [],
        userFunction: self.enableDebug(request:context:)
      )

    case "ListCameras":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ListCamerasRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ListCamerasResponse>(),
        interceptors: self.interceptors?.makeListCamerasInterceptors() ?? [],
        userFunction: self.listCameras(request:context:)
      )

    case "RetrieveRawData":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_RetrieveRawDataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_RetrieveRawDataResponse>(),
        interceptors: self.interceptors?.makeRetrieveRawDataInterceptors() ?? [],
        userFunction: self.retrieveRawData(request:context:)
      )

    case "Retrieve":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_RetrieveRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_RetrieveResponse>(),
        interceptors: self.interceptors?.makeRetrieveInterceptors() ?? [],
        userFunction: self.retrieve(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_DeleteRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_DeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "ListLogpoints":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ListLogpointsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ListLogpointsResponse>(),
        interceptors: self.interceptors?.makeListLogpointsInterceptors() ?? [],
        userFunction: self.listLogpoints(request:context:)
      )

    case "SetPassphrase":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetPassphraseRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetPassphraseResponse>(),
        interceptors: self.interceptors?.makeSetPassphraseInterceptors() ?? [],
        userFunction: self.setPassphrase(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_MediaLogServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'store'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_StoreRequest, Bosdyn_Api_SpotCam_StoreResponse>]

  /// - Returns: Interceptors to use when handling 'getStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetStatusRequest, Bosdyn_Api_SpotCam_GetStatusResponse>]

  /// - Returns: Interceptors to use when handling 'tag'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTagInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_TagRequest, Bosdyn_Api_SpotCam_TagResponse>]

  /// - Returns: Interceptors to use when handling 'enableDebug'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEnableDebugInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_DebugRequest, Bosdyn_Api_SpotCam_DebugResponse>]

  /// - Returns: Interceptors to use when handling 'listCameras'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListCamerasInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ListCamerasRequest, Bosdyn_Api_SpotCam_ListCamerasResponse>]

  /// - Returns: Interceptors to use when handling 'retrieveRawData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetrieveRawDataInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_RetrieveRawDataRequest, Bosdyn_Api_SpotCam_RetrieveRawDataResponse>]

  /// - Returns: Interceptors to use when handling 'retrieve'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRetrieveInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_RetrieveRequest, Bosdyn_Api_SpotCam_RetrieveResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_DeleteRequest, Bosdyn_Api_SpotCam_DeleteResponse>]

  /// - Returns: Interceptors to use when handling 'listLogpoints'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLogpointsInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ListLogpointsRequest, Bosdyn_Api_SpotCam_ListLogpointsResponse>]

  /// - Returns: Interceptors to use when handling 'setPassphrase'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPassphraseInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetPassphraseRequest, Bosdyn_Api_SpotCam_SetPassphraseResponse>]
}
/// Control real and virtual ptz mechanisms.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_PtzServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_PtzServiceServerInterceptorFactoryProtocol? { get }

  ///SetPosition points the referenced camera to a given vector (in PTZ-space)
  func setPtzPosition(request: Bosdyn_Api_SpotCam_SetPtzPositionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetPtzPositionResponse>

  ///GetPosition returns the current settings of the referenced camera
  func getPtzPosition(request: Bosdyn_Api_SpotCam_GetPtzPositionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetPtzPositionResponse>

  func setPtzVelocity(request: Bosdyn_Api_SpotCam_SetPtzVelocityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetPtzVelocityResponse>

  func getPtzVelocity(request: Bosdyn_Api_SpotCam_GetPtzVelocityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetPtzVelocityResponse>

  func listPtz(request: Bosdyn_Api_SpotCam_ListPtzRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_ListPtzResponse>

  /// Reinitializes PTZ autofocus
  func initializeLens(request: Bosdyn_Api_SpotCam_InitializeLensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_InitializeLensResponse>
}

extension Bosdyn_Api_SpotCam_PtzServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.PtzService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetPtzPosition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetPtzPositionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetPtzPositionResponse>(),
        interceptors: self.interceptors?.makeSetPtzPositionInterceptors() ?? [],
        userFunction: self.setPtzPosition(request:context:)
      )

    case "GetPtzPosition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetPtzPositionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetPtzPositionResponse>(),
        interceptors: self.interceptors?.makeGetPtzPositionInterceptors() ?? [],
        userFunction: self.getPtzPosition(request:context:)
      )

    case "SetPtzVelocity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetPtzVelocityRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetPtzVelocityResponse>(),
        interceptors: self.interceptors?.makeSetPtzVelocityInterceptors() ?? [],
        userFunction: self.setPtzVelocity(request:context:)
      )

    case "GetPtzVelocity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetPtzVelocityRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetPtzVelocityResponse>(),
        interceptors: self.interceptors?.makeGetPtzVelocityInterceptors() ?? [],
        userFunction: self.getPtzVelocity(request:context:)
      )

    case "ListPtz":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ListPtzRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ListPtzResponse>(),
        interceptors: self.interceptors?.makeListPtzInterceptors() ?? [],
        userFunction: self.listPtz(request:context:)
      )

    case "InitializeLens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_InitializeLensRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_InitializeLensResponse>(),
        interceptors: self.interceptors?.makeInitializeLensInterceptors() ?? [],
        userFunction: self.initializeLens(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_PtzServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setPtzPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPtzPositionInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetPtzPositionRequest, Bosdyn_Api_SpotCam_SetPtzPositionResponse>]

  /// - Returns: Interceptors to use when handling 'getPtzPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPtzPositionInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetPtzPositionRequest, Bosdyn_Api_SpotCam_GetPtzPositionResponse>]

  /// - Returns: Interceptors to use when handling 'setPtzVelocity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPtzVelocityInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetPtzVelocityRequest, Bosdyn_Api_SpotCam_SetPtzVelocityResponse>]

  /// - Returns: Interceptors to use when handling 'getPtzVelocity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPtzVelocityInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetPtzVelocityRequest, Bosdyn_Api_SpotCam_GetPtzVelocityResponse>]

  /// - Returns: Interceptors to use when handling 'listPtz'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPtzInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ListPtzRequest, Bosdyn_Api_SpotCam_ListPtzResponse>]

  /// - Returns: Interceptors to use when handling 'initializeLens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInitializeLensInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_InitializeLensRequest, Bosdyn_Api_SpotCam_InitializeLensResponse>]
}
/// Upload and play sounds over the SpotCam's speakers.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_AudioServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_AudioServiceServerInterceptorFactoryProtocol? { get }

  ///Given a soundRequest that identifies a single sound present in the system's sound effects table, PlaySound executes the sound effect.
  func playSound(request: Bosdyn_Api_SpotCam_PlaySoundRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_PlaySoundResponse>

  ///LoadSound loads a sound effect into the system's sound table. The stream must contain a wav file, with a RIFF header describing it.
  ///The arguement is a stream, to allow for sounds that are bigger then the MTU of the network; in this case, the complete stream must
  ///contain the entire sound. If the stream ends early, an error will be returned. The header and sound fields of the entire stream must
  ///be the same.
  func loadSound(context: UnaryResponseCallContext<Bosdyn_Api_SpotCam_LoadSoundResponse>) -> EventLoopFuture<(StreamEvent<Bosdyn_Api_SpotCam_LoadSoundRequest>) -> Void>

  ///Delete the sound identified in the argument from the system's sound table.
  func deleteSound(request: Bosdyn_Api_SpotCam_DeleteSoundRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_DeleteSoundResponse>

  ///ListSounds returns a list of all of the sound effects that the system knows about.
  func listSounds(request: Bosdyn_Api_SpotCam_ListSoundsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_ListSoundsResponse>

  /// Set the overall volume level for playing sounds.
  func setVolume(request: Bosdyn_Api_SpotCam_SetVolumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetVolumeResponse>

  /// Set the overall volume level for playing sounds.
  func getVolume(request: Bosdyn_Api_SpotCam_GetVolumeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetVolumeResponse>

  func setAudioCaptureChannel(request: Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse>

  func getAudioCaptureChannel(request: Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse>

  func setAudioCaptureGain(request: Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse>

  func getAudioCaptureGain(request: Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse>
}

extension Bosdyn_Api_SpotCam_AudioServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.AudioService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PlaySound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_PlaySoundRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_PlaySoundResponse>(),
        interceptors: self.interceptors?.makePlaySoundInterceptors() ?? [],
        userFunction: self.playSound(request:context:)
      )

    case "LoadSound":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_LoadSoundRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_LoadSoundResponse>(),
        interceptors: self.interceptors?.makeLoadSoundInterceptors() ?? [],
        observerFactory: self.loadSound(context:)
      )

    case "DeleteSound":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_DeleteSoundRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_DeleteSoundResponse>(),
        interceptors: self.interceptors?.makeDeleteSoundInterceptors() ?? [],
        userFunction: self.deleteSound(request:context:)
      )

    case "ListSounds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ListSoundsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ListSoundsResponse>(),
        interceptors: self.interceptors?.makeListSoundsInterceptors() ?? [],
        userFunction: self.listSounds(request:context:)
      )

    case "SetVolume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetVolumeResponse>(),
        interceptors: self.interceptors?.makeSetVolumeInterceptors() ?? [],
        userFunction: self.setVolume(request:context:)
      )

    case "GetVolume":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetVolumeRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetVolumeResponse>(),
        interceptors: self.interceptors?.makeGetVolumeInterceptors() ?? [],
        userFunction: self.getVolume(request:context:)
      )

    case "SetAudioCaptureChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse>(),
        interceptors: self.interceptors?.makeSetAudioCaptureChannelInterceptors() ?? [],
        userFunction: self.setAudioCaptureChannel(request:context:)
      )

    case "GetAudioCaptureChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse>(),
        interceptors: self.interceptors?.makeGetAudioCaptureChannelInterceptors() ?? [],
        userFunction: self.getAudioCaptureChannel(request:context:)
      )

    case "SetAudioCaptureGain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse>(),
        interceptors: self.interceptors?.makeSetAudioCaptureGainInterceptors() ?? [],
        userFunction: self.setAudioCaptureGain(request:context:)
      )

    case "GetAudioCaptureGain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse>(),
        interceptors: self.interceptors?.makeGetAudioCaptureGainInterceptors() ?? [],
        userFunction: self.getAudioCaptureGain(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_AudioServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'playSound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePlaySoundInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_PlaySoundRequest, Bosdyn_Api_SpotCam_PlaySoundResponse>]

  /// - Returns: Interceptors to use when handling 'loadSound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoadSoundInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_LoadSoundRequest, Bosdyn_Api_SpotCam_LoadSoundResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSound'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteSoundInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_DeleteSoundRequest, Bosdyn_Api_SpotCam_DeleteSoundResponse>]

  /// - Returns: Interceptors to use when handling 'listSounds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListSoundsInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ListSoundsRequest, Bosdyn_Api_SpotCam_ListSoundsResponse>]

  /// - Returns: Interceptors to use when handling 'setVolume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetVolumeInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetVolumeRequest, Bosdyn_Api_SpotCam_SetVolumeResponse>]

  /// - Returns: Interceptors to use when handling 'getVolume'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetVolumeInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetVolumeRequest, Bosdyn_Api_SpotCam_GetVolumeResponse>]

  /// - Returns: Interceptors to use when handling 'setAudioCaptureChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAudioCaptureChannelInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_SetAudioCaptureChannelResponse>]

  /// - Returns: Interceptors to use when handling 'getAudioCaptureChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAudioCaptureChannelInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetAudioCaptureChannelRequest, Bosdyn_Api_SpotCam_GetAudioCaptureChannelResponse>]

  /// - Returns: Interceptors to use when handling 'setAudioCaptureGain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAudioCaptureGainInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_SetAudioCaptureGainResponse>]

  /// - Returns: Interceptors to use when handling 'getAudioCaptureGain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAudioCaptureGainInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetAudioCaptureGainRequest, Bosdyn_Api_SpotCam_GetAudioCaptureGainResponse>]
}
/// Query temperature and built-in test results.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_HealthServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_HealthServiceServerInterceptorFactoryProtocol? { get }

  ///GetTemperature returns a list of thermometers in the system, and the temperature that they measure.
  func getTemperature(request: Bosdyn_Api_SpotCam_GetTemperatureRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetTemperatureResponse>

  ///GetBitStatus returns two lists; a list of system events, and a list of ways that the system is degraded;
  ///for instance, a degredation may include a missing PTZ unit, or a missing USB storage device.
  func getBITStatus(request: Bosdyn_Api_SpotCam_GetBITStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetBITStatusResponse>

  ///ClearBitEvents clears out the events list of the BITStatus structure.
  func clearBITEvents(request: Bosdyn_Api_SpotCam_ClearBITEventsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_ClearBITEventsResponse>
}

extension Bosdyn_Api_SpotCam_HealthServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.HealthService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetTemperature":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetTemperatureRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetTemperatureResponse>(),
        interceptors: self.interceptors?.makeGetTemperatureInterceptors() ?? [],
        userFunction: self.getTemperature(request:context:)
      )

    case "GetBITStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetBITStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetBITStatusResponse>(),
        interceptors: self.interceptors?.makeGetBITStatusInterceptors() ?? [],
        userFunction: self.getBITStatus(request:context:)
      )

    case "ClearBITEvents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_ClearBITEventsRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_ClearBITEventsResponse>(),
        interceptors: self.interceptors?.makeClearBITEventsInterceptors() ?? [],
        userFunction: self.clearBITEvents(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_HealthServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getTemperature'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTemperatureInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetTemperatureRequest, Bosdyn_Api_SpotCam_GetTemperatureResponse>]

  /// - Returns: Interceptors to use when handling 'getBITStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBITStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetBITStatusRequest, Bosdyn_Api_SpotCam_GetBITStatusResponse>]

  /// - Returns: Interceptors to use when handling 'clearBITEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearBITEventsInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_ClearBITEventsRequest, Bosdyn_Api_SpotCam_ClearBITEventsResponse>]
}
/// Modify or query network settings of the SpotCam and ICE resolution servers.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_NetworkServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_NetworkServiceServerInterceptorFactoryProtocol? { get }

  ///SetICEConfiguration sets up parameters for ICE, including addresses for STUN and TURN services
  func setICEConfiguration(request: Bosdyn_Api_SpotCam_SetICEConfigurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_SetICEConfigurationResponse>

  ///GetICEConfiguration retrieves currently set parameters for ICE, including addresses for STUN and TURN services
  func getICEConfiguration(request: Bosdyn_Api_SpotCam_GetICEConfigurationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetICEConfigurationResponse>
}

extension Bosdyn_Api_SpotCam_NetworkServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.NetworkService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetICEConfiguration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_SetICEConfigurationRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_SetICEConfigurationResponse>(),
        interceptors: self.interceptors?.makeSetICEConfigurationInterceptors() ?? [],
        userFunction: self.setICEConfiguration(request:context:)
      )

    case "GetICEConfiguration":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetICEConfigurationRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetICEConfigurationResponse>(),
        interceptors: self.interceptors?.makeGetICEConfigurationInterceptors() ?? [],
        userFunction: self.getICEConfiguration(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_NetworkServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setICEConfiguration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetICEConfigurationInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_SetICEConfigurationRequest, Bosdyn_Api_SpotCam_SetICEConfigurationResponse>]

  /// - Returns: Interceptors to use when handling 'getICEConfiguration'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetICEConfigurationInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetICEConfigurationRequest, Bosdyn_Api_SpotCam_GetICEConfigurationResponse>]
}
/// Query the version of the software release running on the SpotCam.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_SpotCam_VersionServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_SpotCam_VersionServiceServerInterceptorFactoryProtocol? { get }

  func getSoftwareVersion(request: Bosdyn_Api_SpotCam_GetSoftwareVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_SpotCam_GetSoftwareVersionResponse>
}

extension Bosdyn_Api_SpotCam_VersionServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.spot_cam.VersionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetSoftwareVersion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_SpotCam_GetSoftwareVersionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_SpotCam_GetSoftwareVersionResponse>(),
        interceptors: self.interceptors?.makeGetSoftwareVersionInterceptors() ?? [],
        userFunction: self.getSoftwareVersion(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_SpotCam_VersionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getSoftwareVersion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSoftwareVersionInterceptors() -> [ServerInterceptor<Bosdyn_Api_SpotCam_GetSoftwareVersionRequest, Bosdyn_Api_SpotCam_GetSoftwareVersionResponse>]
}
