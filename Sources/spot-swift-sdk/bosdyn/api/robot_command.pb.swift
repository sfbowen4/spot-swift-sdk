// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/robot_command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A command for a robot to execute.
/// The server decides if a set of commands is valid for a given robot and configuration.
public struct Bosdyn_Api_RobotCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var command: Bosdyn_Api_RobotCommand.OneOf_Command? = nil

  /// Commands which require control of entire robot.
  public var fullBodyCommand: Bosdyn_Api_FullBodyCommand.Request {
    get {
      if case .fullBodyCommand(let v)? = command {return v}
      return Bosdyn_Api_FullBodyCommand.Request()
    }
    set {command = .fullBodyCommand(newValue)}
  }

  /// A synchronized command, for partial or full control of robot.
  public var synchronizedCommand: Bosdyn_Api_SynchronizedCommand.Request {
    get {
      if case .synchronizedCommand(let v)? = command {return v}
      return Bosdyn_Api_SynchronizedCommand.Request()
    }
    set {command = .synchronizedCommand(newValue)}
  }

  /// *** Deprecation Warning ***
  /// DEPRECATED as of 2.1.0: A mobility command for a robot to execute.
  /// The following fields will be deprecated and moved to 'reserved' in a future release.
  public var mobilityCommand: Bosdyn_Api_MobilityCommand.Request {
    get {
      if case .mobilityCommand(let v)? = command {return v}
      return Bosdyn_Api_MobilityCommand.Request()
    }
    set {command = .mobilityCommand(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Command: Equatable {
    /// Commands which require control of entire robot.
    case fullBodyCommand(Bosdyn_Api_FullBodyCommand.Request)
    /// A synchronized command, for partial or full control of robot.
    case synchronizedCommand(Bosdyn_Api_SynchronizedCommand.Request)
    /// *** Deprecation Warning ***
    /// DEPRECATED as of 2.1.0: A mobility command for a robot to execute.
    /// The following fields will be deprecated and moved to 'reserved' in a future release.
    case mobilityCommand(Bosdyn_Api_MobilityCommand.Request)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_RobotCommand.OneOf_Command, rhs: Bosdyn_Api_RobotCommand.OneOf_Command) -> Bool {
      switch (lhs, rhs) {
      case (.fullBodyCommand(let l), .fullBodyCommand(let r)): return l == r
      case (.synchronizedCommand(let l), .synchronizedCommand(let r)): return l == r
      case (.mobilityCommand(let l), .mobilityCommand(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Command specific feedback. Distance to goal, estimated time remaining, probability of
/// success, etc. Note that the feedback should directly mirror the command request.
public struct Bosdyn_Api_RobotCommandFeedback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var command: Bosdyn_Api_RobotCommandFeedback.OneOf_Command? = nil

  /// Commands which require control of entire robot.
  public var fullBodyFeedback: Bosdyn_Api_FullBodyCommand.Feedback {
    get {
      if case .fullBodyFeedback(let v)? = command {return v}
      return Bosdyn_Api_FullBodyCommand.Feedback()
    }
    set {command = .fullBodyFeedback(newValue)}
  }

  /// A synchronized command, for partial or full control of robot.
  public var synchronizedFeedback: Bosdyn_Api_SynchronizedCommand.Feedback {
    get {
      if case .synchronizedFeedback(let v)? = command {return v}
      return Bosdyn_Api_SynchronizedCommand.Feedback()
    }
    set {command = .synchronizedFeedback(newValue)}
  }

  /// *** Deprecation Warning ***
  /// DEPRECATED as of 2.1.0: Command to control mobility system of a robot.
  /// The following fields will be deprecated and moved to 'reserved' in a future release.
  public var mobilityFeedback: Bosdyn_Api_MobilityCommand.Feedback {
    get {
      if case .mobilityFeedback(let v)? = command {return v}
      return Bosdyn_Api_MobilityCommand.Feedback()
    }
    set {command = .mobilityFeedback(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Command: Equatable {
    /// Commands which require control of entire robot.
    case fullBodyFeedback(Bosdyn_Api_FullBodyCommand.Feedback)
    /// A synchronized command, for partial or full control of robot.
    case synchronizedFeedback(Bosdyn_Api_SynchronizedCommand.Feedback)
    /// *** Deprecation Warning ***
    /// DEPRECATED as of 2.1.0: Command to control mobility system of a robot.
    /// The following fields will be deprecated and moved to 'reserved' in a future release.
    case mobilityFeedback(Bosdyn_Api_MobilityCommand.Feedback)

  #if !swift(>=4.1)
    public static func ==(lhs: Bosdyn_Api_RobotCommandFeedback.OneOf_Command, rhs: Bosdyn_Api_RobotCommandFeedback.OneOf_Command) -> Bool {
      switch (lhs, rhs) {
      case (.fullBodyFeedback(let l), .fullBodyFeedback(let r)): return l == r
      case (.synchronizedFeedback(let l), .synchronizedFeedback(let r)): return l == r
      case (.mobilityFeedback(let l), .mobilityFeedback(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// A RobotCommand request message includes the lease and command as well as a clock
/// identifier to ensure timesync when issuing commands with a fixed length.
public struct Bosdyn_Api_RobotCommandRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The Lease to show ownership of the robot.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// A command for a robot to execute. A command can be comprised of several subcommands.
  public var command: Bosdyn_Api_RobotCommand {
    get {return _command ?? Bosdyn_Api_RobotCommand()}
    set {_command = newValue}
  }
  /// Returns true if `command` has been explicitly set.
  public var hasCommand: Bool {return self._command != nil}
  /// Clears the value of `command`. Subsequent reads from it will return its default value.
  public mutating func clearCommand() {self._command = nil}

  /// Identifier provided by the time sync service to verify time sync between robot and client.
  public var clockIdentifier: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
  fileprivate var _command: Bosdyn_Api_RobotCommand? = nil
}

/// The RobotCommand response message contains a robot command id that can be used to poll the
/// robot command service for feedback on the state of the command.
public struct Bosdyn_Api_RobotCommandResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Details about how the lease was used.
  public var leaseUseResult: Bosdyn_Api_LeaseUseResult {
    get {return _leaseUseResult ?? Bosdyn_Api_LeaseUseResult()}
    set {_leaseUseResult = newValue}
  }
  /// Returns true if `leaseUseResult` has been explicitly set.
  public var hasLeaseUseResult: Bool {return self._leaseUseResult != nil}
  /// Clears the value of `leaseUseResult`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseUseResult() {self._leaseUseResult = nil}

  /// Return status for a request.
  public var status: Bosdyn_Api_RobotCommandResponse.Status = .unknown

  /// Human-readable error description.  Not for programmatic analysis.
  public var message: String = String()

  /// Unique identifier for the command, If empty, command was not accepted.
  public var robotCommandID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unknown / unexpected error occurred.
    case unknown // = 0

    /// Request was accepted.
    case ok // = 1

    /// [Programming Error] Request was invalid / malformed in some way.
    case invalidRequest // = 2

    /// [Programming Error] The robot does not understand this command.
    case unsupported // = 3

    /// [Timesync Error] Client has not done timesync with robot.
    case noTimesync // = 4

    /// [Timesync Error] The command was received after its end_time had already passed.
    case expired // = 5

    /// [Timesync Error] The command end time was too far in the future.
    case tooDistant // = 6

    /// [Hardware Error] The robot must be powered on to accept a command.
    case notPoweredOn // = 7

    /// [Robot State Error] The robot must not have behavior faults.
    case behaviorFault // = 9

    /// [Frame Error] The frame_name for a command was not a known frame.
    case unknownFrame // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .invalidRequest
      case 3: self = .unsupported
      case 4: self = .noTimesync
      case 5: self = .expired
      case 6: self = .tooDistant
      case 7: self = .notPoweredOn
      case 8: self = .unknownFrame
      case 9: self = .behaviorFault
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .invalidRequest: return 2
      case .unsupported: return 3
      case .noTimesync: return 4
      case .expired: return 5
      case .tooDistant: return 6
      case .notPoweredOn: return 7
      case .unknownFrame: return 8
      case .behaviorFault: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _leaseUseResult: Bosdyn_Api_LeaseUseResult? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_RobotCommandResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_RobotCommandResponse.Status] = [
    .unknown,
    .ok,
    .invalidRequest,
    .unsupported,
    .noTimesync,
    .expired,
    .tooDistant,
    .notPoweredOn,
    .behaviorFault,
    .unknownFrame,
  ]
}

#endif  // swift(>=4.2)

/// The RobotCommandFeedback request message, which can get the feedback for a specific
/// robot command id number.
public struct Bosdyn_Api_RobotCommandFeedbackRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Unique identifier for the command, provided by StartRequest.
  public var robotCommandID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

/// The RobotCommandFeedback response message, which contains the progress of the robot command.
public struct Bosdyn_Api_RobotCommandFeedbackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// DEPRECATED as of 2.1.0: General status whether or not command is still processing.
  public var status: Bosdyn_Api_RobotCommandFeedbackResponse.Status = .unknown

  /// DEPRECATED as of 2.1.0: Human-readable status message.  Not for programmatic analysis.
  public var message: String = String()

  /// Command specific feedback.
  public var feedback: Bosdyn_Api_RobotCommandFeedback {
    get {return _feedback ?? Bosdyn_Api_RobotCommandFeedback()}
    set {_feedback = newValue}
  }
  /// Returns true if `feedback` has been explicitly set.
  public var hasFeedback: Bool {return self._feedback != nil}
  /// Clears the value of `feedback`. Subsequent reads from it will return its default value.
  public mutating func clearFeedback() {self._feedback = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Status enum is DEPRECATED as of 2.1.0. Behavior execution is in an unknown / unexpected state.
    case unknown // = 0

    /// Status enum is DEPRECATED as of 2.1.0. The robot is actively working on the command
    case processing // = 1

    /// Status enum is DEPRECATED as of 2.1.0. The command was replaced by a new command
    case commandOverridden // = 2

    /// Status enum is DEPRECATED as of 2.1.0. The command expired
    case commandTimedOut // = 3

    /// Status enum is DEPRECATED as of 2.1.0. The robot is in an unsafe state, and will only respond to known safe commands.
    case robotFrozen // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .processing
      case 2: self = .commandOverridden
      case 3: self = .commandTimedOut
      case 4: self = .robotFrozen
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .processing: return 1
      case .commandOverridden: return 2
      case .commandTimedOut: return 3
      case .robotFrozen: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _feedback: Bosdyn_Api_RobotCommandFeedback? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_RobotCommandFeedbackResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_RobotCommandFeedbackResponse.Status] = [
    .unknown,
    .processing,
    .commandOverridden,
    .commandTimedOut,
    .robotFrozen,
  ]
}

#endif  // swift(>=4.2)

/// A ClearBehaviorFault request message has the associated behavior fault id to be cleared.
public struct Bosdyn_Api_ClearBehaviorFaultRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The Lease to show ownership of the robot.
  public var lease: Bosdyn_Api_Lease {
    get {return _lease ?? Bosdyn_Api_Lease()}
    set {_lease = newValue}
  }
  /// Returns true if `lease` has been explicitly set.
  public var hasLease: Bool {return self._lease != nil}
  /// Clears the value of `lease`. Subsequent reads from it will return its default value.
  public mutating func clearLease() {self._lease = nil}

  /// Unique identifier for the error
  public var behaviorFaultID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _lease: Bosdyn_Api_Lease? = nil
}

/// A ClearBehaviorFault response message has status indicating whether the service cleared
/// the fault or not.
public struct Bosdyn_Api_ClearBehaviorFaultResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Details about how the lease was used.
  public var leaseUseResult: Bosdyn_Api_LeaseUseResult {
    get {return _leaseUseResult ?? Bosdyn_Api_LeaseUseResult()}
    set {_leaseUseResult = newValue}
  }
  /// Returns true if `leaseUseResult` has been explicitly set.
  public var hasLeaseUseResult: Bool {return self._leaseUseResult != nil}
  /// Clears the value of `leaseUseResult`. Subsequent reads from it will return its default value.
  public mutating func clearLeaseUseResult() {self._leaseUseResult = nil}

  /// Return status for a request.
  public var status: Bosdyn_Api_ClearBehaviorFaultResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unknown / unexpected error occurred.
    case unknown // = 0

    /// The BehaviorFault has been cleared.
    case cleared // = 1

    /// The BehaviorFault could not be cleared.
    case notCleared // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .cleared
      case 2: self = .notCleared
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .cleared: return 1
      case .notCleared: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _leaseUseResult: Bosdyn_Api_LeaseUseResult? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_ClearBehaviorFaultResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_ClearBehaviorFaultResponse.Status] = [
    .unknown,
    .cleared,
    .notCleared,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_RobotCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "full_body_command"),
    3: .standard(proto: "synchronized_command"),
    2: .standard(proto: "mobility_command"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_FullBodyCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .fullBodyCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .fullBodyCommand(v)}
      case 2:
        var v: Bosdyn_Api_MobilityCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .mobilityCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .mobilityCommand(v)}
      case 3:
        var v: Bosdyn_Api_SynchronizedCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .synchronizedCommand(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .synchronizedCommand(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.command {
    case .fullBodyCommand(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .mobilityCommand(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .synchronizedCommand(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommand, rhs: Bosdyn_Api_RobotCommand) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandFeedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommandFeedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "full_body_feedback"),
    3: .standard(proto: "synchronized_feedback"),
    1: .standard(proto: "mobility_feedback"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_MobilityCommand.Feedback?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .mobilityFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .mobilityFeedback(v)}
      case 2:
        var v: Bosdyn_Api_FullBodyCommand.Feedback?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .fullBodyFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .fullBodyFeedback(v)}
      case 3:
        var v: Bosdyn_Api_SynchronizedCommand.Feedback?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .synchronizedFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .synchronizedFeedback(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.command {
    case .mobilityFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .fullBodyFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .synchronizedFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommandFeedback, rhs: Bosdyn_Api_RobotCommandFeedback) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommandRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
    3: .same(proto: "command"),
    4: .standard(proto: "clock_identifier"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      case 3: try decoder.decodeSingularMessageField(value: &self._command)
      case 4: try decoder.decodeSingularStringField(value: &self.clockIdentifier)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._command {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.clockIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.clockIdentifier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommandRequest, rhs: Bosdyn_Api_RobotCommandRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs._command != rhs._command {return false}
    if lhs.clockIdentifier != rhs.clockIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommandResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "lease_use_result"),
    3: .same(proto: "status"),
    4: .same(proto: "message"),
    5: .standard(proto: "robot_command_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._leaseUseResult)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      case 4: try decoder.decodeSingularStringField(value: &self.message)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.robotCommandID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._leaseUseResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 4)
    }
    if self.robotCommandID != 0 {
      try visitor.visitSingularUInt32Field(value: self.robotCommandID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommandResponse, rhs: Bosdyn_Api_RobotCommandResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._leaseUseResult != rhs._leaseUseResult {return false}
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs.robotCommandID != rhs.robotCommandID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_INVALID_REQUEST"),
    3: .same(proto: "STATUS_UNSUPPORTED"),
    4: .same(proto: "STATUS_NO_TIMESYNC"),
    5: .same(proto: "STATUS_EXPIRED"),
    6: .same(proto: "STATUS_TOO_DISTANT"),
    7: .same(proto: "STATUS_NOT_POWERED_ON"),
    8: .same(proto: "STATUS_UNKNOWN_FRAME"),
    9: .same(proto: "STATUS_BEHAVIOR_FAULT"),
  ]
}

extension Bosdyn_Api_RobotCommandFeedbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommandFeedbackRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "robot_command_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.robotCommandID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.robotCommandID != 0 {
      try visitor.visitSingularUInt32Field(value: self.robotCommandID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommandFeedbackRequest, rhs: Bosdyn_Api_RobotCommandFeedbackRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.robotCommandID != rhs.robotCommandID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandFeedbackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RobotCommandFeedbackResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .same(proto: "message"),
    4: .same(proto: "feedback"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      case 4: try decoder.decodeSingularMessageField(value: &self._feedback)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if let v = self._feedback {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_RobotCommandFeedbackResponse, rhs: Bosdyn_Api_RobotCommandFeedbackResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.message != rhs.message {return false}
    if lhs._feedback != rhs._feedback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_RobotCommandFeedbackResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_PROCESSING"),
    2: .same(proto: "STATUS_COMMAND_OVERRIDDEN"),
    3: .same(proto: "STATUS_COMMAND_TIMED_OUT"),
    4: .same(proto: "STATUS_ROBOT_FROZEN"),
  ]
}

extension Bosdyn_Api_ClearBehaviorFaultRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClearBehaviorFaultRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "lease"),
    3: .standard(proto: "behavior_fault_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._lease)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.behaviorFaultID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lease {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.behaviorFaultID != 0 {
      try visitor.visitSingularUInt32Field(value: self.behaviorFaultID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClearBehaviorFaultRequest, rhs: Bosdyn_Api_ClearBehaviorFaultRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._lease != rhs._lease {return false}
    if lhs.behaviorFaultID != rhs.behaviorFaultID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClearBehaviorFaultResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClearBehaviorFaultResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "lease_use_result"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._leaseUseResult)
      case 3: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._leaseUseResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ClearBehaviorFaultResponse, rhs: Bosdyn_Api_ClearBehaviorFaultResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._leaseUseResult != rhs._leaseUseResult {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ClearBehaviorFaultResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_CLEARED"),
    2: .same(proto: "STATUS_NOT_CLEARED"),
  ]
}
