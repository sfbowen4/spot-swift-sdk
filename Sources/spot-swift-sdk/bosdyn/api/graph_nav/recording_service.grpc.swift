//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/graph_nav/recording_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The recording service can be used to record a Graph Nav map (containing waypoints and edges).
/// The recorded map can consist of the following:
/// * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
/// but at most 2 edges attached to it.
/// * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
/// When recording a map using the recording service, a common pattern is:
/// * Call StartRecording to begin recording a chain of waypoints.
/// * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
/// * While recording, call GetRecordStatus to get feedback on the state of the recording service.
/// * While recording, call GetMapStatus to determine what waypoints have been created.
/// * Optionally call CreateWaypoint to create waypoints in specific locations.
/// * Call StopRecording to pause the recording service and create branches.
/// * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpc's
/// from the GraphNavService to download the large sensor data with the map.
///
/// Usage: instantiate `Bosdyn_Api_GraphNav_GraphNavRecordingServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientInterceptorFactoryProtocol? { get }

  func startRecording(
    _ request: Bosdyn_Api_GraphNav_StartRecordingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_StartRecordingRequest, Bosdyn_Api_GraphNav_StartRecordingResponse>

  func stopRecording(
    _ request: Bosdyn_Api_GraphNav_StopRecordingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_StopRecordingRequest, Bosdyn_Api_GraphNav_StopRecordingResponse>

  func createWaypoint(
    _ request: Bosdyn_Api_GraphNav_CreateWaypointRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_CreateWaypointRequest, Bosdyn_Api_GraphNav_CreateWaypointResponse>

  func setRecordingEnvironment(
    _ request: Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest, Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse>

  func createEdge(
    _ request: Bosdyn_Api_GraphNav_CreateEdgeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_CreateEdgeRequest, Bosdyn_Api_GraphNav_CreateEdgeResponse>

  func getRecordStatus(
    _ request: Bosdyn_Api_GraphNav_GetRecordStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_GetRecordStatusRequest, Bosdyn_Api_GraphNav_GetRecordStatusResponse>
}

extension Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.graph_nav.GraphNavRecordingService"
  }

  /// Start recording the map from the current localization.
  /// Creates a waypoint if you are starting to record. Otherwise, waits until you are
  /// sufficiently far away from the previous waypoint.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartRecording.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startRecording(
    _ request: Bosdyn_Api_GraphNav_StartRecordingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_StartRecordingRequest, Bosdyn_Api_GraphNav_StartRecordingResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartRecordingInterceptors() ?? []
    )
  }

  /// Stop recording the map from the current localization.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopRecording.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stopRecording(
    _ request: Bosdyn_Api_GraphNav_StopRecordingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_StopRecordingRequest, Bosdyn_Api_GraphNav_StopRecordingResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopRecordingInterceptors() ?? []
    )
  }

  /// Create a new waypoint at the current localization.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateWaypoint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createWaypoint(
    _ request: Bosdyn_Api_GraphNav_CreateWaypointRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_CreateWaypointRequest, Bosdyn_Api_GraphNav_CreateWaypointResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateWaypointInterceptors() ?? []
    )
  }

  /// Set the environmnent and name prefix to use for the recording.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetRecordingEnvironment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setRecordingEnvironment(
    _ request: Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest, Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetRecordingEnvironmentInterceptors() ?? []
    )
  }

  /// Create an arbitrary edge between two waypoints.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateEdge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createEdge(
    _ request: Bosdyn_Api_GraphNav_CreateEdgeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_CreateEdgeRequest, Bosdyn_Api_GraphNav_CreateEdgeResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEdgeInterceptors() ?? []
    )
  }

  /// Tells the client the internal state of the record service, and the structure of the map that has been recorded
  /// so far.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRecordStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getRecordStatus(
    _ request: Bosdyn_Api_GraphNav_GetRecordStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_GetRecordStatusRequest, Bosdyn_Api_GraphNav_GetRecordStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRecordStatusInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'startRecording'.
  func makeStartRecordingInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_StartRecordingRequest, Bosdyn_Api_GraphNav_StartRecordingResponse>]

  /// - Returns: Interceptors to use when invoking 'stopRecording'.
  func makeStopRecordingInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_StopRecordingRequest, Bosdyn_Api_GraphNav_StopRecordingResponse>]

  /// - Returns: Interceptors to use when invoking 'createWaypoint'.
  func makeCreateWaypointInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_CreateWaypointRequest, Bosdyn_Api_GraphNav_CreateWaypointResponse>]

  /// - Returns: Interceptors to use when invoking 'setRecordingEnvironment'.
  func makeSetRecordingEnvironmentInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest, Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse>]

  /// - Returns: Interceptors to use when invoking 'createEdge'.
  func makeCreateEdgeInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_CreateEdgeRequest, Bosdyn_Api_GraphNav_CreateEdgeResponse>]

  /// - Returns: Interceptors to use when invoking 'getRecordStatus'.
  func makeGetRecordStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_GetRecordStatusRequest, Bosdyn_Api_GraphNav_GetRecordStatusResponse>]
}

public final class Bosdyn_Api_GraphNav_GraphNavRecordingServiceClient: Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.graph_nav.GraphNavRecordingService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_GraphNav_GraphNavRecordingServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The recording service can be used to record a Graph Nav map (containing waypoints and edges).
/// The recorded map can consist of the following:
/// * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
/// but at most 2 edges attached to it.
/// * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
/// When recording a map using the recording service, a common pattern is:
/// * Call StartRecording to begin recording a chain of waypoints.
/// * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
/// * While recording, call GetRecordStatus to get feedback on the state of the recording service.
/// * While recording, call GetMapStatus to determine what waypoints have been created.
/// * Optionally call CreateWaypoint to create waypoints in specific locations.
/// * Call StopRecording to pause the recording service and create branches.
/// * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpc's
/// from the GraphNavService to download the large sensor data with the map.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_GraphNav_GraphNavRecordingServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_GraphNav_GraphNavRecordingServiceServerInterceptorFactoryProtocol? { get }

  /// Start recording the map from the current localization.
  /// Creates a waypoint if you are starting to record. Otherwise, waits until you are
  /// sufficiently far away from the previous waypoint.
  func startRecording(request: Bosdyn_Api_GraphNav_StartRecordingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_StartRecordingResponse>

  /// Stop recording the map from the current localization.
  func stopRecording(request: Bosdyn_Api_GraphNav_StopRecordingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_StopRecordingResponse>

  /// Create a new waypoint at the current localization.
  func createWaypoint(request: Bosdyn_Api_GraphNav_CreateWaypointRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_CreateWaypointResponse>

  /// Set the environmnent and name prefix to use for the recording.
  func setRecordingEnvironment(request: Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse>

  /// Create an arbitrary edge between two waypoints.
  func createEdge(request: Bosdyn_Api_GraphNav_CreateEdgeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_CreateEdgeResponse>

  /// Tells the client the internal state of the record service, and the structure of the map that has been recorded
  /// so far.
  func getRecordStatus(request: Bosdyn_Api_GraphNav_GetRecordStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_GetRecordStatusResponse>
}

extension Bosdyn_Api_GraphNav_GraphNavRecordingServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.graph_nav.GraphNavRecordingService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StartRecording":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_StartRecordingRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_StartRecordingResponse>(),
        interceptors: self.interceptors?.makeStartRecordingInterceptors() ?? [],
        userFunction: self.startRecording(request:context:)
      )

    case "StopRecording":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_StopRecordingRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_StopRecordingResponse>(),
        interceptors: self.interceptors?.makeStopRecordingInterceptors() ?? [],
        userFunction: self.stopRecording(request:context:)
      )

    case "CreateWaypoint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_CreateWaypointRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_CreateWaypointResponse>(),
        interceptors: self.interceptors?.makeCreateWaypointInterceptors() ?? [],
        userFunction: self.createWaypoint(request:context:)
      )

    case "SetRecordingEnvironment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse>(),
        interceptors: self.interceptors?.makeSetRecordingEnvironmentInterceptors() ?? [],
        userFunction: self.setRecordingEnvironment(request:context:)
      )

    case "CreateEdge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_CreateEdgeRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_CreateEdgeResponse>(),
        interceptors: self.interceptors?.makeCreateEdgeInterceptors() ?? [],
        userFunction: self.createEdge(request:context:)
      )

    case "GetRecordStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_GetRecordStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_GetRecordStatusResponse>(),
        interceptors: self.interceptors?.makeGetRecordStatusInterceptors() ?? [],
        userFunction: self.getRecordStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_GraphNav_GraphNavRecordingServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'startRecording'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartRecordingInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_StartRecordingRequest, Bosdyn_Api_GraphNav_StartRecordingResponse>]

  /// - Returns: Interceptors to use when handling 'stopRecording'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopRecordingInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_StopRecordingRequest, Bosdyn_Api_GraphNav_StopRecordingResponse>]

  /// - Returns: Interceptors to use when handling 'createWaypoint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateWaypointInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_CreateWaypointRequest, Bosdyn_Api_GraphNav_CreateWaypointResponse>]

  /// - Returns: Interceptors to use when handling 'setRecordingEnvironment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetRecordingEnvironmentInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_SetRecordingEnvironmentRequest, Bosdyn_Api_GraphNav_SetRecordingEnvironmentResponse>]

  /// - Returns: Interceptors to use when handling 'createEdge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateEdgeInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_CreateEdgeRequest, Bosdyn_Api_GraphNav_CreateEdgeResponse>]

  /// - Returns: Interceptors to use when handling 'getRecordStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRecordStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_GetRecordStatusRequest, Bosdyn_Api_GraphNav_GetRecordStatusResponse>]
}
