// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/graph_nav/nav.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Route that the robot should follow or is currently following.
public struct Bosdyn_Api_GraphNav_Route {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ordered list of waypoints to traverse, starting from index 0.
  public var waypointID: [String] = []

  /// Ordered list of edges to traverse between those waypoints.
  public var edgeID: [Bosdyn_Api_GraphNav_Edge.Id] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The localization state of the robot. This reports the pose of the robot relative
/// to a particular waypoint on the graph nav map.
public struct Bosdyn_Api_GraphNav_Localization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Waypoint this localization is relative to.
  public var waypointID: String = String()

  /// Pose of body in waypoint frame.
  public var waypointTformBody: Bosdyn_Api_SE3Pose {
    get {return _waypointTformBody ?? Bosdyn_Api_SE3Pose()}
    set {_waypointTformBody = newValue}
  }
  /// Returns true if `waypointTformBody` has been explicitly set.
  public var hasWaypointTformBody: Bool {return self._waypointTformBody != nil}
  /// Clears the value of `waypointTformBody`. Subsequent reads from it will return its default value.
  public mutating func clearWaypointTformBody() {self._waypointTformBody = nil}

  /// Pose of body to starting fiducial frame (origin).
  public var seedTformBody: Bosdyn_Api_SE3Pose {
    get {return _seedTformBody ?? Bosdyn_Api_SE3Pose()}
    set {_seedTformBody = newValue}
  }
  /// Returns true if `seedTformBody` has been explicitly set.
  public var hasSeedTformBody: Bool {return self._seedTformBody != nil}
  /// Clears the value of `seedTformBody`. Subsequent reads from it will return its default value.
  public mutating func clearSeedTformBody() {self._seedTformBody = nil}

  /// Time (in robot time basis) that this localization was valid.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _waypointTformBody: Bosdyn_Api_SE3Pose? = nil
  fileprivate var _seedTformBody: Bosdyn_Api_SE3Pose? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api.graph_nav"

extension Bosdyn_Api_GraphNav_Route: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Route"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "waypoint_id"),
    3: .standard(proto: "edge_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedStringField(value: &self.waypointID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.edgeID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.waypointID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.waypointID, fieldNumber: 2)
    }
    if !self.edgeID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.edgeID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GraphNav_Route, rhs: Bosdyn_Api_GraphNav_Route) -> Bool {
    if lhs.waypointID != rhs.waypointID {return false}
    if lhs.edgeID != rhs.edgeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GraphNav_Localization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Localization"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "waypoint_id"),
    2: .standard(proto: "waypoint_tform_body"),
    5: .standard(proto: "seed_tform_body"),
    3: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.waypointID)
      case 2: try decoder.decodeSingularMessageField(value: &self._waypointTformBody)
      case 3: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 5: try decoder.decodeSingularMessageField(value: &self._seedTformBody)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.waypointID.isEmpty {
      try visitor.visitSingularStringField(value: self.waypointID, fieldNumber: 1)
    }
    if let v = self._waypointTformBody {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._seedTformBody {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GraphNav_Localization, rhs: Bosdyn_Api_GraphNav_Localization) -> Bool {
    if lhs.waypointID != rhs.waypointID {return false}
    if lhs._waypointTformBody != rhs._waypointTformBody {return false}
    if lhs._seedTformBody != rhs._seedTformBody {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
