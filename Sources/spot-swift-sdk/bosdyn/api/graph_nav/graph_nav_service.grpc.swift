//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/graph_nav/graph_nav_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The GraphNav service service is a place-based localization and locomotion service. The service can
/// be used to get/set the localization, upload and download the current graph nav maps, and send navigation
/// requests to move around the map.
///
/// Usage: instantiate `Bosdyn_Api_GraphNav_GraphNavServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_GraphNav_GraphNavServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_GraphNav_GraphNavServiceClientInterceptorFactoryProtocol? { get }

  func setLocalization(
    _ request: Bosdyn_Api_GraphNav_SetLocalizationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_SetLocalizationRequest, Bosdyn_Api_GraphNav_SetLocalizationResponse>

  func navigateRoute(
    _ request: Bosdyn_Api_GraphNav_NavigateRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigateRouteRequest, Bosdyn_Api_GraphNav_NavigateRouteResponse>

  func navigateTo(
    _ request: Bosdyn_Api_GraphNav_NavigateToRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigateToRequest, Bosdyn_Api_GraphNav_NavigateToResponse>

  func navigationFeedback(
    _ request: Bosdyn_Api_GraphNav_NavigationFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigationFeedbackRequest, Bosdyn_Api_GraphNav_NavigationFeedbackResponse>

  func getLocalizationState(
    _ request: Bosdyn_Api_GraphNav_GetLocalizationStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_GetLocalizationStateRequest, Bosdyn_Api_GraphNav_GetLocalizationStateResponse>

  func clearGraph(
    _ request: Bosdyn_Api_GraphNav_ClearGraphRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_ClearGraphRequest, Bosdyn_Api_GraphNav_ClearGraphResponse>

  func downloadGraph(
    _ request: Bosdyn_Api_GraphNav_DownloadGraphRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_DownloadGraphRequest, Bosdyn_Api_GraphNav_DownloadGraphResponse>

  func uploadGraph(
    _ request: Bosdyn_Api_GraphNav_UploadGraphRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GraphNav_UploadGraphRequest, Bosdyn_Api_GraphNav_UploadGraphResponse>

  func uploadWaypointSnapshot(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse>

  func uploadEdgeSnapshot(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse>

  func downloadWaypointSnapshot(
    _ request: Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse>

  func downloadEdgeSnapshot(
    _ request: Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse>
}

extension Bosdyn_Api_GraphNav_GraphNavServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.graph_nav.GraphNavService"
  }

  /// Trigger a manual localization. Typically done to provide the initial localization.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLocalization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLocalization(
    _ request: Bosdyn_Api_GraphNav_SetLocalizationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_SetLocalizationRequest, Bosdyn_Api_GraphNav_SetLocalizationResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/SetLocalization",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLocalizationInterceptors() ?? []
    )
  }

  /// Tell GraphNav to navigate/traverse a given route.
  ///
  /// - Parameters:
  ///   - request: Request to send to NavigateRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func navigateRoute(
    _ request: Bosdyn_Api_GraphNav_NavigateRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigateRouteRequest, Bosdyn_Api_GraphNav_NavigateRouteResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/NavigateRoute",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavigateRouteInterceptors() ?? []
    )
  }

  /// Tell GraphNav to navigate to a waypoint along a route it chooses.
  ///
  /// - Parameters:
  ///   - request: Request to send to NavigateTo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func navigateTo(
    _ request: Bosdyn_Api_GraphNav_NavigateToRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigateToRequest, Bosdyn_Api_GraphNav_NavigateToResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/NavigateTo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavigateToInterceptors() ?? []
    )
  }

  /// Get feedback on active navigation command.
  ///
  /// - Parameters:
  ///   - request: Request to send to NavigationFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func navigationFeedback(
    _ request: Bosdyn_Api_GraphNav_NavigationFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_NavigationFeedbackRequest, Bosdyn_Api_GraphNav_NavigationFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNavigationFeedbackInterceptors() ?? []
    )
  }

  /// Get the localization status and data.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLocalizationState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLocalizationState(
    _ request: Bosdyn_Api_GraphNav_GetLocalizationStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_GetLocalizationStateRequest, Bosdyn_Api_GraphNav_GetLocalizationStateResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLocalizationStateInterceptors() ?? []
    )
  }

  /// Clears the local graph structure. Also erases any snapshots currently in RAM.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearGraph.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clearGraph(
    _ request: Bosdyn_Api_GraphNav_ClearGraphRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_ClearGraphRequest, Bosdyn_Api_GraphNav_ClearGraphResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/ClearGraph",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearGraphInterceptors() ?? []
    )
  }

  /// Download the graph structure.
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadGraph.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func downloadGraph(
    _ request: Bosdyn_Api_GraphNav_DownloadGraphRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_DownloadGraphRequest, Bosdyn_Api_GraphNav_DownloadGraphResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/DownloadGraph",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadGraphInterceptors() ?? []
    )
  }

  /// Upload the full list of waypoint IDs, graph topology and other small info.
  ///
  /// - Parameters:
  ///   - request: Request to send to UploadGraph.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func uploadGraph(
    _ request: Bosdyn_Api_GraphNav_UploadGraphRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GraphNav_UploadGraphRequest, Bosdyn_Api_GraphNav_UploadGraphResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/UploadGraph",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadGraphInterceptors() ?? []
    )
  }

  /// Uploads large waypoint snapshot as a stream for a particular waypoint.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func uploadWaypointSnapshot(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse> {
    return self.makeClientStreamingCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/UploadWaypointSnapshot",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadWaypointSnapshotInterceptors() ?? []
    )
  }

  /// Uploads large edge snapshot as a stream for a particular edge.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func uploadEdgeSnapshot(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse> {
    return self.makeClientStreamingCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/UploadEdgeSnapshot",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadEdgeSnapshotInterceptors() ?? []
    )
  }

  /// Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadWaypointSnapshot.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func downloadWaypointSnapshot(
    _ request: Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse> {
    return self.makeServerStreamingCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/DownloadWaypointSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadWaypointSnapshotInterceptors() ?? [],
      handler: handler
    )
  }

  /// Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
  ///
  /// - Parameters:
  ///   - request: Request to send to DownloadEdgeSnapshot.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func downloadEdgeSnapshot(
    _ request: Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse) -> Void
  ) -> ServerStreamingCall<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse> {
    return self.makeServerStreamingCall(
      path: "/bosdyn.api.graph_nav.GraphNavService/DownloadEdgeSnapshot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDownloadEdgeSnapshotInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Bosdyn_Api_GraphNav_GraphNavServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setLocalization'.
  func makeSetLocalizationInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_SetLocalizationRequest, Bosdyn_Api_GraphNav_SetLocalizationResponse>]

  /// - Returns: Interceptors to use when invoking 'navigateRoute'.
  func makeNavigateRouteInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_NavigateRouteRequest, Bosdyn_Api_GraphNav_NavigateRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'navigateTo'.
  func makeNavigateToInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_NavigateToRequest, Bosdyn_Api_GraphNav_NavigateToResponse>]

  /// - Returns: Interceptors to use when invoking 'navigationFeedback'.
  func makeNavigationFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_NavigationFeedbackRequest, Bosdyn_Api_GraphNav_NavigationFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'getLocalizationState'.
  func makeGetLocalizationStateInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_GetLocalizationStateRequest, Bosdyn_Api_GraphNav_GetLocalizationStateResponse>]

  /// - Returns: Interceptors to use when invoking 'clearGraph'.
  func makeClearGraphInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_ClearGraphRequest, Bosdyn_Api_GraphNav_ClearGraphResponse>]

  /// - Returns: Interceptors to use when invoking 'downloadGraph'.
  func makeDownloadGraphInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_DownloadGraphRequest, Bosdyn_Api_GraphNav_DownloadGraphResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadGraph'.
  func makeUploadGraphInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_UploadGraphRequest, Bosdyn_Api_GraphNav_UploadGraphResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadWaypointSnapshot'.
  func makeUploadWaypointSnapshotInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadEdgeSnapshot'.
  func makeUploadEdgeSnapshotInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse>]

  /// - Returns: Interceptors to use when invoking 'downloadWaypointSnapshot'.
  func makeDownloadWaypointSnapshotInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse>]

  /// - Returns: Interceptors to use when invoking 'downloadEdgeSnapshot'.
  func makeDownloadEdgeSnapshotInterceptors() -> [ClientInterceptor<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse>]
}

public final class Bosdyn_Api_GraphNav_GraphNavServiceClient: Bosdyn_Api_GraphNav_GraphNavServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_GraphNav_GraphNavServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.graph_nav.GraphNavService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_GraphNav_GraphNavServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The GraphNav service service is a place-based localization and locomotion service. The service can
/// be used to get/set the localization, upload and download the current graph nav maps, and send navigation
/// requests to move around the map.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_GraphNav_GraphNavServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_GraphNav_GraphNavServiceServerInterceptorFactoryProtocol? { get }

  /// Trigger a manual localization. Typically done to provide the initial localization.
  func setLocalization(request: Bosdyn_Api_GraphNav_SetLocalizationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_SetLocalizationResponse>

  /// Tell GraphNav to navigate/traverse a given route.
  func navigateRoute(request: Bosdyn_Api_GraphNav_NavigateRouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_NavigateRouteResponse>

  /// Tell GraphNav to navigate to a waypoint along a route it chooses.
  func navigateTo(request: Bosdyn_Api_GraphNav_NavigateToRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_NavigateToResponse>

  /// Get feedback on active navigation command.
  func navigationFeedback(request: Bosdyn_Api_GraphNav_NavigationFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_NavigationFeedbackResponse>

  /// Get the localization status and data.
  func getLocalizationState(request: Bosdyn_Api_GraphNav_GetLocalizationStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_GetLocalizationStateResponse>

  /// Clears the local graph structure. Also erases any snapshots currently in RAM.
  func clearGraph(request: Bosdyn_Api_GraphNav_ClearGraphRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_ClearGraphResponse>

  /// Download the graph structure.
  func downloadGraph(request: Bosdyn_Api_GraphNav_DownloadGraphRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_DownloadGraphResponse>

  /// Upload the full list of waypoint IDs, graph topology and other small info.
  func uploadGraph(request: Bosdyn_Api_GraphNav_UploadGraphRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GraphNav_UploadGraphResponse>

  /// Uploads large waypoint snapshot as a stream for a particular waypoint.
  func uploadWaypointSnapshot(context: UnaryResponseCallContext<Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse>) -> EventLoopFuture<(StreamEvent<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest>) -> Void>

  /// Uploads large edge snapshot as a stream for a particular edge.
  func uploadEdgeSnapshot(context: UnaryResponseCallContext<Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse>) -> EventLoopFuture<(StreamEvent<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest>) -> Void>

  /// Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
  func downloadWaypointSnapshot(request: Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest, context: StreamingResponseCallContext<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse>) -> EventLoopFuture<GRPCStatus>

  /// Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
  func downloadEdgeSnapshot(request: Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest, context: StreamingResponseCallContext<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Bosdyn_Api_GraphNav_GraphNavServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.graph_nav.GraphNavService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SetLocalization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_SetLocalizationRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_SetLocalizationResponse>(),
        interceptors: self.interceptors?.makeSetLocalizationInterceptors() ?? [],
        userFunction: self.setLocalization(request:context:)
      )

    case "NavigateRoute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_NavigateRouteRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_NavigateRouteResponse>(),
        interceptors: self.interceptors?.makeNavigateRouteInterceptors() ?? [],
        userFunction: self.navigateRoute(request:context:)
      )

    case "NavigateTo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_NavigateToRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_NavigateToResponse>(),
        interceptors: self.interceptors?.makeNavigateToInterceptors() ?? [],
        userFunction: self.navigateTo(request:context:)
      )

    case "NavigationFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_NavigationFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_NavigationFeedbackResponse>(),
        interceptors: self.interceptors?.makeNavigationFeedbackInterceptors() ?? [],
        userFunction: self.navigationFeedback(request:context:)
      )

    case "GetLocalizationState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_GetLocalizationStateRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_GetLocalizationStateResponse>(),
        interceptors: self.interceptors?.makeGetLocalizationStateInterceptors() ?? [],
        userFunction: self.getLocalizationState(request:context:)
      )

    case "ClearGraph":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_ClearGraphRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_ClearGraphResponse>(),
        interceptors: self.interceptors?.makeClearGraphInterceptors() ?? [],
        userFunction: self.clearGraph(request:context:)
      )

    case "DownloadGraph":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_DownloadGraphRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_DownloadGraphResponse>(),
        interceptors: self.interceptors?.makeDownloadGraphInterceptors() ?? [],
        userFunction: self.downloadGraph(request:context:)
      )

    case "UploadGraph":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_UploadGraphRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_UploadGraphResponse>(),
        interceptors: self.interceptors?.makeUploadGraphInterceptors() ?? [],
        userFunction: self.uploadGraph(request:context:)
      )

    case "UploadWaypointSnapshot":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse>(),
        interceptors: self.interceptors?.makeUploadWaypointSnapshotInterceptors() ?? [],
        observerFactory: self.uploadWaypointSnapshot(context:)
      )

    case "UploadEdgeSnapshot":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse>(),
        interceptors: self.interceptors?.makeUploadEdgeSnapshotInterceptors() ?? [],
        observerFactory: self.uploadEdgeSnapshot(context:)
      )

    case "DownloadWaypointSnapshot":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse>(),
        interceptors: self.interceptors?.makeDownloadWaypointSnapshotInterceptors() ?? [],
        userFunction: self.downloadWaypointSnapshot(request:context:)
      )

    case "DownloadEdgeSnapshot":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse>(),
        interceptors: self.interceptors?.makeDownloadEdgeSnapshotInterceptors() ?? [],
        userFunction: self.downloadEdgeSnapshot(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_GraphNav_GraphNavServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'setLocalization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetLocalizationInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_SetLocalizationRequest, Bosdyn_Api_GraphNav_SetLocalizationResponse>]

  /// - Returns: Interceptors to use when handling 'navigateRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNavigateRouteInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_NavigateRouteRequest, Bosdyn_Api_GraphNav_NavigateRouteResponse>]

  /// - Returns: Interceptors to use when handling 'navigateTo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNavigateToInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_NavigateToRequest, Bosdyn_Api_GraphNav_NavigateToResponse>]

  /// - Returns: Interceptors to use when handling 'navigationFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNavigationFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_NavigationFeedbackRequest, Bosdyn_Api_GraphNav_NavigationFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'getLocalizationState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLocalizationStateInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_GetLocalizationStateRequest, Bosdyn_Api_GraphNav_GetLocalizationStateResponse>]

  /// - Returns: Interceptors to use when handling 'clearGraph'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearGraphInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_ClearGraphRequest, Bosdyn_Api_GraphNav_ClearGraphResponse>]

  /// - Returns: Interceptors to use when handling 'downloadGraph'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadGraphInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_DownloadGraphRequest, Bosdyn_Api_GraphNav_DownloadGraphResponse>]

  /// - Returns: Interceptors to use when handling 'uploadGraph'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadGraphInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_UploadGraphRequest, Bosdyn_Api_GraphNav_UploadGraphResponse>]

  /// - Returns: Interceptors to use when handling 'uploadWaypointSnapshot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadWaypointSnapshotInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_UploadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_UploadWaypointSnapshotResponse>]

  /// - Returns: Interceptors to use when handling 'uploadEdgeSnapshot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadEdgeSnapshotInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_UploadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_UploadEdgeSnapshotResponse>]

  /// - Returns: Interceptors to use when handling 'downloadWaypointSnapshot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadWaypointSnapshotInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_DownloadWaypointSnapshotRequest, Bosdyn_Api_GraphNav_DownloadWaypointSnapshotResponse>]

  /// - Returns: Interceptors to use when handling 'downloadEdgeSnapshot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDownloadEdgeSnapshotInterceptors() -> [ServerInterceptor<Bosdyn_Api_GraphNav_DownloadEdgeSnapshotRequest, Bosdyn_Api_GraphNav_DownloadEdgeSnapshotResponse>]
}
