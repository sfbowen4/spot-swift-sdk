//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/docking/docking_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The DockingService provides an interface to dock and undock the robot from Spot Docks,
/// as well as get feedback on command status, and get the current docked status of the robot.
///
/// Usage: instantiate `Bosdyn_Api_Docking_DockingServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_Docking_DockingServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_Docking_DockingServiceClientInterceptorFactoryProtocol? { get }

  func dockingCommand(
    _ request: Bosdyn_Api_Docking_DockingCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Docking_DockingCommandRequest, Bosdyn_Api_Docking_DockingCommandResponse>

  func dockingCommandFeedback(
    _ request: Bosdyn_Api_Docking_DockingCommandFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Docking_DockingCommandFeedbackRequest, Bosdyn_Api_Docking_DockingCommandFeedbackResponse>

  func getDockingConfig(
    _ request: Bosdyn_Api_Docking_GetDockingConfigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Docking_GetDockingConfigRequest, Bosdyn_Api_Docking_GetDockingConfigResponse>

  func getDockingState(
    _ request: Bosdyn_Api_Docking_GetDockingStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_Docking_GetDockingStateRequest, Bosdyn_Api_Docking_GetDockingStateResponse>
}

extension Bosdyn_Api_Docking_DockingServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.docking.DockingService"
  }

  /// Starts a docking command on the robot.
  ///
  /// - Parameters:
  ///   - request: Request to send to DockingCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dockingCommand(
    _ request: Bosdyn_Api_Docking_DockingCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Docking_DockingCommandRequest, Bosdyn_Api_Docking_DockingCommandResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.docking.DockingService/DockingCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDockingCommandInterceptors() ?? []
    )
  }

  /// Check the status of a docking command.
  ///
  /// - Parameters:
  ///   - request: Request to send to DockingCommandFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dockingCommandFeedback(
    _ request: Bosdyn_Api_Docking_DockingCommandFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Docking_DockingCommandFeedbackRequest, Bosdyn_Api_Docking_DockingCommandFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.docking.DockingService/DockingCommandFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDockingCommandFeedbackInterceptors() ?? []
    )
  }

  /// Get the configured dock ID ranges.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDockingConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDockingConfig(
    _ request: Bosdyn_Api_Docking_GetDockingConfigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Docking_GetDockingConfigRequest, Bosdyn_Api_Docking_GetDockingConfigResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.docking.DockingService/GetDockingConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDockingConfigInterceptors() ?? []
    )
  }

  /// Get the robot's docking state
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDockingState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDockingState(
    _ request: Bosdyn_Api_Docking_GetDockingStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_Docking_GetDockingStateRequest, Bosdyn_Api_Docking_GetDockingStateResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.docking.DockingService/GetDockingState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDockingStateInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_Docking_DockingServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'dockingCommand'.
  func makeDockingCommandInterceptors() -> [ClientInterceptor<Bosdyn_Api_Docking_DockingCommandRequest, Bosdyn_Api_Docking_DockingCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'dockingCommandFeedback'.
  func makeDockingCommandFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_Docking_DockingCommandFeedbackRequest, Bosdyn_Api_Docking_DockingCommandFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'getDockingConfig'.
  func makeGetDockingConfigInterceptors() -> [ClientInterceptor<Bosdyn_Api_Docking_GetDockingConfigRequest, Bosdyn_Api_Docking_GetDockingConfigResponse>]

  /// - Returns: Interceptors to use when invoking 'getDockingState'.
  func makeGetDockingStateInterceptors() -> [ClientInterceptor<Bosdyn_Api_Docking_GetDockingStateRequest, Bosdyn_Api_Docking_GetDockingStateResponse>]
}

public final class Bosdyn_Api_Docking_DockingServiceClient: Bosdyn_Api_Docking_DockingServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_Docking_DockingServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.docking.DockingService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_Docking_DockingServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The DockingService provides an interface to dock and undock the robot from Spot Docks,
/// as well as get feedback on command status, and get the current docked status of the robot.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_Docking_DockingServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_Docking_DockingServiceServerInterceptorFactoryProtocol? { get }

  /// Starts a docking command on the robot.
  func dockingCommand(request: Bosdyn_Api_Docking_DockingCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Docking_DockingCommandResponse>

  /// Check the status of a docking command.
  func dockingCommandFeedback(request: Bosdyn_Api_Docking_DockingCommandFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Docking_DockingCommandFeedbackResponse>

  /// Get the configured dock ID ranges.
  func getDockingConfig(request: Bosdyn_Api_Docking_GetDockingConfigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Docking_GetDockingConfigResponse>

  /// Get the robot's docking state
  func getDockingState(request: Bosdyn_Api_Docking_GetDockingStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_Docking_GetDockingStateResponse>
}

extension Bosdyn_Api_Docking_DockingServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.docking.DockingService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DockingCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Docking_DockingCommandRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Docking_DockingCommandResponse>(),
        interceptors: self.interceptors?.makeDockingCommandInterceptors() ?? [],
        userFunction: self.dockingCommand(request:context:)
      )

    case "DockingCommandFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Docking_DockingCommandFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Docking_DockingCommandFeedbackResponse>(),
        interceptors: self.interceptors?.makeDockingCommandFeedbackInterceptors() ?? [],
        userFunction: self.dockingCommandFeedback(request:context:)
      )

    case "GetDockingConfig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Docking_GetDockingConfigRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Docking_GetDockingConfigResponse>(),
        interceptors: self.interceptors?.makeGetDockingConfigInterceptors() ?? [],
        userFunction: self.getDockingConfig(request:context:)
      )

    case "GetDockingState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_Docking_GetDockingStateRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_Docking_GetDockingStateResponse>(),
        interceptors: self.interceptors?.makeGetDockingStateInterceptors() ?? [],
        userFunction: self.getDockingState(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_Docking_DockingServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'dockingCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDockingCommandInterceptors() -> [ServerInterceptor<Bosdyn_Api_Docking_DockingCommandRequest, Bosdyn_Api_Docking_DockingCommandResponse>]

  /// - Returns: Interceptors to use when handling 'dockingCommandFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDockingCommandFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_Docking_DockingCommandFeedbackRequest, Bosdyn_Api_Docking_DockingCommandFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'getDockingConfig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDockingConfigInterceptors() -> [ServerInterceptor<Bosdyn_Api_Docking_GetDockingConfigRequest, Bosdyn_Api_Docking_GetDockingConfigResponse>]

  /// - Returns: Interceptors to use when handling 'getDockingState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDockingStateInterceptors() -> [ServerInterceptor<Bosdyn_Api_Docking_GetDockingStateRequest, Bosdyn_Api_Docking_GetDockingStateResponse>]
}
