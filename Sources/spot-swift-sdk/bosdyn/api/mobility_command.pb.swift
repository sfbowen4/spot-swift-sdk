// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/mobility_command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The robot command message to specify a basic command that moves the robot.
public struct Bosdyn_Api_MobilityCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The mobility request must be one of the basic command primitives.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Only one mobility command can be requested at a time.
    public var command: Bosdyn_Api_MobilityCommand.Request.OneOf_Command? = nil

    /// Command to move the robot along a trajectory.
    public var se2TrajectoryRequest: Bosdyn_Api_SE2TrajectoryCommand.Request {
      get {
        if case .se2TrajectoryRequest(let v)? = command {return v}
        return Bosdyn_Api_SE2TrajectoryCommand.Request()
      }
      set {command = .se2TrajectoryRequest(newValue)}
    }

    /// Command to move the robot at a fixed velocity.
    public var se2VelocityRequest: Bosdyn_Api_SE2VelocityCommand.Request {
      get {
        if case .se2VelocityRequest(let v)? = command {return v}
        return Bosdyn_Api_SE2VelocityCommand.Request()
      }
      set {command = .se2VelocityRequest(newValue)}
    }

    /// Command to sit the robot down.
    public var sitRequest: Bosdyn_Api_SitCommand.Request {
      get {
        if case .sitRequest(let v)? = command {return v}
        return Bosdyn_Api_SitCommand.Request()
      }
      set {command = .sitRequest(newValue)}
    }

    /// Command to stand up the robot.
    public var standRequest: Bosdyn_Api_StandCommand.Request {
      get {
        if case .standRequest(let v)? = command {return v}
        return Bosdyn_Api_StandCommand.Request()
      }
      set {command = .standRequest(newValue)}
    }

    public var stanceRequest: Bosdyn_Api_StanceCommand.Request {
      get {
        if case .stanceRequest(let v)? = command {return v}
        return Bosdyn_Api_StanceCommand.Request()
      }
      set {command = .stanceRequest(newValue)}
    }

    public var stopRequest: Bosdyn_Api_StopCommand.Request {
      get {
        if case .stopRequest(let v)? = command {return v}
        return Bosdyn_Api_StopCommand.Request()
      }
      set {command = .stopRequest(newValue)}
    }

    public var followArmRequest: Bosdyn_Api_FollowArmCommand.Request {
      get {
        if case .followArmRequest(let v)? = command {return v}
        return Bosdyn_Api_FollowArmCommand.Request()
      }
      set {command = .followArmRequest(newValue)}
    }

    /// Robot specific command parameters.
    public var params: SwiftProtobuf.Google_Protobuf_Any {
      get {return _params ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_params = newValue}
    }
    /// Returns true if `params` has been explicitly set.
    public var hasParams: Bool {return self._params != nil}
    /// Clears the value of `params`. Subsequent reads from it will return its default value.
    public mutating func clearParams() {self._params = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Only one mobility command can be requested at a time.
    public enum OneOf_Command: Equatable {
      /// Command to move the robot along a trajectory.
      case se2TrajectoryRequest(Bosdyn_Api_SE2TrajectoryCommand.Request)
      /// Command to move the robot at a fixed velocity.
      case se2VelocityRequest(Bosdyn_Api_SE2VelocityCommand.Request)
      /// Command to sit the robot down.
      case sitRequest(Bosdyn_Api_SitCommand.Request)
      /// Command to stand up the robot.
      case standRequest(Bosdyn_Api_StandCommand.Request)
      case stanceRequest(Bosdyn_Api_StanceCommand.Request)
      case stopRequest(Bosdyn_Api_StopCommand.Request)
      case followArmRequest(Bosdyn_Api_FollowArmCommand.Request)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_MobilityCommand.Request.OneOf_Command, rhs: Bosdyn_Api_MobilityCommand.Request.OneOf_Command) -> Bool {
        switch (lhs, rhs) {
        case (.se2TrajectoryRequest(let l), .se2TrajectoryRequest(let r)): return l == r
        case (.se2VelocityRequest(let l), .se2VelocityRequest(let r)): return l == r
        case (.sitRequest(let l), .sitRequest(let r)): return l == r
        case (.standRequest(let l), .standRequest(let r)): return l == r
        case (.stanceRequest(let l), .stanceRequest(let r)): return l == r
        case (.stopRequest(let l), .stopRequest(let r)): return l == r
        case (.followArmRequest(let l), .followArmRequest(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _params: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// The feedback for the mobility command that will provide information on the progress
  /// of the robot command.
  public struct Feedback {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The feedback message associated with the requested command. Some commands may have
    /// an empty feedback message if they do not provide any updates/progress.
    public var feedback: Bosdyn_Api_MobilityCommand.Feedback.OneOf_Feedback? = nil

    /// Feedback for the trajectory command.
    public var se2TrajectoryFeedback: Bosdyn_Api_SE2TrajectoryCommand.Feedback {
      get {
        if case .se2TrajectoryFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_SE2TrajectoryCommand.Feedback()
      }
      set {feedback = .se2TrajectoryFeedback(newValue)}
    }

    /// Feedback for the velocity command.
    public var se2VelocityFeedback: Bosdyn_Api_SE2VelocityCommand.Feedback {
      get {
        if case .se2VelocityFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_SE2VelocityCommand.Feedback()
      }
      set {feedback = .se2VelocityFeedback(newValue)}
    }

    /// Feedback for the sit command.
    public var sitFeedback: Bosdyn_Api_SitCommand.Feedback {
      get {
        if case .sitFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_SitCommand.Feedback()
      }
      set {feedback = .sitFeedback(newValue)}
    }

    /// Feedback for the stand command.
    public var standFeedback: Bosdyn_Api_StandCommand.Feedback {
      get {
        if case .standFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_StandCommand.Feedback()
      }
      set {feedback = .standFeedback(newValue)}
    }

    public var stanceFeedback: Bosdyn_Api_StanceCommand.Feedback {
      get {
        if case .stanceFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_StanceCommand.Feedback()
      }
      set {feedback = .stanceFeedback(newValue)}
    }

    public var stopFeedback: Bosdyn_Api_StopCommand.Feedback {
      get {
        if case .stopFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_StopCommand.Feedback()
      }
      set {feedback = .stopFeedback(newValue)}
    }

    public var followArmFeedback: Bosdyn_Api_FollowArmCommand.Feedback {
      get {
        if case .followArmFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_FollowArmCommand.Feedback()
      }
      set {feedback = .followArmFeedback(newValue)}
    }

    public var status: Bosdyn_Api_RobotCommandFeedbackStatus.Status = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The feedback message associated with the requested command. Some commands may have
    /// an empty feedback message if they do not provide any updates/progress.
    public enum OneOf_Feedback: Equatable {
      /// Feedback for the trajectory command.
      case se2TrajectoryFeedback(Bosdyn_Api_SE2TrajectoryCommand.Feedback)
      /// Feedback for the velocity command.
      case se2VelocityFeedback(Bosdyn_Api_SE2VelocityCommand.Feedback)
      /// Feedback for the sit command.
      case sitFeedback(Bosdyn_Api_SitCommand.Feedback)
      /// Feedback for the stand command.
      case standFeedback(Bosdyn_Api_StandCommand.Feedback)
      case stanceFeedback(Bosdyn_Api_StanceCommand.Feedback)
      case stopFeedback(Bosdyn_Api_StopCommand.Feedback)
      case followArmFeedback(Bosdyn_Api_FollowArmCommand.Feedback)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_MobilityCommand.Feedback.OneOf_Feedback, rhs: Bosdyn_Api_MobilityCommand.Feedback.OneOf_Feedback) -> Bool {
        switch (lhs, rhs) {
        case (.se2TrajectoryFeedback(let l), .se2TrajectoryFeedback(let r)): return l == r
        case (.se2VelocityFeedback(let l), .se2VelocityFeedback(let r)): return l == r
        case (.sitFeedback(let l), .sitFeedback(let r)): return l == r
        case (.standFeedback(let l), .standFeedback(let r)): return l == r
        case (.stanceFeedback(let l), .stanceFeedback(let r)): return l == r
        case (.stopFeedback(let l), .stopFeedback(let r)): return l == r
        case (.followArmFeedback(let l), .followArmFeedback(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_MobilityCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MobilityCommand"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MobilityCommand, rhs: Bosdyn_Api_MobilityCommand) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MobilityCommand.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_MobilityCommand.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se2_trajectory_request"),
    2: .standard(proto: "se2_velocity_request"),
    3: .standard(proto: "sit_request"),
    4: .standard(proto: "stand_request"),
    5: .standard(proto: "stance_request"),
    6: .standard(proto: "stop_request"),
    7: .standard(proto: "follow_arm_request"),
    100: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_SE2TrajectoryCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .se2TrajectoryRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .se2TrajectoryRequest(v)}
      case 2:
        var v: Bosdyn_Api_SE2VelocityCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .se2VelocityRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .se2VelocityRequest(v)}
      case 3:
        var v: Bosdyn_Api_SitCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .sitRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .sitRequest(v)}
      case 4:
        var v: Bosdyn_Api_StandCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .standRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .standRequest(v)}
      case 5:
        var v: Bosdyn_Api_StanceCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .stanceRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .stanceRequest(v)}
      case 6:
        var v: Bosdyn_Api_StopCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .stopRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .stopRequest(v)}
      case 7:
        var v: Bosdyn_Api_FollowArmCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .followArmRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .followArmRequest(v)}
      case 100: try decoder.decodeSingularMessageField(value: &self._params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.command {
    case .se2TrajectoryRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .se2VelocityRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .sitRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .standRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .stanceRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .stopRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .followArmRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case nil: break
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MobilityCommand.Request, rhs: Bosdyn_Api_MobilityCommand.Request) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_MobilityCommand.Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_MobilityCommand.protoMessageName + ".Feedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "se2_trajectory_feedback"),
    2: .standard(proto: "se2_velocity_feedback"),
    3: .standard(proto: "sit_feedback"),
    4: .standard(proto: "stand_feedback"),
    5: .standard(proto: "stance_feedback"),
    6: .standard(proto: "stop_feedback"),
    7: .standard(proto: "follow_arm_feedback"),
    100: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_SE2TrajectoryCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .se2TrajectoryFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .se2TrajectoryFeedback(v)}
      case 2:
        var v: Bosdyn_Api_SE2VelocityCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .se2VelocityFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .se2VelocityFeedback(v)}
      case 3:
        var v: Bosdyn_Api_SitCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .sitFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .sitFeedback(v)}
      case 4:
        var v: Bosdyn_Api_StandCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .standFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .standFeedback(v)}
      case 5:
        var v: Bosdyn_Api_StanceCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .stanceFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .stanceFeedback(v)}
      case 6:
        var v: Bosdyn_Api_StopCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .stopFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .stopFeedback(v)}
      case 7:
        var v: Bosdyn_Api_FollowArmCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .followArmFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .followArmFeedback(v)}
      case 100: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.feedback {
    case .se2TrajectoryFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .se2VelocityFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .sitFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .standFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .stanceFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .stopFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .followArmFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case nil: break
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_MobilityCommand.Feedback, rhs: Bosdyn_Api_MobilityCommand.Feedback) -> Bool {
    if lhs.feedback != rhs.feedback {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
