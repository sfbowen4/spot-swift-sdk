// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/data_index.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specification for selecting of GRPC logs.
public struct Bosdyn_Api_GrpcSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serviceName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specification for selecting of blob messages.
public struct Bosdyn_Api_BlobSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var source: String = String()

  public var messageType: String = String()

  public var channel: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specification for selecting Events.
public struct Bosdyn_Api_EventSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var source: String = String()

  public var type: String = String()

  public var level: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _level ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_level = newValue}
  }
  /// Returns true if `level` has been explicitly set.
  public var hasLevel: Bool {return self._level != nil}
  /// Clears the value of `level`. Subsequent reads from it will return its default value.
  public mutating func clearLevel() {self._level = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _level: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

/// A unit of data storage.
/// This may be a bddf data file.
/// Like a file, this data may be downloaded or deleted all together for example.
public struct Bosdyn_Api_PageInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier unique to robot.
  public var id: String = String()

  /// Relative path to file, if file storage.
  public var path: String = String()

  /// Name of service/client which provided the data.
  public var source: String = String()

  /// Time range of the relevant data in the page.
  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Number of time samples or blobs.
  public var numTicks: Int64 = 0

  /// Total size of data in the page.
  public var totalBytes: Int64 = 0

  public var format: Bosdyn_Api_PageInfo.PageFormat = .formatUnknown

  public var compression: Bosdyn_Api_PageInfo.Compression = .unknown

  /// True if data is still being written into this page, false if page is complete.
  public var isOpen: Bool = false

  /// True if data is marked as having been downloaded.
  public var isDownloaded: Bool = false

  /// If this exists, the page was deleted from the robot at the specified time.
  public var deletedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deletedTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deletedTimestamp = newValue}
  }
  /// Returns true if `deletedTimestamp` has been explicitly set.
  public var hasDeletedTimestamp: Bool {return self._deletedTimestamp != nil}
  /// Clears the value of `deletedTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearDeletedTimestamp() {self._deletedTimestamp = nil}

  /// If this exists, download from this page was started at the specified time.
  public var downloadStartedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _downloadStartedTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_downloadStartedTimestamp = newValue}
  }
  /// Returns true if `downloadStartedTimestamp` has been explicitly set.
  public var hasDownloadStartedTimestamp: Bool {return self._downloadStartedTimestamp != nil}
  /// Clears the value of `downloadStartedTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearDownloadStartedTimestamp() {self._downloadStartedTimestamp = nil}

  /// True if data has been requested to be preserved.
  public var requestPreserve: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum PageFormat: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unset -- do not use.
    case formatUnknown // = 0

    /// Data is stored in a .bddf file
    case formatBddfFile // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .formatUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .formatUnknown
      case 1: self = .formatBddfFile
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .formatUnknown: return 0
      case .formatBddfFile: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Compression: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Not set -- do not use.
    case unknown // = 0

    /// Data is not compressed.
    case none // = 1

    /// Data uses gzip compression.
    case gzip // = 2

    /// Data uses zstd compression.
    case zstd // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .none
      case 2: self = .gzip
      case 3: self = .zstd
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .none: return 1
      case .gzip: return 2
      case .zstd: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
  fileprivate var _deletedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _downloadStartedTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_PageInfo.PageFormat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_PageInfo.PageFormat] = [
    .formatUnknown,
    .formatBddfFile,
  ]
}

extension Bosdyn_Api_PageInfo.Compression: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_PageInfo.Compression] = [
    .unknown,
    .none,
    .gzip,
    .zstd,
  ]
}

#endif  // swift(>=4.2)

/// A set of pages of data which contain specied GRPC request and response messages.
public struct Bosdyn_Api_GrpcPages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var spec: Bosdyn_Api_GrpcSpec {
    get {return _spec ?? Bosdyn_Api_GrpcSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {self._spec = nil}

  public var pages: [Bosdyn_Api_PageInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
  fileprivate var _spec: Bosdyn_Api_GrpcSpec? = nil
}

/// A set of blob messages of a given channel/msgtype within a given data page.
public struct Bosdyn_Api_BlobPage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var spec: Bosdyn_Api_BlobSpec {
    get {return _spec ?? Bosdyn_Api_BlobSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {self._spec = nil}

  public var page: Bosdyn_Api_PageInfo {
    get {return _page ?? Bosdyn_Api_PageInfo()}
    set {_page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return self._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {self._page = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _spec: Bosdyn_Api_BlobSpec? = nil
  fileprivate var _page: Bosdyn_Api_PageInfo? = nil
}

/// A set of pages of data which contain specified Blob messages from the data-buffer.
public struct Bosdyn_Api_BlobPages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var pages: [Bosdyn_Api_BlobPage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

/// A set of pages and the associated time range they cover.
public struct Bosdyn_Api_PagesAndTimestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var pages: [Bosdyn_Api_PageInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

/// A query for pages containing the desired data.
public struct Bosdyn_Api_DataQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timespan for data we want to query
  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Request for pages containing different kinds of data.
  public var blobs: [Bosdyn_Api_BlobSpec] = []

  /// return pages of text-messages during the specified timespan
  public var textMessages: Bool = false

  /// return pages of events
  public var events: Bool = false

  /// return pages of operator comments during the specified timespan
  public var comments: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

/// Description of data matching a given DataQuery.
public struct Bosdyn_Api_DataIndex {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var blobs: [Bosdyn_Api_BlobPages] = []

  public var textMessages: Bosdyn_Api_PagesAndTimestamp {
    get {return _textMessages ?? Bosdyn_Api_PagesAndTimestamp()}
    set {_textMessages = newValue}
  }
  /// Returns true if `textMessages` has been explicitly set.
  public var hasTextMessages: Bool {return self._textMessages != nil}
  /// Clears the value of `textMessages`. Subsequent reads from it will return its default value.
  public mutating func clearTextMessages() {self._textMessages = nil}

  public var events: Bosdyn_Api_PagesAndTimestamp {
    get {return _events ?? Bosdyn_Api_PagesAndTimestamp()}
    set {_events = newValue}
  }
  /// Returns true if `events` has been explicitly set.
  public var hasEvents: Bool {return self._events != nil}
  /// Clears the value of `events`. Subsequent reads from it will return its default value.
  public mutating func clearEvents() {self._events = nil}

  public var comments: Bosdyn_Api_PagesAndTimestamp {
    get {return _comments ?? Bosdyn_Api_PagesAndTimestamp()}
    set {_comments = newValue}
  }
  /// Returns true if `comments` has been explicitly set.
  public var hasComments: Bool {return self._comments != nil}
  /// Clears the value of `comments`. Subsequent reads from it will return its default value.
  public mutating func clearComments() {self._comments = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
  fileprivate var _textMessages: Bosdyn_Api_PagesAndTimestamp? = nil
  fileprivate var _events: Bosdyn_Api_PagesAndTimestamp? = nil
  fileprivate var _comments: Bosdyn_Api_PagesAndTimestamp? = nil
}

/// A request for Events and/or OperatorComments over a given time range.
public struct Bosdyn_Api_EventsCommentsSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timespan for data we want to query
  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Return events which match the request.
  public var events: [Bosdyn_Api_EventSpec] = []

  /// Return operator comments which match the request.
  public var comments: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

/// Requested Events and/or OperatorComments.
public struct Bosdyn_Api_EventsComments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timespan for data
  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var events: [Bosdyn_Api_Event] = []

  public var operatorComments: [Bosdyn_Api_OperatorComment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

public struct Bosdyn_Api_DataBufferStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var numDataBufferPages: Int64 = 0

  public var dataBufferTotalBytes: Int64 = 0

  public var numComments: Int64 = 0

  public var numEvents: Int64 = 0

  public var blobSpecs: [Bosdyn_Api_BlobSpec] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// GRPC request for data index information.
public struct Bosdyn_Api_GetDataIndexResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var dataIndex: Bosdyn_Api_DataIndex {
    get {return _dataIndex ?? Bosdyn_Api_DataIndex()}
    set {_dataIndex = newValue}
  }
  /// Returns true if `dataIndex` has been explicitly set.
  public var hasDataIndex: Bool {return self._dataIndex != nil}
  /// Clears the value of `dataIndex`. Subsequent reads from it will return its default value.
  public mutating func clearDataIndex() {self._dataIndex = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _dataIndex: Bosdyn_Api_DataIndex? = nil
}

/// GRPC response with requested data index information.
public struct Bosdyn_Api_GetDataIndexRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var dataQuery: Bosdyn_Api_DataQuery {
    get {return _dataQuery ?? Bosdyn_Api_DataQuery()}
    set {_dataQuery = newValue}
  }
  /// Returns true if `dataQuery` has been explicitly set.
  public var hasDataQuery: Bool {return self._dataQuery != nil}
  /// Clears the value of `dataQuery`. Subsequent reads from it will return its default value.
  public mutating func clearDataQuery() {self._dataQuery = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _dataQuery: Bosdyn_Api_DataQuery? = nil
}

/// GRPC request for Events and OperatorComments.
public struct Bosdyn_Api_GetEventsCommentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var eventCommentRequest: Bosdyn_Api_EventsCommentsSpec {
    get {return _eventCommentRequest ?? Bosdyn_Api_EventsCommentsSpec()}
    set {_eventCommentRequest = newValue}
  }
  /// Returns true if `eventCommentRequest` has been explicitly set.
  public var hasEventCommentRequest: Bool {return self._eventCommentRequest != nil}
  /// Clears the value of `eventCommentRequest`. Subsequent reads from it will return its default value.
  public mutating func clearEventCommentRequest() {self._eventCommentRequest = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _eventCommentRequest: Bosdyn_Api_EventsCommentsSpec? = nil
}

/// GRPC response with requested Events and OperatorComments.
public struct Bosdyn_Api_GetEventsCommentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var eventsComments: Bosdyn_Api_EventsComments {
    get {return _eventsComments ?? Bosdyn_Api_EventsComments()}
    set {_eventsComments = newValue}
  }
  /// Returns true if `eventsComments` has been explicitly set.
  public var hasEventsComments: Bool {return self._eventsComments != nil}
  /// Clears the value of `eventsComments`. Subsequent reads from it will return its default value.
  public mutating func clearEventsComments() {self._eventsComments = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _eventsComments: Bosdyn_Api_EventsComments? = nil
}

public struct Bosdyn_Api_GetDataBufferStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var getBlobSpecs: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_GetDataBufferStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var dataBufferStatus: Bosdyn_Api_DataBufferStatus {
    get {return _dataBufferStatus ?? Bosdyn_Api_DataBufferStatus()}
    set {_dataBufferStatus = newValue}
  }
  /// Returns true if `dataBufferStatus` has been explicitly set.
  public var hasDataBufferStatus: Bool {return self._dataBufferStatus != nil}
  /// Clears the value of `dataBufferStatus`. Subsequent reads from it will return its default value.
  public mutating func clearDataBufferStatus() {self._dataBufferStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _dataBufferStatus: Bosdyn_Api_DataBufferStatus? = nil
}

public struct Bosdyn_Api_GetDataPagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

public struct Bosdyn_Api_GetDataPagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var pages: [Bosdyn_Api_PageInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

/// GRPC request to delete pages. Both time_range and page_ids can be set.
public struct Bosdyn_Api_DeleteDataPagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Delete all pages in this time range
  public var timeRange: Bosdyn_Api_TimeRange {
    get {return _timeRange ?? Bosdyn_Api_TimeRange()}
    set {_timeRange = newValue}
  }
  /// Returns true if `timeRange` has been explicitly set.
  public var hasTimeRange: Bool {return self._timeRange != nil}
  /// Clears the value of `timeRange`. Subsequent reads from it will return its default value.
  public mutating func clearTimeRange() {self._timeRange = nil}

  /// Delete all pages with matching ids
  public var pageIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _timeRange: Bosdyn_Api_TimeRange? = nil
}

public struct Bosdyn_Api_DeletePageStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pageID: String = String()

  public var status: Bosdyn_Api_DeletePageStatus.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case deleted // = 1
    case deletionFailed // = 2
    case notFound // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .deleted
      case 2: self = .deletionFailed
      case 3: self = .notFound
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .deleted: return 1
      case .deletionFailed: return 2
      case .notFound: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_DeletePageStatus.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_DeletePageStatus.Status] = [
    .unknown,
    .deleted,
    .deletionFailed,
    .notFound,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_DeleteDataPagesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var bytesDeleted: Int64 = 0

  public var status: [Bosdyn_Api_DeletePageStatus] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_GrpcSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GrpcSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GrpcSpec, rhs: Bosdyn_Api_GrpcSpec) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_BlobSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlobSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .standard(proto: "message_type"),
    3: .same(proto: "channel"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.source)
      case 2: try decoder.decodeSingularStringField(value: &self.messageType)
      case 3: try decoder.decodeSingularStringField(value: &self.channel)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.messageType.isEmpty {
      try visitor.visitSingularStringField(value: self.messageType, fieldNumber: 2)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_BlobSpec, rhs: Bosdyn_Api_BlobSpec) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.messageType != rhs.messageType {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_EventSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "type"),
    3: .same(proto: "level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.source)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularMessageField(value: &self._level)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if let v = self._level {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_EventSpec, rhs: Bosdyn_Api_EventSpec) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.type != rhs.type {return false}
    if lhs._level != rhs._level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PageInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "path"),
    3: .same(proto: "source"),
    4: .standard(proto: "time_range"),
    5: .standard(proto: "num_ticks"),
    6: .standard(proto: "total_bytes"),
    7: .same(proto: "format"),
    8: .same(proto: "compression"),
    9: .standard(proto: "is_open"),
    10: .standard(proto: "is_downloaded"),
    11: .standard(proto: "deleted_timestamp"),
    12: .standard(proto: "download_started_timestamp"),
    13: .standard(proto: "request_preserve"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.path)
      case 3: try decoder.decodeSingularStringField(value: &self.source)
      case 4: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 5: try decoder.decodeSingularInt64Field(value: &self.numTicks)
      case 6: try decoder.decodeSingularInt64Field(value: &self.totalBytes)
      case 7: try decoder.decodeSingularEnumField(value: &self.format)
      case 8: try decoder.decodeSingularEnumField(value: &self.compression)
      case 9: try decoder.decodeSingularBoolField(value: &self.isOpen)
      case 10: try decoder.decodeSingularBoolField(value: &self.isDownloaded)
      case 11: try decoder.decodeSingularMessageField(value: &self._deletedTimestamp)
      case 12: try decoder.decodeSingularMessageField(value: &self._downloadStartedTimestamp)
      case 13: try decoder.decodeSingularBoolField(value: &self.requestPreserve)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 3)
    }
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.numTicks != 0 {
      try visitor.visitSingularInt64Field(value: self.numTicks, fieldNumber: 5)
    }
    if self.totalBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBytes, fieldNumber: 6)
    }
    if self.format != .formatUnknown {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 7)
    }
    if self.compression != .unknown {
      try visitor.visitSingularEnumField(value: self.compression, fieldNumber: 8)
    }
    if self.isOpen != false {
      try visitor.visitSingularBoolField(value: self.isOpen, fieldNumber: 9)
    }
    if self.isDownloaded != false {
      try visitor.visitSingularBoolField(value: self.isDownloaded, fieldNumber: 10)
    }
    if let v = self._deletedTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._downloadStartedTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if self.requestPreserve != false {
      try visitor.visitSingularBoolField(value: self.requestPreserve, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PageInfo, rhs: Bosdyn_Api_PageInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.path != rhs.path {return false}
    if lhs.source != rhs.source {return false}
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.numTicks != rhs.numTicks {return false}
    if lhs.totalBytes != rhs.totalBytes {return false}
    if lhs.format != rhs.format {return false}
    if lhs.compression != rhs.compression {return false}
    if lhs.isOpen != rhs.isOpen {return false}
    if lhs.isDownloaded != rhs.isDownloaded {return false}
    if lhs._deletedTimestamp != rhs._deletedTimestamp {return false}
    if lhs._downloadStartedTimestamp != rhs._downloadStartedTimestamp {return false}
    if lhs.requestPreserve != rhs.requestPreserve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PageInfo.PageFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FORMAT_UNKNOWN"),
    1: .same(proto: "FORMAT_BDDF_FILE"),
  ]
}

extension Bosdyn_Api_PageInfo.Compression: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMPRESSION_UNKNOWN"),
    1: .same(proto: "COMPRESSION_NONE"),
    2: .same(proto: "COMPRESSION_GZIP"),
    3: .same(proto: "COMPRESSION_ZSTD"),
  ]
}

extension Bosdyn_Api_GrpcPages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GrpcPages"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "spec"),
    3: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeSingularMessageField(value: &self._spec)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GrpcPages, rhs: Bosdyn_Api_GrpcPages) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_BlobPage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlobPage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spec"),
    2: .same(proto: "page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._spec)
      case 2: try decoder.decodeSingularMessageField(value: &self._page)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._page {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_BlobPage, rhs: Bosdyn_Api_BlobPage) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs._page != rhs._page {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_BlobPages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlobPages"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    3: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_BlobPages, rhs: Bosdyn_Api_BlobPages) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PagesAndTimestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PagesAndTimestamp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PagesAndTimestamp, rhs: Bosdyn_Api_PagesAndTimestamp) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "blobs"),
    3: .standard(proto: "text_messages"),
    4: .same(proto: "events"),
    6: .same(proto: "comments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blobs)
      case 3: try decoder.decodeSingularBoolField(value: &self.textMessages)
      case 4: try decoder.decodeSingularBoolField(value: &self.events)
      case 6: try decoder.decodeSingularBoolField(value: &self.comments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blobs, fieldNumber: 2)
    }
    if self.textMessages != false {
      try visitor.visitSingularBoolField(value: self.textMessages, fieldNumber: 3)
    }
    if self.events != false {
      try visitor.visitSingularBoolField(value: self.events, fieldNumber: 4)
    }
    if self.comments != false {
      try visitor.visitSingularBoolField(value: self.comments, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataQuery, rhs: Bosdyn_Api_DataQuery) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.blobs != rhs.blobs {return false}
    if lhs.textMessages != rhs.textMessages {return false}
    if lhs.events != rhs.events {return false}
    if lhs.comments != rhs.comments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataIndex"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "blobs"),
    3: .standard(proto: "text_messages"),
    4: .same(proto: "events"),
    6: .same(proto: "comments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.blobs)
      case 3: try decoder.decodeSingularMessageField(value: &self._textMessages)
      case 4: try decoder.decodeSingularMessageField(value: &self._events)
      case 6: try decoder.decodeSingularMessageField(value: &self._comments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.blobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blobs, fieldNumber: 2)
    }
    if let v = self._textMessages {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._events {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._comments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataIndex, rhs: Bosdyn_Api_DataIndex) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.blobs != rhs.blobs {return false}
    if lhs._textMessages != rhs._textMessages {return false}
    if lhs._events != rhs._events {return false}
    if lhs._comments != rhs._comments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_EventsCommentsSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventsCommentsSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "events"),
    3: .same(proto: "comments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.events)
      case 3: try decoder.decodeSingularBoolField(value: &self.comments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    if self.comments != false {
      try visitor.visitSingularBoolField(value: self.comments, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_EventsCommentsSpec, rhs: Bosdyn_Api_EventsCommentsSpec) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.events != rhs.events {return false}
    if lhs.comments != rhs.comments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_EventsComments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventsComments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_range"),
    2: .same(proto: "events"),
    3: .standard(proto: "operator_comments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.events)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.operatorComments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    if !self.operatorComments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.operatorComments, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_EventsComments, rhs: Bosdyn_Api_EventsComments) -> Bool {
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.events != rhs.events {return false}
    if lhs.operatorComments != rhs.operatorComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataBufferStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataBufferStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_data_buffer_pages"),
    2: .standard(proto: "data_buffer_total_bytes"),
    3: .standard(proto: "num_comments"),
    4: .standard(proto: "num_events"),
    5: .standard(proto: "blob_specs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numDataBufferPages)
      case 2: try decoder.decodeSingularInt64Field(value: &self.dataBufferTotalBytes)
      case 3: try decoder.decodeSingularInt64Field(value: &self.numComments)
      case 4: try decoder.decodeSingularInt64Field(value: &self.numEvents)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.blobSpecs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numDataBufferPages != 0 {
      try visitor.visitSingularInt64Field(value: self.numDataBufferPages, fieldNumber: 1)
    }
    if self.dataBufferTotalBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.dataBufferTotalBytes, fieldNumber: 2)
    }
    if self.numComments != 0 {
      try visitor.visitSingularInt64Field(value: self.numComments, fieldNumber: 3)
    }
    if self.numEvents != 0 {
      try visitor.visitSingularInt64Field(value: self.numEvents, fieldNumber: 4)
    }
    if !self.blobSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blobSpecs, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataBufferStatus, rhs: Bosdyn_Api_DataBufferStatus) -> Bool {
    if lhs.numDataBufferPages != rhs.numDataBufferPages {return false}
    if lhs.dataBufferTotalBytes != rhs.dataBufferTotalBytes {return false}
    if lhs.numComments != rhs.numComments {return false}
    if lhs.numEvents != rhs.numEvents {return false}
    if lhs.blobSpecs != rhs.blobSpecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataIndexResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataIndexResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "data_index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._dataIndex)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dataIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataIndexResponse, rhs: Bosdyn_Api_GetDataIndexResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._dataIndex != rhs._dataIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataIndexRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "data_query"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._dataQuery)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dataQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataIndexRequest, rhs: Bosdyn_Api_GetDataIndexRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._dataQuery != rhs._dataQuery {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetEventsCommentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventsCommentsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "event_comment_request"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._eventCommentRequest)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._eventCommentRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetEventsCommentsRequest, rhs: Bosdyn_Api_GetEventsCommentsRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._eventCommentRequest != rhs._eventCommentRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetEventsCommentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetEventsCommentsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "events_comments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._eventsComments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._eventsComments {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetEventsCommentsResponse, rhs: Bosdyn_Api_GetEventsCommentsResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._eventsComments != rhs._eventsComments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataBufferStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataBufferStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "get_blob_specs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularBoolField(value: &self.getBlobSpecs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.getBlobSpecs != false {
      try visitor.visitSingularBoolField(value: self.getBlobSpecs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataBufferStatusRequest, rhs: Bosdyn_Api_GetDataBufferStatusRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.getBlobSpecs != rhs.getBlobSpecs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataBufferStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataBufferStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "data_buffer_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._dataBufferStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._dataBufferStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataBufferStatusResponse, rhs: Bosdyn_Api_GetDataBufferStatusResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._dataBufferStatus != rhs._dataBufferStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataPagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataPagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "time_range"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._timeRange)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataPagesRequest, rhs: Bosdyn_Api_GetDataPagesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetDataPagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDataPagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetDataPagesResponse, rhs: Bosdyn_Api_GetDataPagesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DeleteDataPagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDataPagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "time_range"),
    3: .standard(proto: "page_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._timeRange)
      case 3: try decoder.decodeRepeatedStringField(value: &self.pageIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._timeRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.pageIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pageIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DeleteDataPagesRequest, rhs: Bosdyn_Api_DeleteDataPagesRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._timeRange != rhs._timeRange {return false}
    if lhs.pageIds != rhs.pageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DeletePageStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeletePageStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.pageID)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pageID.isEmpty {
      try visitor.visitSingularStringField(value: self.pageID, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DeletePageStatus, rhs: Bosdyn_Api_DeletePageStatus) -> Bool {
    if lhs.pageID != rhs.pageID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DeletePageStatus.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_DELETED"),
    2: .same(proto: "STATUS_DELETION_FAILED"),
    3: .same(proto: "STATUS_NOT_FOUND"),
  ]
}

extension Bosdyn_Api_DeleteDataPagesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteDataPagesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "bytes_deleted"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularInt64Field(value: &self.bytesDeleted)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.bytesDeleted != 0 {
      try visitor.visitSingularInt64Field(value: self.bytesDeleted, fieldNumber: 2)
    }
    if !self.status.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DeleteDataPagesResponse, rhs: Bosdyn_Api_DeleteDataPagesResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.bytesDeleted != rhs.bytesDeleted {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
