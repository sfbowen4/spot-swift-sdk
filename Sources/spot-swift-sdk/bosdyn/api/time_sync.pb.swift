// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/time_sync.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Timestamp information from a full GRPC call round-trip.
/// These are used to estimate the round-trip communication time and difference between
/// client and server clocks.
public struct Bosdyn_Api_TimeSyncRoundTrip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Client system time when the message was sent, if not zero.
  public var clientTx: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _clientTx ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_clientTx = newValue}
  }
  /// Returns true if `clientTx` has been explicitly set.
  public var hasClientTx: Bool {return self._clientTx != nil}
  /// Clears the value of `clientTx`. Subsequent reads from it will return its default value.
  public mutating func clearClientTx() {self._clientTx = nil}

  /// Server system time when the message was received, if not zero.
  public var serverRx: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _serverRx ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_serverRx = newValue}
  }
  /// Returns true if `serverRx` has been explicitly set.
  public var hasServerRx: Bool {return self._serverRx != nil}
  /// Clears the value of `serverRx`. Subsequent reads from it will return its default value.
  public mutating func clearServerRx() {self._serverRx = nil}

  /// Server system time when the response was sent, if not zero.
  public var serverTx: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _serverTx ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_serverTx = newValue}
  }
  /// Returns true if `serverTx` has been explicitly set.
  public var hasServerTx: Bool {return self._serverTx != nil}
  /// Clears the value of `serverTx`. Subsequent reads from it will return its default value.
  public mutating func clearServerTx() {self._serverTx = nil}

  /// Client time when the response was received, if not zero.
  public var clientRx: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _clientRx ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_clientRx = newValue}
  }
  /// Returns true if `clientRx` has been explicitly set.
  public var hasClientRx: Bool {return self._clientRx != nil}
  /// Clears the value of `clientRx`. Subsequent reads from it will return its default value.
  public mutating func clearClientRx() {self._clientRx = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _clientTx: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _serverRx: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _serverTx: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _clientRx: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Estimate of network speed and clock skew.  Both for the last
/// complete sample and a recent average.  Populated by the server.
public struct Bosdyn_Api_TimeSyncEstimate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Observed network delay (excludes processing between server_rx and server_tx).
  /// If zero, this estimate is unpopulated.
  public var roundTripTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _roundTripTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_roundTripTime = newValue}
  }
  /// Returns true if `roundTripTime` has been explicitly set.
  public var hasRoundTripTime: Bool {return self._roundTripTime != nil}
  /// Clears the value of `roundTripTime`. Subsequent reads from it will return its default value.
  public mutating func clearRoundTripTime() {self._roundTripTime = nil}

  /// Add the skew to the client system clock to get the server clock.
  public var clockSkew: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _clockSkew ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_clockSkew = newValue}
  }
  /// Returns true if `clockSkew` has been explicitly set.
  public var hasClockSkew: Bool {return self._clockSkew != nil}
  /// Clears the value of `clockSkew`. Subsequent reads from it will return its default value.
  public mutating func clearClockSkew() {self._clockSkew = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _roundTripTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _clockSkew: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// Current best estimate status of time sync.
public struct Bosdyn_Api_TimeSyncState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Best clock synchronization estimate currently available, if any.
  public var bestEstimate: Bosdyn_Api_TimeSyncEstimate {
    get {return _bestEstimate ?? Bosdyn_Api_TimeSyncEstimate()}
    set {_bestEstimate = newValue}
  }
  /// Returns true if `bestEstimate` has been explicitly set.
  public var hasBestEstimate: Bool {return self._bestEstimate != nil}
  /// Clears the value of `bestEstimate`. Subsequent reads from it will return its default value.
  public mutating func clearBestEstimate() {self._bestEstimate = nil}

  /// STATUS_OK once time sync is established.
  public var status: Bosdyn_Api_TimeSyncState.Status = .unknown

  /// Time of best estimate, in server time.
  public var measurementTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _measurementTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_measurementTime = newValue}
  }
  /// Returns true if `measurementTime` has been explicitly set.
  public var hasMeasurementTime: Bool {return self._measurementTime != nil}
  /// Clears the value of `measurementTime`. Subsequent reads from it will return its default value.
  public mutating func clearMeasurementTime() {self._measurementTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Invalid, do not use.
    case unknown // = 0

    /// Clock skew is available.
    case ok // = 1

    /// More updates are required to establish a synchronization estimate.
    case moreSamplesNeeded // = 2

    /// Server still establishing time sync internally.
    case serviceNotReady // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .moreSamplesNeeded
      case 3: self = .serviceNotReady
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .moreSamplesNeeded: return 2
      case .serviceNotReady: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _bestEstimate: Bosdyn_Api_TimeSyncEstimate? = nil
  fileprivate var _measurementTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_TimeSyncState.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_TimeSyncState.Status] = [
    .unknown,
    .ok,
    .moreSamplesNeeded,
    .serviceNotReady,
  ]
}

#endif  // swift(>=4.2)

/// Request message for a time-sync Update RPC.
public struct Bosdyn_Api_TimeSyncUpdateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Round-trip timing information from the previous Update request.
  public var previousRoundTrip: Bosdyn_Api_TimeSyncRoundTrip {
    get {return _previousRoundTrip ?? Bosdyn_Api_TimeSyncRoundTrip()}
    set {_previousRoundTrip = newValue}
  }
  /// Returns true if `previousRoundTrip` has been explicitly set.
  public var hasPreviousRoundTrip: Bool {return self._previousRoundTrip != nil}
  /// Clears the value of `previousRoundTrip`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousRoundTrip() {self._previousRoundTrip = nil}

  /// Identifier to verify time sync between robot and client. If unset, server will assign
  /// one to client.
  public var clockIdentifier: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _previousRoundTrip: Bosdyn_Api_TimeSyncRoundTrip? = nil
}

/// Request message for a time-sync Update RPC.
public struct Bosdyn_Api_TimeSyncUpdateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Clock synchronization estimate from the previous RPC round-trip, if available.
  public var previousEstimate: Bosdyn_Api_TimeSyncEstimate {
    get {return _previousEstimate ?? Bosdyn_Api_TimeSyncEstimate()}
    set {_previousEstimate = newValue}
  }
  /// Returns true if `previousEstimate` has been explicitly set.
  public var hasPreviousEstimate: Bool {return self._previousEstimate != nil}
  /// Clears the value of `previousEstimate`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousEstimate() {self._previousEstimate = nil}

  /// Current best clock synchronization estimate according to server.
  public var state: Bosdyn_Api_TimeSyncState {
    get {return _state ?? Bosdyn_Api_TimeSyncState()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  /// Identifier to verify time sync between robot and client. Assigned upon first Request and
  /// echoed with each subsequent request.
  public var clockIdentifier: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _previousEstimate: Bosdyn_Api_TimeSyncEstimate? = nil
  fileprivate var _state: Bosdyn_Api_TimeSyncState? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_TimeSyncRoundTrip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeSyncRoundTrip"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_tx"),
    2: .standard(proto: "server_rx"),
    3: .standard(proto: "server_tx"),
    4: .standard(proto: "client_rx"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._clientTx)
      case 2: try decoder.decodeSingularMessageField(value: &self._serverRx)
      case 3: try decoder.decodeSingularMessageField(value: &self._serverTx)
      case 4: try decoder.decodeSingularMessageField(value: &self._clientRx)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._clientTx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._serverRx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._serverTx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._clientRx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TimeSyncRoundTrip, rhs: Bosdyn_Api_TimeSyncRoundTrip) -> Bool {
    if lhs._clientTx != rhs._clientTx {return false}
    if lhs._serverRx != rhs._serverRx {return false}
    if lhs._serverTx != rhs._serverTx {return false}
    if lhs._clientRx != rhs._clientRx {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TimeSyncEstimate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeSyncEstimate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "round_trip_time"),
    2: .standard(proto: "clock_skew"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._roundTripTime)
      case 2: try decoder.decodeSingularMessageField(value: &self._clockSkew)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roundTripTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._clockSkew {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TimeSyncEstimate, rhs: Bosdyn_Api_TimeSyncEstimate) -> Bool {
    if lhs._roundTripTime != rhs._roundTripTime {return false}
    if lhs._clockSkew != rhs._clockSkew {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TimeSyncState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeSyncState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "best_estimate"),
    2: .same(proto: "status"),
    3: .standard(proto: "measurement_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._bestEstimate)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularMessageField(value: &self._measurementTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._bestEstimate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._measurementTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TimeSyncState, rhs: Bosdyn_Api_TimeSyncState) -> Bool {
    if lhs._bestEstimate != rhs._bestEstimate {return false}
    if lhs.status != rhs.status {return false}
    if lhs._measurementTime != rhs._measurementTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TimeSyncState.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_MORE_SAMPLES_NEEDED"),
    3: .same(proto: "STATUS_SERVICE_NOT_READY"),
  ]
}

extension Bosdyn_Api_TimeSyncUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeSyncUpdateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "previous_round_trip"),
    3: .standard(proto: "clock_identifier"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._previousRoundTrip)
      case 3: try decoder.decodeSingularStringField(value: &self.clockIdentifier)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._previousRoundTrip {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.clockIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.clockIdentifier, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TimeSyncUpdateRequest, rhs: Bosdyn_Api_TimeSyncUpdateRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._previousRoundTrip != rhs._previousRoundTrip {return false}
    if lhs.clockIdentifier != rhs.clockIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_TimeSyncUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeSyncUpdateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "previous_estimate"),
    3: .same(proto: "state"),
    4: .standard(proto: "clock_identifier"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._previousEstimate)
      case 3: try decoder.decodeSingularMessageField(value: &self._state)
      case 4: try decoder.decodeSingularStringField(value: &self.clockIdentifier)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._previousEstimate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.clockIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.clockIdentifier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_TimeSyncUpdateResponse, rhs: Bosdyn_Api_TimeSyncUpdateResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._previousEstimate != rhs._previousEstimate {return false}
    if lhs._state != rhs._state {return false}
    if lhs.clockIdentifier != rhs.clockIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
