// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/data_acquisition.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Description of a data acquisition capability. A data acquisition plugin service will have a
/// set of capabilities for which it can acquire and save the appropriate data.
public struct Bosdyn_Api_DataAcquisitionCapability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier for the data acquisition capability. Used for identification purposes
  /// when making acquire data requests.
  public var name: String = String()

  /// A human readable name of the data acquisition capability that will be shown on the tablet.
  public var description_p: String = String()

  /// Channel name that will be associated with all data stored in the data buffer through
  /// each data acquisition plugin. Metadata acquirers do not specify this field.
  public var channelName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Description of an image acquisition capability. The image acquisition capabilities will be available
/// through the main data acquisition service on robot and are populated based on all bosdyn.api.ImageService
/// services registered to the robot's directory.
public struct Bosdyn_Api_ImageAcquisitionCapability {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The image service's service name used in directory registration.
  public var serviceName: String = String()

  /// List of the image source names reported by the image service (through the ListImageSources RPC).
  public var imageSourceNames: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A list of all capabilities (data and images) that a specific data acquisition plugin service can successfully
/// acquire and save the data specified in each capability.
public struct Bosdyn_Api_AcquisitionCapabilityList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of non-image data acquisition capabilities.
  public var dataSources: [Bosdyn_Api_DataAcquisitionCapability] = []

  /// List of image data acquisition capabilities.
  public var imageSources: [Bosdyn_Api_ImageAcquisitionCapability] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The CaptureActionId describes the entire capture action for an AcquireData request and will be used
/// to uniquely identify that full request's set of stored data.
public struct Bosdyn_Api_CaptureActionId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The action name is used to group all pieces of data associated with a single AcquireData
  /// request. The action name must be unique for the given group name, meaning no two actions
  /// with the same group name can have the same action name.
  public var actionName: String = String()

  /// The group name is used to group a "session" of data, such as a mission or a teleop capture session, which
  /// includes multiple capture actions (from multiple AcquireData RPCs).
  public var groupName: String = String()

  /// Time (in the robot's clock) at which this capture was triggered. If the timestamp is not specified
  /// in the AcquireData RPC, the main data acquisition service on robot will populate the timestamp field
  /// with the timestamp of when the RPC was recieved.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A way to identify an individual piece of data stored in the data buffer.
public struct Bosdyn_Api_DataIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The action where the data was acquired.
  public var actionID: Bosdyn_Api_CaptureActionId {
    get {return _actionID ?? Bosdyn_Api_CaptureActionId()}
    set {_actionID = newValue}
  }
  /// Returns true if `actionID` has been explicitly set.
  public var hasActionID: Bool {return self._actionID != nil}
  /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
  public mutating func clearActionID() {self._actionID = nil}

  /// Data buffer channel associated with the DataBlob. The channel is used to group data across
  /// actions by a specific source, and it can be used in queries to retrieve some subset of data. For example,
  /// the channel could be "ptz" and queries can be made for all PTZ images.
  public var channel: String = String()

  /// Data-specific identifier that can optionally be used to disambiguate cases where the action_id and
  /// channel are insufficient. For example, you save cropped SpotCAM pano image that are detected as gauges to
  /// a "detected_gauges" channel, but want a way to further individually identify them as each specific gauge,
  /// so you give each detection a unique data_name.
  public var dataName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _actionID: Bosdyn_Api_CaptureActionId? = nil
}

/// Structured data that can be included within a AcquireData RPC and saved in association with
/// that capture action.
public struct Bosdyn_Api_Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// JSON representation of metadata.
  public var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

/// This message can be stored as a DataBlob in the data buffer in order to be recognized as
/// metadata that is associated with previously stored data.
public struct Bosdyn_Api_AssociatedMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The data that this metadata refers to.
  /// If only the action_id is filled out, this metadata is associated with the entire capture action.
  public var referenceID: Bosdyn_Api_DataIdentifier {
    get {return _referenceID ?? Bosdyn_Api_DataIdentifier()}
    set {_referenceID = newValue}
  }
  /// Returns true if `referenceID` has been explicitly set.
  public var hasReferenceID: Bool {return self._referenceID != nil}
  /// Clears the value of `referenceID`. Subsequent reads from it will return its default value.
  public mutating func clearReferenceID() {self._referenceID = nil}

  /// Metadata message to be stored.
  public var metadata: Bosdyn_Api_Metadata {
    get {return _metadata ?? Bosdyn_Api_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _referenceID: Bosdyn_Api_DataIdentifier? = nil
  fileprivate var _metadata: Bosdyn_Api_Metadata? = nil
}

/// An individual capture which can be specified in the AcquireData request to identify a piece of
/// image data to be collected.
public struct Bosdyn_Api_ImageSourceCapture {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the image service that the data should be requested from.
  public var imageService: String = String()

  /// Specific image source to use from the list reported by the image service within the
  /// ImageAcquisitionCapability message.
  public var imageSource: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An individual capture which can be specified in the AcquireData request to identify a piece of
/// non-image data to be collected.
public struct Bosdyn_Api_DataCapture {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the data to be captured. This should match the uniquely identifying name from
  /// the DataAcquisitionCapability.
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// The grouping of all individual image and data captures for a given capture action.
public struct Bosdyn_Api_AcquisitionRequestList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of image requests.
  public var imageCaptures: [Bosdyn_Api_ImageSourceCapture] = []

  /// List of non-image data and metadata requests.
  public var dataCaptures: [Bosdyn_Api_DataCapture] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// An error associated with a particular capture action and piece of data.
public struct Bosdyn_Api_DataError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier for the data to be saved.
  public var dataID: Bosdyn_Api_DataIdentifier {
    get {return _dataID ?? Bosdyn_Api_DataIdentifier()}
    set {_dataID = newValue}
  }
  /// Returns true if `dataID` has been explicitly set.
  public var hasDataID: Bool {return self._dataID != nil}
  /// Clears the value of `dataID`. Subsequent reads from it will return its default value.
  public mutating func clearDataID() {self._dataID = nil}

  /// Human-readable message describing the error.
  public var errorMessage: String = String()

  /// Custom plugin-specific data about the problem.
  public var errorData: SwiftProtobuf.Google_Protobuf_Any {
    get {return _errorData ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_errorData = newValue}
  }
  /// Returns true if `errorData` has been explicitly set.
  public var hasErrorData: Bool {return self._errorData != nil}
  /// Clears the value of `errorData`. Subsequent reads from it will return its default value.
  public mutating func clearErrorData() {self._errorData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dataID: Bosdyn_Api_DataIdentifier? = nil
  fileprivate var _errorData: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// An error associated with a particular data acquisition plugin service that was
public struct Bosdyn_Api_PluginServiceError {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the service with the error
  public var serviceName: String = String()

  /// Failure mode.
  public var error: Bosdyn_Api_PluginServiceError.ErrorCode = .statusUnknown

  /// Description of the error.
  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Possible ways a plugin can fail.
  public enum ErrorCode: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case statusUnknown // = 0

    /// The initial RPC to the plugin failed
    case statusRequestError // = 1

    /// The GetStatus request to the plugin failed with a data error or timeout.
    case statusGetstatusError // = 2

    /// The plugin reported an internal error.
    case statusInternalError // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .statusUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .statusUnknown
      case 1: self = .statusRequestError
      case 2: self = .statusGetstatusError
      case 3: self = .statusInternalError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .statusUnknown: return 0
      case .statusRequestError: return 1
      case .statusGetstatusError: return 2
      case .statusInternalError: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bosdyn_Api_PluginServiceError.ErrorCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_PluginServiceError.ErrorCode] = [
    .statusUnknown,
    .statusRequestError,
    .statusGetstatusError,
    .statusInternalError,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_AcquireDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header.
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Define the unique action that all data should be saved with.
  public var actionID: Bosdyn_Api_CaptureActionId {
    get {return _actionID ?? Bosdyn_Api_CaptureActionId()}
    set {_actionID = newValue}
  }
  /// Returns true if `actionID` has been explicitly set.
  public var hasActionID: Bool {return self._actionID != nil}
  /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
  public mutating func clearActionID() {self._actionID = nil}

  /// Metadata to store with the data capture. The main DAQ service saves it in the DataBuffer.
  public var metadata: Bosdyn_Api_Metadata {
    get {return _metadata ?? Bosdyn_Api_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// List of capability requests that should be collected as part of this capture action.
  public var acquisitionRequests: Bosdyn_Api_AcquisitionRequestList {
    get {return _acquisitionRequests ?? Bosdyn_Api_AcquisitionRequestList()}
    set {_acquisitionRequests = newValue}
  }
  /// Returns true if `acquisitionRequests` has been explicitly set.
  public var hasAcquisitionRequests: Bool {return self._acquisitionRequests != nil}
  /// Clears the value of `acquisitionRequests`. Subsequent reads from it will return its default value.
  public mutating func clearAcquisitionRequests() {self._acquisitionRequests = nil}

  /// Optional duration used to extend the amount of time that the data request may take, in
  /// the event that a plugin is incorrectly specifying its timeout.
  /// The amount of time allowed will be the maximum of this duration and any requests
  /// made to plugins or other capture sources.
  public var minTimeout: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _minTimeout ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_minTimeout = newValue}
  }
  /// Returns true if `minTimeout` has been explicitly set.
  public var hasMinTimeout: Bool {return self._minTimeout != nil}
  /// Clears the value of `minTimeout`. Subsequent reads from it will return its default value.
  public mutating func clearMinTimeout() {self._minTimeout = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _actionID: Bosdyn_Api_CaptureActionId? = nil
  fileprivate var _metadata: Bosdyn_Api_Metadata? = nil
  fileprivate var _acquisitionRequests: Bosdyn_Api_AcquisitionRequestList? = nil
  fileprivate var _minTimeout: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

public struct Bosdyn_Api_AcquireDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
  /// acquisition request can be done using the GetStatus RPC.
  public var status: Bosdyn_Api_AcquireDataResponse.Status = .unknown

  /// Identifier which can be used to check the status of or cancel the acquisition action..
  public var requestID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// The capture action has successfully started acquiring the data.
    case ok // = 1

    /// One of the capability requests in the AcquisitionRequestList is unknown.
    case unknownCaptureType // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .unknownCaptureType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .unknownCaptureType: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_AcquireDataResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_AcquireDataResponse.Status] = [
    .unknown,
    .ok,
    .unknownCaptureType,
  ]
}

#endif  // swift(>=4.2)

/// Message sent by main DAQ service to all data acquisition plugin services.
public struct Bosdyn_Api_AcquirePluginDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Metadata acquirers use these DataIdentifier objects to associate them with the acquired
  /// metadata when storing them in the DataBuffer.
  /// Data acquirers simply get the timestamp from these DataIdentifier objects to use when
  /// storing the data in the DataBuffer.
  public var dataID: [Bosdyn_Api_DataIdentifier] = []

  /// Metadata specified by the requestor.
  public var metadata: Bosdyn_Api_Metadata {
    get {return _metadata ?? Bosdyn_Api_Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  /// Id to be associated with all the data buffered for this request. It will be stored
  /// in the DataIdentifier field of each piece of data buffered from this request.
  public var actionID: Bosdyn_Api_CaptureActionId {
    get {return _actionID ?? Bosdyn_Api_CaptureActionId()}
    set {_actionID = newValue}
  }
  /// Returns true if `actionID` has been explicitly set.
  public var hasActionID: Bool {return self._actionID != nil}
  /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
  public mutating func clearActionID() {self._actionID = nil}

  /// List of capability requests specific for this DAQ plugin.
  public var acquisitionRequests: Bosdyn_Api_AcquisitionRequestList {
    get {return _acquisitionRequests ?? Bosdyn_Api_AcquisitionRequestList()}
    set {_acquisitionRequests = newValue}
  }
  /// Returns true if `acquisitionRequests` has been explicitly set.
  public var hasAcquisitionRequests: Bool {return self._acquisitionRequests != nil}
  /// Clears the value of `acquisitionRequests`. Subsequent reads from it will return its default value.
  public mutating func clearAcquisitionRequests() {self._acquisitionRequests = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
  fileprivate var _metadata: Bosdyn_Api_Metadata? = nil
  fileprivate var _actionID: Bosdyn_Api_CaptureActionId? = nil
  fileprivate var _acquisitionRequests: Bosdyn_Api_AcquisitionRequestList? = nil
}

public struct Bosdyn_Api_AcquirePluginDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
  /// acquisition request can be done using the GetStatus RPC.
  public var status: Bosdyn_Api_AcquirePluginDataResponse.Status = .unknown

  /// Identifier which can be used to check the status of or cancel the acquisition action..
  public var requestID: UInt32 = 0

  /// Time (in the robot's clock) by which this capture should definitely be complete.
  /// If it is not complete by this time, something has gone wrong.
  public var timeoutDeadline: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timeoutDeadline ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timeoutDeadline = newValue}
  }
  /// Returns true if `timeoutDeadline` has been explicitly set.
  public var hasTimeoutDeadline: Bool {return self._timeoutDeadline != nil}
  /// Clears the value of `timeoutDeadline`. Subsequent reads from it will return its default value.
  public mutating func clearTimeoutDeadline() {self._timeoutDeadline = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// The capture action has successfully started acquiring the data.
    case ok // = 1

    /// One of the capability requests in the AcquisitionRequestList is unknown.
    case unknownCaptureType // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .unknownCaptureType
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .unknownCaptureType: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _timeoutDeadline: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_AcquirePluginDataResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_AcquirePluginDataResponse.Status] = [
    .unknown,
    .ok,
    .unknownCaptureType,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_GetStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Which acquisition to check the status of.
  public var requestID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_GetStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var status: Bosdyn_Api_GetStatusResponse.Status = .unknown

  /// Data that has been successfully saved into the data buffer for the capture action.
  public var dataSaved: [Bosdyn_Api_DataIdentifier] = []

  /// A list of data captures which have failed in some way during the action.
  /// For example, the data acquisition plugin is unable to communicate to a sensor and responds with
  /// a data error for that specific data capture.
  public var dataErrors: [Bosdyn_Api_DataError] = []

  /// Services which failed independent of a particular data id.
  /// For example, if a plugin times out or crashes, it could be reported here.
  public var serviceErrors: [Bosdyn_Api_PluginServiceError] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// [Status] Data acquisition is still in progress
    case acquiring // = 1

    /// [Status] Data has been acquired, processing and storage is now in progress.
    case saving // = 2

    /// [Status] Data acquisition is complete.
    case complete // = 3

    /// [Status] The data acquisition service is working to cancel the request.
    case cancelInProgress // = 4

    /// [Status] The data acquisition request was cancelled manually.
    case acquisitionCancelled // = 5

    /// [Error - AcquireData] An error occurred while acquiring, processing, or saving data.
    case dataError // = 10

    /// [Error - AcquireData] The data collection has passed the deadline for completion.
    case timedout // = 11

    /// [Error - AcquireData] An error occurred such that we don't even know our status.
    case internalError // = 12

    /// [Error -CancelAcquisition] The cancellation request failed to complete.
    case cancelAcquisitionFailed // = 30

    /// [Error - GetStatus] The request_id does not exist.
    case requestIDDoesNotExist // = 20
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .acquiring
      case 2: self = .saving
      case 3: self = .complete
      case 4: self = .cancelInProgress
      case 5: self = .acquisitionCancelled
      case 10: self = .dataError
      case 11: self = .timedout
      case 12: self = .internalError
      case 20: self = .requestIDDoesNotExist
      case 30: self = .cancelAcquisitionFailed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .acquiring: return 1
      case .saving: return 2
      case .complete: return 3
      case .cancelInProgress: return 4
      case .acquisitionCancelled: return 5
      case .dataError: return 10
      case .timedout: return 11
      case .internalError: return 12
      case .requestIDDoesNotExist: return 20
      case .cancelAcquisitionFailed: return 30
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_GetStatusResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_GetStatusResponse.Status] = [
    .unknown,
    .acquiring,
    .saving,
    .complete,
    .cancelInProgress,
    .acquisitionCancelled,
    .dataError,
    .timedout,
    .internalError,
    .cancelAcquisitionFailed,
    .requestIDDoesNotExist,
  ]
}

#endif  // swift(>=4.2)

public struct Bosdyn_Api_GetServiceInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_GetServiceInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header.
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// List of capabilities that the data acquisition (plugin) service can
  /// collect and save data for.
  public var capabilities: Bosdyn_Api_AcquisitionCapabilityList {
    get {return _capabilities ?? Bosdyn_Api_AcquisitionCapabilityList()}
    set {_capabilities = newValue}
  }
  /// Returns true if `capabilities` has been explicitly set.
  public var hasCapabilities: Bool {return self._capabilities != nil}
  /// Clears the value of `capabilities`. Subsequent reads from it will return its default value.
  public mutating func clearCapabilities() {self._capabilities = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
  fileprivate var _capabilities: Bosdyn_Api_AcquisitionCapabilityList? = nil
}

public struct Bosdyn_Api_CancelAcquisitionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common request header
  public var header: Bosdyn_Api_RequestHeader {
    get {return _header ?? Bosdyn_Api_RequestHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// Which acquisition request to cancel.
  public var requestID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Bosdyn_Api_RequestHeader? = nil
}

public struct Bosdyn_Api_CancelAcquisitionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Common response header
  public var header: Bosdyn_Api_ResponseHeader {
    get {return _header ?? Bosdyn_Api_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  /// The status of the Cancellation RPC. Further monitoring on the success of the cancellation
  /// request can be done using the GetStatus RPC.
  public var status: Bosdyn_Api_CancelAcquisitionResponse.Status = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// Successfully cancelled the data acquisition request.
    case ok // = 1

    /// Unable to stop the data acquisition request.
    case failedToCancel // = 2

    /// [Error] The request_id does not exist.
    case requestIDDoesNotExist // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .failedToCancel
      case 3: self = .requestIDDoesNotExist
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .failedToCancel: return 2
      case .requestIDDoesNotExist: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _header: Bosdyn_Api_ResponseHeader? = nil
}

#if swift(>=4.2)

extension Bosdyn_Api_CancelAcquisitionResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bosdyn_Api_CancelAcquisitionResponse.Status] = [
    .unknown,
    .ok,
    .failedToCancel,
    .requestIDDoesNotExist,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_DataAcquisitionCapability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataAcquisitionCapability"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "channel_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeSingularStringField(value: &self.channelName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.channelName.isEmpty {
      try visitor.visitSingularStringField(value: self.channelName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataAcquisitionCapability, rhs: Bosdyn_Api_DataAcquisitionCapability) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.channelName != rhs.channelName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageAcquisitionCapability: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageAcquisitionCapability"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .standard(proto: "image_source_names"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeRepeatedStringField(value: &self.imageSourceNames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.imageSourceNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imageSourceNames, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageAcquisitionCapability, rhs: Bosdyn_Api_ImageAcquisitionCapability) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.imageSourceNames != rhs.imageSourceNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquisitionCapabilityList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquisitionCapabilityList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_sources"),
    3: .standard(proto: "image_sources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.dataSources)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.imageSources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dataSources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataSources, fieldNumber: 1)
    }
    if !self.imageSources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageSources, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquisitionCapabilityList, rhs: Bosdyn_Api_AcquisitionCapabilityList) -> Bool {
    if lhs.dataSources != rhs.dataSources {return false}
    if lhs.imageSources != rhs.imageSources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CaptureActionId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CaptureActionId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_name"),
    2: .standard(proto: "group_name"),
    3: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.actionName)
      case 2: try decoder.decodeSingularStringField(value: &self.groupName)
      case 3: try decoder.decodeSingularMessageField(value: &self._timestamp)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.actionName.isEmpty {
      try visitor.visitSingularStringField(value: self.actionName, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_CaptureActionId, rhs: Bosdyn_Api_CaptureActionId) -> Bool {
    if lhs.actionName != rhs.actionName {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataIdentifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_id"),
    2: .same(proto: "channel"),
    3: .standard(proto: "data_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._actionID)
      case 2: try decoder.decodeSingularStringField(value: &self.channel)
      case 3: try decoder.decodeSingularStringField(value: &self.dataName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    if !self.dataName.isEmpty {
      try visitor.visitSingularStringField(value: self.dataName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataIdentifier, rhs: Bosdyn_Api_DataIdentifier) -> Bool {
    if lhs._actionID != rhs._actionID {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.dataName != rhs.dataName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_Metadata, rhs: Bosdyn_Api_Metadata) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AssociatedMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssociatedMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reference_id"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._referenceID)
      case 2: try decoder.decodeSingularMessageField(value: &self._metadata)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._referenceID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AssociatedMetadata, rhs: Bosdyn_Api_AssociatedMetadata) -> Bool {
    if lhs._referenceID != rhs._referenceID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_ImageSourceCapture: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageSourceCapture"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_service"),
    2: .standard(proto: "image_source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.imageService)
      case 2: try decoder.decodeSingularStringField(value: &self.imageSource)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageService.isEmpty {
      try visitor.visitSingularStringField(value: self.imageService, fieldNumber: 1)
    }
    if !self.imageSource.isEmpty {
      try visitor.visitSingularStringField(value: self.imageSource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_ImageSourceCapture, rhs: Bosdyn_Api_ImageSourceCapture) -> Bool {
    if lhs.imageService != rhs.imageService {return false}
    if lhs.imageSource != rhs.imageSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataCapture: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataCapture"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataCapture, rhs: Bosdyn_Api_DataCapture) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquisitionRequestList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquisitionRequestList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_captures"),
    2: .standard(proto: "data_captures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.imageCaptures)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.dataCaptures)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageCaptures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.imageCaptures, fieldNumber: 1)
    }
    if !self.dataCaptures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataCaptures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquisitionRequestList, rhs: Bosdyn_Api_AcquisitionRequestList) -> Bool {
    if lhs.imageCaptures != rhs.imageCaptures {return false}
    if lhs.dataCaptures != rhs.dataCaptures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_DataError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DataError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_id"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "error_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._dataID)
      case 2: try decoder.decodeSingularStringField(value: &self.errorMessage)
      case 3: try decoder.decodeSingularMessageField(value: &self._errorData)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dataID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if let v = self._errorData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_DataError, rhs: Bosdyn_Api_DataError) -> Bool {
    if lhs._dataID != rhs._dataID {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs._errorData != rhs._errorData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PluginServiceError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PluginServiceError"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "error"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularEnumField(value: &self.error)
      case 3: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if self.error != .statusUnknown {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_PluginServiceError, rhs: Bosdyn_Api_PluginServiceError) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.error != rhs.error {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_PluginServiceError.ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_REQUEST_ERROR"),
    2: .same(proto: "STATUS_GETSTATUS_ERROR"),
    3: .same(proto: "STATUS_INTERNAL_ERROR"),
  ]
}

extension Bosdyn_Api_AcquireDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "action_id"),
    3: .same(proto: "metadata"),
    4: .standard(proto: "acquisition_requests"),
    5: .standard(proto: "min_timeout"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._actionID)
      case 3: try decoder.decodeSingularMessageField(value: &self._metadata)
      case 4: try decoder.decodeSingularMessageField(value: &self._acquisitionRequests)
      case 5: try decoder.decodeSingularMessageField(value: &self._minTimeout)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._actionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._acquisitionRequests {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._minTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquireDataRequest, rhs: Bosdyn_Api_AcquireDataRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._actionID != rhs._actionID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._acquisitionRequests != rhs._acquisitionRequests {return false}
    if lhs._minTimeout != rhs._minTimeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquireDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquireDataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "request_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.requestID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.requestID != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquireDataResponse, rhs: Bosdyn_Api_AcquireDataResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquireDataResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_UNKNOWN_CAPTURE_TYPE"),
  ]
}

extension Bosdyn_Api_AcquirePluginDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePluginDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "data_id"),
    3: .same(proto: "metadata"),
    4: .standard(proto: "action_id"),
    5: .standard(proto: "acquisition_requests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.dataID)
      case 3: try decoder.decodeSingularMessageField(value: &self._metadata)
      case 4: try decoder.decodeSingularMessageField(value: &self._actionID)
      case 5: try decoder.decodeSingularMessageField(value: &self._acquisitionRequests)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.dataID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataID, fieldNumber: 2)
    }
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._actionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._acquisitionRequests {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquirePluginDataRequest, rhs: Bosdyn_Api_AcquirePluginDataRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.dataID != rhs.dataID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs._actionID != rhs._actionID {return false}
    if lhs._acquisitionRequests != rhs._acquisitionRequests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquirePluginDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcquirePluginDataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "request_id"),
    5: .standard(proto: "timeout_deadline"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.requestID)
      case 5: try decoder.decodeSingularMessageField(value: &self._timeoutDeadline)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.requestID != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestID, fieldNumber: 3)
    }
    if let v = self._timeoutDeadline {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_AcquirePluginDataResponse, rhs: Bosdyn_Api_AcquirePluginDataResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs._timeoutDeadline != rhs._timeoutDeadline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_AcquirePluginDataResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_UNKNOWN_CAPTURE_TYPE"),
  ]
}

extension Bosdyn_Api_GetStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "request_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.requestID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.requestID != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetStatusRequest, rhs: Bosdyn_Api_GetStatusRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
    3: .standard(proto: "data_saved"),
    9: .standard(proto: "data_errors"),
    10: .standard(proto: "service_errors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.dataSaved)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.dataErrors)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.serviceErrors)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if !self.dataSaved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataSaved, fieldNumber: 3)
    }
    if !self.dataErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataErrors, fieldNumber: 9)
    }
    if !self.serviceErrors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceErrors, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetStatusResponse, rhs: Bosdyn_Api_GetStatusResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.dataSaved != rhs.dataSaved {return false}
    if lhs.dataErrors != rhs.dataErrors {return false}
    if lhs.serviceErrors != rhs.serviceErrors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetStatusResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_ACQUIRING"),
    2: .same(proto: "STATUS_SAVING"),
    3: .same(proto: "STATUS_COMPLETE"),
    4: .same(proto: "STATUS_CANCEL_IN_PROGRESS"),
    5: .same(proto: "STATUS_ACQUISITION_CANCELLED"),
    10: .same(proto: "STATUS_DATA_ERROR"),
    11: .same(proto: "STATUS_TIMEDOUT"),
    12: .same(proto: "STATUS_INTERNAL_ERROR"),
    20: .same(proto: "STATUS_REQUEST_ID_DOES_NOT_EXIST"),
    30: .same(proto: "STATUS_CANCEL_ACQUISITION_FAILED"),
  ]
}

extension Bosdyn_Api_GetServiceInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetServiceInfoRequest, rhs: Bosdyn_Api_GetServiceInfoRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_GetServiceInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetServiceInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "capabilities"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularMessageField(value: &self._capabilities)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._capabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_GetServiceInfoResponse, rhs: Bosdyn_Api_GetServiceInfoResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._capabilities != rhs._capabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CancelAcquisitionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelAcquisitionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .standard(proto: "request_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.requestID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.requestID != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_CancelAcquisitionRequest, rhs: Bosdyn_Api_CancelAcquisitionRequest) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CancelAcquisitionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CancelAcquisitionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._header)
      case 2: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_CancelAcquisitionResponse, rhs: Bosdyn_Api_CancelAcquisitionResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_CancelAcquisitionResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_OK"),
    2: .same(proto: "STATUS_FAILED_TO_CANCEL"),
    3: .same(proto: "STATUS_REQUEST_ID_DOES_NOT_EXIST"),
  ]
}
