// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: bosdyn/api/full_body_command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The robot command message to specify a basic command that requires full control of the entire
/// robot to be completed.
public struct Bosdyn_Api_FullBodyCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The full body request must be one of the basic command primitives.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Only one full body command can be requested at a time.
    public var command: Bosdyn_Api_FullBodyCommand.Request.OneOf_Command? = nil

    /// Command to stop the robot.
    public var stopRequest: Bosdyn_Api_StopCommand.Request {
      get {
        if case .stopRequest(let v)? = command {return v}
        return Bosdyn_Api_StopCommand.Request()
      }
      set {command = .stopRequest(newValue)}
    }

    /// Command to freeze all joints of the robot.
    public var freezeRequest: Bosdyn_Api_FreezeCommand.Request {
      get {
        if case .freezeRequest(let v)? = command {return v}
        return Bosdyn_Api_FreezeCommand.Request()
      }
      set {command = .freezeRequest(newValue)}
    }

    /// Command to self-right the robot to a ready position.
    public var selfrightRequest: Bosdyn_Api_SelfRightCommand.Request {
      get {
        if case .selfrightRequest(let v)? = command {return v}
        return Bosdyn_Api_SelfRightCommand.Request()
      }
      set {command = .selfrightRequest(newValue)}
    }

    /// Command to safely power off the robot.
    public var safePowerOffRequest: Bosdyn_Api_SafePowerOffCommand.Request {
      get {
        if case .safePowerOffRequest(let v)? = command {return v}
        return Bosdyn_Api_SafePowerOffCommand.Request()
      }
      set {command = .safePowerOffRequest(newValue)}
    }

    /// Command to put the robot in a position to easily change the battery.
    public var batteryChangePoseRequest: Bosdyn_Api_BatteryChangePoseCommand.Request {
      get {
        if case .batteryChangePoseRequest(let v)? = command {return v}
        return Bosdyn_Api_BatteryChangePoseCommand.Request()
      }
      set {command = .batteryChangePoseRequest(newValue)}
    }

    /// Command to perform payload mass property estimation
    public var payloadEstimationRequest: Bosdyn_Api_PayloadEstimationCommand.Request {
      get {
        if case .payloadEstimationRequest(let v)? = command {return v}
        return Bosdyn_Api_PayloadEstimationCommand.Request()
      }
      set {command = .payloadEstimationRequest(newValue)}
    }

    /// Robot specific command parameters.
    public var params: SwiftProtobuf.Google_Protobuf_Any {
      get {return _params ?? SwiftProtobuf.Google_Protobuf_Any()}
      set {_params = newValue}
    }
    /// Returns true if `params` has been explicitly set.
    public var hasParams: Bool {return self._params != nil}
    /// Clears the value of `params`. Subsequent reads from it will return its default value.
    public mutating func clearParams() {self._params = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Only one full body command can be requested at a time.
    public enum OneOf_Command: Equatable {
      /// Command to stop the robot.
      case stopRequest(Bosdyn_Api_StopCommand.Request)
      /// Command to freeze all joints of the robot.
      case freezeRequest(Bosdyn_Api_FreezeCommand.Request)
      /// Command to self-right the robot to a ready position.
      case selfrightRequest(Bosdyn_Api_SelfRightCommand.Request)
      /// Command to safely power off the robot.
      case safePowerOffRequest(Bosdyn_Api_SafePowerOffCommand.Request)
      /// Command to put the robot in a position to easily change the battery.
      case batteryChangePoseRequest(Bosdyn_Api_BatteryChangePoseCommand.Request)
      /// Command to perform payload mass property estimation
      case payloadEstimationRequest(Bosdyn_Api_PayloadEstimationCommand.Request)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_FullBodyCommand.Request.OneOf_Command, rhs: Bosdyn_Api_FullBodyCommand.Request.OneOf_Command) -> Bool {
        switch (lhs, rhs) {
        case (.stopRequest(let l), .stopRequest(let r)): return l == r
        case (.freezeRequest(let l), .freezeRequest(let r)): return l == r
        case (.selfrightRequest(let l), .selfrightRequest(let r)): return l == r
        case (.safePowerOffRequest(let l), .safePowerOffRequest(let r)): return l == r
        case (.batteryChangePoseRequest(let l), .batteryChangePoseRequest(let r)): return l == r
        case (.payloadEstimationRequest(let l), .payloadEstimationRequest(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _params: SwiftProtobuf.Google_Protobuf_Any? = nil
  }

  /// The feedback for the fully body command that will provide information on the progress
  /// of the robot command.
  public struct Feedback {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The feedback message associated with the requested command. Some commands may have
    /// an empty feedback message if they do not provide any updates/progress.
    public var feedback: Bosdyn_Api_FullBodyCommand.Feedback.OneOf_Feedback? = nil

    /// Feedback for the stop command request.
    public var stopFeedback: Bosdyn_Api_StopCommand.Feedback {
      get {
        if case .stopFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_StopCommand.Feedback()
      }
      set {feedback = .stopFeedback(newValue)}
    }

    /// Feedback for the freeze command request.
    public var freezeFeedback: Bosdyn_Api_FreezeCommand.Feedback {
      get {
        if case .freezeFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_FreezeCommand.Feedback()
      }
      set {feedback = .freezeFeedback(newValue)}
    }

    /// Feedback for the self-right command request.
    public var selfrightFeedback: Bosdyn_Api_SelfRightCommand.Feedback {
      get {
        if case .selfrightFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_SelfRightCommand.Feedback()
      }
      set {feedback = .selfrightFeedback(newValue)}
    }

    /// Feedback for the safe power off command request.
    public var safePowerOffFeedback: Bosdyn_Api_SafePowerOffCommand.Feedback {
      get {
        if case .safePowerOffFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_SafePowerOffCommand.Feedback()
      }
      set {feedback = .safePowerOffFeedback(newValue)}
    }

    /// Feedback for the battery change pose command request.
    public var batteryChangePoseFeedback: Bosdyn_Api_BatteryChangePoseCommand.Feedback {
      get {
        if case .batteryChangePoseFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_BatteryChangePoseCommand.Feedback()
      }
      set {feedback = .batteryChangePoseFeedback(newValue)}
    }

    /// Feedback for the payload estimation command request.
    public var payloadEstimationFeedback: Bosdyn_Api_PayloadEstimationCommand.Feedback {
      get {
        if case .payloadEstimationFeedback(let v)? = feedback {return v}
        return Bosdyn_Api_PayloadEstimationCommand.Feedback()
      }
      set {feedback = .payloadEstimationFeedback(newValue)}
    }

    public var status: Bosdyn_Api_RobotCommandFeedbackStatus.Status = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// The feedback message associated with the requested command. Some commands may have
    /// an empty feedback message if they do not provide any updates/progress.
    public enum OneOf_Feedback: Equatable {
      /// Feedback for the stop command request.
      case stopFeedback(Bosdyn_Api_StopCommand.Feedback)
      /// Feedback for the freeze command request.
      case freezeFeedback(Bosdyn_Api_FreezeCommand.Feedback)
      /// Feedback for the self-right command request.
      case selfrightFeedback(Bosdyn_Api_SelfRightCommand.Feedback)
      /// Feedback for the safe power off command request.
      case safePowerOffFeedback(Bosdyn_Api_SafePowerOffCommand.Feedback)
      /// Feedback for the battery change pose command request.
      case batteryChangePoseFeedback(Bosdyn_Api_BatteryChangePoseCommand.Feedback)
      /// Feedback for the payload estimation command request.
      case payloadEstimationFeedback(Bosdyn_Api_PayloadEstimationCommand.Feedback)

    #if !swift(>=4.1)
      public static func ==(lhs: Bosdyn_Api_FullBodyCommand.Feedback.OneOf_Feedback, rhs: Bosdyn_Api_FullBodyCommand.Feedback.OneOf_Feedback) -> Bool {
        switch (lhs, rhs) {
        case (.stopFeedback(let l), .stopFeedback(let r)): return l == r
        case (.freezeFeedback(let l), .freezeFeedback(let r)): return l == r
        case (.selfrightFeedback(let l), .selfrightFeedback(let r)): return l == r
        case (.safePowerOffFeedback(let l), .safePowerOffFeedback(let r)): return l == r
        case (.batteryChangePoseFeedback(let l), .batteryChangePoseFeedback(let r)): return l == r
        case (.payloadEstimationFeedback(let l), .payloadEstimationFeedback(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bosdyn.api"

extension Bosdyn_Api_FullBodyCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FullBodyCommand"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_FullBodyCommand, rhs: Bosdyn_Api_FullBodyCommand) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_FullBodyCommand.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_FullBodyCommand.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stop_request"),
    2: .standard(proto: "freeze_request"),
    3: .standard(proto: "selfright_request"),
    4: .standard(proto: "safe_power_off_request"),
    5: .standard(proto: "battery_change_pose_request"),
    6: .standard(proto: "payload_estimation_request"),
    100: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_StopCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .stopRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .stopRequest(v)}
      case 2:
        var v: Bosdyn_Api_FreezeCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .freezeRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .freezeRequest(v)}
      case 3:
        var v: Bosdyn_Api_SelfRightCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .selfrightRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .selfrightRequest(v)}
      case 4:
        var v: Bosdyn_Api_SafePowerOffCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .safePowerOffRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .safePowerOffRequest(v)}
      case 5:
        var v: Bosdyn_Api_BatteryChangePoseCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .batteryChangePoseRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .batteryChangePoseRequest(v)}
      case 6:
        var v: Bosdyn_Api_PayloadEstimationCommand.Request?
        if let current = self.command {
          try decoder.handleConflictingOneOf()
          if case .payloadEstimationRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.command = .payloadEstimationRequest(v)}
      case 100: try decoder.decodeSingularMessageField(value: &self._params)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.command {
    case .stopRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .freezeRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .selfrightRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .safePowerOffRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .batteryChangePoseRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .payloadEstimationRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_FullBodyCommand.Request, rhs: Bosdyn_Api_FullBodyCommand.Request) -> Bool {
    if lhs.command != rhs.command {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bosdyn_Api_FullBodyCommand.Feedback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bosdyn_Api_FullBodyCommand.protoMessageName + ".Feedback"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stop_feedback"),
    2: .standard(proto: "freeze_feedback"),
    3: .standard(proto: "selfright_feedback"),
    4: .standard(proto: "safe_power_off_feedback"),
    5: .standard(proto: "battery_change_pose_feedback"),
    6: .standard(proto: "payload_estimation_feedback"),
    100: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Bosdyn_Api_StopCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .stopFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .stopFeedback(v)}
      case 2:
        var v: Bosdyn_Api_FreezeCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .freezeFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .freezeFeedback(v)}
      case 3:
        var v: Bosdyn_Api_SelfRightCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .selfrightFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .selfrightFeedback(v)}
      case 4:
        var v: Bosdyn_Api_SafePowerOffCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .safePowerOffFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .safePowerOffFeedback(v)}
      case 5:
        var v: Bosdyn_Api_BatteryChangePoseCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .batteryChangePoseFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .batteryChangePoseFeedback(v)}
      case 6:
        var v: Bosdyn_Api_PayloadEstimationCommand.Feedback?
        if let current = self.feedback {
          try decoder.handleConflictingOneOf()
          if case .payloadEstimationFeedback(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.feedback = .payloadEstimationFeedback(v)}
      case 100: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.feedback {
    case .stopFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .freezeFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .selfrightFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .safePowerOffFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .batteryChangePoseFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .payloadEstimationFeedback(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bosdyn_Api_FullBodyCommand.Feedback, rhs: Bosdyn_Api_FullBodyCommand.Feedback) -> Bool {
    if lhs.feedback != rhs.feedback {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
