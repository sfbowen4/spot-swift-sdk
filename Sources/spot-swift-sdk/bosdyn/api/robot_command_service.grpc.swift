//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/robot_command_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The robot command service allows a client application to control and move the robot.
///
/// Usage: instantiate `Bosdyn_Api_RobotCommandServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_RobotCommandServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_RobotCommandServiceClientInterceptorFactoryProtocol? { get }

  func robotCommand(
    _ request: Bosdyn_Api_RobotCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RobotCommandRequest, Bosdyn_Api_RobotCommandResponse>

  func robotCommandFeedback(
    _ request: Bosdyn_Api_RobotCommandFeedbackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_RobotCommandFeedbackRequest, Bosdyn_Api_RobotCommandFeedbackResponse>

  func clearBehaviorFault(
    _ request: Bosdyn_Api_ClearBehaviorFaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_ClearBehaviorFaultRequest, Bosdyn_Api_ClearBehaviorFaultResponse>
}

extension Bosdyn_Api_RobotCommandServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.RobotCommandService"
  }

  /// Starts a behavior command on the robot. Issuing a new command overrides the active command.
  /// Each command is issued a UID for feedback retrieval.
  ///
  /// - Parameters:
  ///   - request: Request to send to RobotCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func robotCommand(
    _ request: Bosdyn_Api_RobotCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RobotCommandRequest, Bosdyn_Api_RobotCommandResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.RobotCommandService/RobotCommand",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRobotCommandInterceptors() ?? []
    )
  }

  /// A client queries this RPC to determine a robot's progress towards completion of a command.
  /// This updates the client with metrics like "distance to goal."
  /// The client should use this feedback to determine whether the current command has
  /// succeeeded or failed, and thus send the next command.
  ///
  /// - Parameters:
  ///   - request: Request to send to RobotCommandFeedback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func robotCommandFeedback(
    _ request: Bosdyn_Api_RobotCommandFeedbackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_RobotCommandFeedbackRequest, Bosdyn_Api_RobotCommandFeedbackResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.RobotCommandService/RobotCommandFeedback",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRobotCommandFeedbackInterceptors() ?? []
    )
  }

  /// Clear robot behavior fault.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClearBehaviorFault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clearBehaviorFault(
    _ request: Bosdyn_Api_ClearBehaviorFaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_ClearBehaviorFaultRequest, Bosdyn_Api_ClearBehaviorFaultResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.RobotCommandService/ClearBehaviorFault",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClearBehaviorFaultInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_RobotCommandServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'robotCommand'.
  func makeRobotCommandInterceptors() -> [ClientInterceptor<Bosdyn_Api_RobotCommandRequest, Bosdyn_Api_RobotCommandResponse>]

  /// - Returns: Interceptors to use when invoking 'robotCommandFeedback'.
  func makeRobotCommandFeedbackInterceptors() -> [ClientInterceptor<Bosdyn_Api_RobotCommandFeedbackRequest, Bosdyn_Api_RobotCommandFeedbackResponse>]

  /// - Returns: Interceptors to use when invoking 'clearBehaviorFault'.
  func makeClearBehaviorFaultInterceptors() -> [ClientInterceptor<Bosdyn_Api_ClearBehaviorFaultRequest, Bosdyn_Api_ClearBehaviorFaultResponse>]
}

public final class Bosdyn_Api_RobotCommandServiceClient: Bosdyn_Api_RobotCommandServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_RobotCommandServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.RobotCommandService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_RobotCommandServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The robot command service allows a client application to control and move the robot.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_RobotCommandServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_RobotCommandServiceServerInterceptorFactoryProtocol? { get }

  /// Starts a behavior command on the robot. Issuing a new command overrides the active command.
  /// Each command is issued a UID for feedback retrieval.
  func robotCommand(request: Bosdyn_Api_RobotCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RobotCommandResponse>

  /// A client queries this RPC to determine a robot's progress towards completion of a command.
  /// This updates the client with metrics like "distance to goal."
  /// The client should use this feedback to determine whether the current command has
  /// succeeeded or failed, and thus send the next command.
  func robotCommandFeedback(request: Bosdyn_Api_RobotCommandFeedbackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_RobotCommandFeedbackResponse>

  /// Clear robot behavior fault.
  func clearBehaviorFault(request: Bosdyn_Api_ClearBehaviorFaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_ClearBehaviorFaultResponse>
}

extension Bosdyn_Api_RobotCommandServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.RobotCommandService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RobotCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RobotCommandRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RobotCommandResponse>(),
        interceptors: self.interceptors?.makeRobotCommandInterceptors() ?? [],
        userFunction: self.robotCommand(request:context:)
      )

    case "RobotCommandFeedback":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_RobotCommandFeedbackRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_RobotCommandFeedbackResponse>(),
        interceptors: self.interceptors?.makeRobotCommandFeedbackInterceptors() ?? [],
        userFunction: self.robotCommandFeedback(request:context:)
      )

    case "ClearBehaviorFault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_ClearBehaviorFaultRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_ClearBehaviorFaultResponse>(),
        interceptors: self.interceptors?.makeClearBehaviorFaultInterceptors() ?? [],
        userFunction: self.clearBehaviorFault(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_RobotCommandServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'robotCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRobotCommandInterceptors() -> [ServerInterceptor<Bosdyn_Api_RobotCommandRequest, Bosdyn_Api_RobotCommandResponse>]

  /// - Returns: Interceptors to use when handling 'robotCommandFeedback'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRobotCommandFeedbackInterceptors() -> [ServerInterceptor<Bosdyn_Api_RobotCommandFeedbackRequest, Bosdyn_Api_RobotCommandFeedbackResponse>]

  /// - Returns: Interceptors to use when handling 'clearBehaviorFault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClearBehaviorFaultInterceptors() -> [ServerInterceptor<Bosdyn_Api_ClearBehaviorFaultRequest, Bosdyn_Api_ClearBehaviorFaultResponse>]
}
