//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bosdyn/api/data_acquisition_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The DataAcquisitionService is the main data acquisition service run on robot, which recieves
/// incoming requests and sends queries to all directory-registered DataAcquisitionPluginServices.
///
/// Usage: instantiate `Bosdyn_Api_DataAcquisitionServiceClient`, then call methods of this protocol to make API calls.
public protocol Bosdyn_Api_DataAcquisitionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bosdyn_Api_DataAcquisitionServiceClientInterceptorFactoryProtocol? { get }

  func acquireData(
    _ request: Bosdyn_Api_AcquireDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_AcquireDataRequest, Bosdyn_Api_AcquireDataResponse>

  func getStatus(
    _ request: Bosdyn_Api_GetStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetStatusRequest, Bosdyn_Api_GetStatusResponse>

  func getServiceInfo(
    _ request: Bosdyn_Api_GetServiceInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_GetServiceInfoRequest, Bosdyn_Api_GetServiceInfoResponse>

  func cancelAcquisition(
    _ request: Bosdyn_Api_CancelAcquisitionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bosdyn_Api_CancelAcquisitionRequest, Bosdyn_Api_CancelAcquisitionResponse>
}

extension Bosdyn_Api_DataAcquisitionServiceClientProtocol {
  public var serviceName: String {
    return "bosdyn.api.DataAcquisitionService"
  }

  /// Trigger a data acquisition to save data and metadata to the data buffer.
  /// Sent by the tablet or a client to initiate a data acquisition and buffering process.
  ///
  /// - Parameters:
  ///   - request: Request to send to AcquireData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func acquireData(
    _ request: Bosdyn_Api_AcquireDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_AcquireDataRequest, Bosdyn_Api_AcquireDataResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionService/AcquireData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcquireDataInterceptors() ?? []
    )
  }

  /// Query the status of a data acquisition.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStatus(
    _ request: Bosdyn_Api_GetStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetStatusRequest, Bosdyn_Api_GetStatusResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionService/GetStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  /// Get information from a DAQ service; lists acquisition capabilities.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServiceInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getServiceInfo(
    _ request: Bosdyn_Api_GetServiceInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_GetServiceInfoRequest, Bosdyn_Api_GetServiceInfoResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionService/GetServiceInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetServiceInfoInterceptors() ?? []
    )
  }

  /// Cancel an in-progress data acquisition.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelAcquisition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelAcquisition(
    _ request: Bosdyn_Api_CancelAcquisitionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bosdyn_Api_CancelAcquisitionRequest, Bosdyn_Api_CancelAcquisitionResponse> {
    return self.makeUnaryCall(
      path: "/bosdyn.api.DataAcquisitionService/CancelAcquisition",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelAcquisitionInterceptors() ?? []
    )
  }
}

public protocol Bosdyn_Api_DataAcquisitionServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'acquireData'.
  func makeAcquireDataInterceptors() -> [ClientInterceptor<Bosdyn_Api_AcquireDataRequest, Bosdyn_Api_AcquireDataResponse>]

  /// - Returns: Interceptors to use when invoking 'getStatus'.
  func makeGetStatusInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetStatusRequest, Bosdyn_Api_GetStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getServiceInfo'.
  func makeGetServiceInfoInterceptors() -> [ClientInterceptor<Bosdyn_Api_GetServiceInfoRequest, Bosdyn_Api_GetServiceInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelAcquisition'.
  func makeCancelAcquisitionInterceptors() -> [ClientInterceptor<Bosdyn_Api_CancelAcquisitionRequest, Bosdyn_Api_CancelAcquisitionResponse>]
}

public final class Bosdyn_Api_DataAcquisitionServiceClient: Bosdyn_Api_DataAcquisitionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bosdyn_Api_DataAcquisitionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bosdyn.api.DataAcquisitionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bosdyn_Api_DataAcquisitionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The DataAcquisitionService is the main data acquisition service run on robot, which recieves
/// incoming requests and sends queries to all directory-registered DataAcquisitionPluginServices.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Bosdyn_Api_DataAcquisitionServiceProvider: CallHandlerProvider {
  var interceptors: Bosdyn_Api_DataAcquisitionServiceServerInterceptorFactoryProtocol? { get }

  /// Trigger a data acquisition to save data and metadata to the data buffer.
  /// Sent by the tablet or a client to initiate a data acquisition and buffering process.
  func acquireData(request: Bosdyn_Api_AcquireDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_AcquireDataResponse>

  /// Query the status of a data acquisition.
  func getStatus(request: Bosdyn_Api_GetStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetStatusResponse>

  /// Get information from a DAQ service; lists acquisition capabilities.
  func getServiceInfo(request: Bosdyn_Api_GetServiceInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_GetServiceInfoResponse>

  /// Cancel an in-progress data acquisition.
  func cancelAcquisition(request: Bosdyn_Api_CancelAcquisitionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bosdyn_Api_CancelAcquisitionResponse>
}

extension Bosdyn_Api_DataAcquisitionServiceProvider {
  public var serviceName: Substring { return "bosdyn.api.DataAcquisitionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AcquireData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_AcquireDataRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_AcquireDataResponse>(),
        interceptors: self.interceptors?.makeAcquireDataInterceptors() ?? [],
        userFunction: self.acquireData(request:context:)
      )

    case "GetStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetStatusResponse>(),
        interceptors: self.interceptors?.makeGetStatusInterceptors() ?? [],
        userFunction: self.getStatus(request:context:)
      )

    case "GetServiceInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_GetServiceInfoRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_GetServiceInfoResponse>(),
        interceptors: self.interceptors?.makeGetServiceInfoInterceptors() ?? [],
        userFunction: self.getServiceInfo(request:context:)
      )

    case "CancelAcquisition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bosdyn_Api_CancelAcquisitionRequest>(),
        responseSerializer: ProtobufSerializer<Bosdyn_Api_CancelAcquisitionResponse>(),
        interceptors: self.interceptors?.makeCancelAcquisitionInterceptors() ?? [],
        userFunction: self.cancelAcquisition(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Bosdyn_Api_DataAcquisitionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'acquireData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcquireDataInterceptors() -> [ServerInterceptor<Bosdyn_Api_AcquireDataRequest, Bosdyn_Api_AcquireDataResponse>]

  /// - Returns: Interceptors to use when handling 'getStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetStatusInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetStatusRequest, Bosdyn_Api_GetStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getServiceInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetServiceInfoInterceptors() -> [ServerInterceptor<Bosdyn_Api_GetServiceInfoRequest, Bosdyn_Api_GetServiceInfoResponse>]

  /// - Returns: Interceptors to use when handling 'cancelAcquisition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelAcquisitionInterceptors() -> [ServerInterceptor<Bosdyn_Api_CancelAcquisitionRequest, Bosdyn_Api_CancelAcquisitionResponse>]
}
